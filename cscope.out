cscope 15 $HOME/cs350-os161/os161-1.99/kern               0000598397
	@arch/mips/include/current.h

30 #i‚de‡
_MIPS_CURRENT_H_


31 
	#_MIPS_CURRENT_H_


	)

79 
thªad
 *
cuπhªad
 
asm
("$23");

80 #unde‡
__NEED_CURTHREAD


81 
	#__NEED_CURCPU


	)

84 
	#INIT_CURCPU
(
˝u
, 
thªad
Ë(
cuπhªad
 = (thªad), 
cur˝u
 = (˝u))

	)

	@arch/mips/include/elf.h

30 #i‚de‡
_MIPS_ELF_H_


31 
	#_MIPS_ELF_H_


	)

39 
	#EM_MACHINE
 
EM_MIPS


	)

42 
	#R_MIPS_NONE
 0

	)

43 
	#R_MIPS_16
 1

	)

44 
	#R_MIPS_32
 2

	)

45 
	#R_MIPS_REL32
 3

	)

46 
	#R_MIPS_26
 4

	)

47 
	#R_MIPS_HI16
 5

	)

48 
	#R_MIPS_LO16
 6

	)

49 
	#R_MIPS_GPREL16
 7

	)

50 
	#R_MIPS_LITERAL
 8

	)

51 
	#R_MIPS_GOT16
 9

	)

52 
	#R_MIPS_PC16
 10

	)

53 
	#R_MIPS_CALL16
 11

	)

54 
	#R_MIPS_GPREL32
 12

	)

	@arch/mips/include/kern/endian.h

30 #i‚de‡
_KERN_MIPS_ENDIAN_H_


31 
	#_KERN_MIPS_ENDIAN_H_


	)

42 
	#_BYTE_ORDER
 
_BIG_ENDIAN


	)

	@arch/mips/include/kern/regdefs.h

36 #i‚de‡
_KERN_MIPS_REGDEFS_H_


37 
	#_KERN_MIPS_REGDEFS_H_


	)

40 
	#z0
 
$0


	)

41 
	#AT
 
$1


	)

42 
	#v0
 
$2


	)

43 
	#v1
 
$3


	)

44 
	#a0
 
$4


	)

45 
	#a1
 
$5


	)

46 
	#a2
 
$6


	)

47 
	#a3
 
$7


	)

48 
	#t0
 
$8


	)

49 
	#t1
 
$9


	)

50 
	#t2
 
$10


	)

51 
	#t3
 
$11


	)

52 
	#t4
 
$12


	)

53 
	#t5
 
$13


	)

54 
	#t6
 
$14


	)

55 
	#t7
 
$15


	)

56 
	#s0
 
$16


	)

57 
	#s1
 
$17


	)

58 
	#s2
 
$18


	)

59 
	#s3
 
$19


	)

60 
	#s4
 
$20


	)

61 
	#s5
 
$21


	)

62 
	#s6
 
$22


	)

63 
	#s7
 
$23


	)

64 
	#t8
 
$24


	)

65 
	#t9
 
$25


	)

66 
	#k0
 
$26


	)

67 
	#k1
 
$27


	)

68 
	#gp
 
$28


	)

69 
	#•
 
$29


	)

70 
	#s8
 
$30


	)

71 
	#ø
 
$31


	)

	@arch/mips/include/kern/setjmp.h

30 #i‚de‡
_MIPS_SETJMP_H_


31 
	#_MIPS_SETJMP_H_


	)

41 
	#__JB_REGS
 11

	)

44 
uöt32_t
 
	tjmp_buf
[
__JB_REGS
];

	@arch/mips/include/kern/signal.h

31 #i‚de‡
_KERN_MIPS_SIGNAL_H_


32 
	#_KERN_MIPS_SIGNAL_H_


	)

41 
	ssigc⁄ãxt
 {

	@arch/mips/include/kern/types.h

30 #i‚de‡
_KERN_MIPS_TYPES_H_


31 
	#_KERN_MIPS_TYPES_H_


	)

43 
	t__i8
;

44 
	t__i16
;

45 
	t__i32
;

46 
	t__i64
;

48 
	t__u8
;

49 
	t__u16
;

50 
	t__u32
;

51 
	t__u64
;

54 
	t__öçå_t
;

55 
	t__uöçå_t
;

65 
	t__size_t
;

66 
	t__ssize_t
;

67 
	t__±rdiff_t
;

69 
	t__size_t
;

70 
	t__ssize_t
;

71 
	t__±rdiff_t
;

75 
	#__CHAR_BIT
 8

	)

	@arch/mips/include/specialreg.h

30 #i‚de‡
_MIPS_SPECIALREG_H_


31 
	#_MIPS_SPECIALREG_H_


	)

37 
	#c0_ödex
 
$0


	)

38 
	#c0_øndom
 
$1


	)

39 
	#c0_íåylo
 
$2


	)

42 
	#c0_c⁄ãxt
 
$4


	)

45 
	#c0_vaddr
 
$8


	)

46 
	#c0_cou¡
 
$9


	)

47 
	#c0_íåyhi
 
$10


	)

48 
	#c0_com∑ª
 
$11


	)

49 
	#c0_°©us
 
$12


	)

50 
	#c0_ˇu£
 
$13


	)

51 
	#c0_ïc
 
$14


	)

52 
	#c0_¥id
 
$15


	)

61 
	#CST_IEc
 0x00000001

	)

62 
	#CST_KUc
 0x00000002

	)

63 
	#CST_IEp
 0x00000004

	)

64 
	#CST_KUp
 0x00000008

	)

65 
	#CST_IEo
 0x00000010

	)

66 
	#CST_KUo
 0x00000020

	)

67 
	#CST_MODEMASK
 0x0000003‡

	)

68 
	#CST_IRQMASK
 0x0000ff00

	)

69 
	#CST_BEV
 0x00400000

	)

74 
	#CCA_UTLB
 0x00000001

	)

75 
	#CCA_CODE
 0x0000003¯

	)

76 
	#CCA_IRQS
 0x0000ff00

	)

77 
	#CCA_COPN
 0x30000000

	)

78 
	#CCA_JD
 0x80000000

	)

80 
	#CCA_CODESHIFT
 2

	)

85 
	#CIN_P
 0x80000000

	)

86 
	#CIN_INDEX
 0x00003f00

	)

88 
	#CIN_INDEXSHIFT
 8

	)

105 
	#CTX_VSHIFT
 0x001ffff¯

	)

106 
	#CTX_PTBASE
 0xf„00000

	)

108 
	#CTX_PTBASESHIFT
 21

	)

113 
	#EXADDR_UTLB
 0x80000000

	)

114 
	#EXADDR_GENERAL
 0x80000080

	)

	@arch/mips/include/spinlock.h

30 #i‚de‡
_MIPS_SPINLOCK_H_


31 
	#_MIPS_SPINLOCK_H_


	)

33 
	~<cdefs.h
>

37 
	t•ölock_d©a_t
;

40 
	#SPINLOCK_DATA_INITIALIZER
 0

	)

43 
•ölock_d©a_£t
(vﬁ©ûê
•ölock_d©a_t
 *
sd
, 
vÆ
);

44 
•ölock_d©a_t
 
•ölock_d©a_gë
(vﬁ©ûê•ölock_d©a_à*
sd
);

45 
•ölock_d©a_t
 
•ölock_d©a_ã°™d£t
(vﬁ©ûê•ölock_d©a_à*
sd
);

49 
SPINLOCK_INLINE


51 
	$•ölock_d©a_£t
(vﬁ©ûê
•ölock_d©a_t
 *
sd
, 
vÆ
)

53 *
sd
 = 
vÆ
;

54 
	}
}

56 
SPINLOCK_INLINE


57 
•ölock_d©a_t


58 
	$•ölock_d©a_gë
(vﬁ©ûê
•ölock_d©a_t
 *
sd
)

60  *
sd
;

61 
	}
}

63 
SPINLOCK_INLINE


64 
•ölock_d©a_t


65 
	$•ölock_d©a_ã°™d£t
(vﬁ©ûê
•ölock_d©a_t
 *
sd
)

67 
•ölock_d©a_t
 
x
;

68 
•ölock_d©a_t
 
y
;

81 
y
 = 1;

82 
__asm
 volatile(

89 : "Ù" (
x
), "+r" (
y
Ë: "r" (
sd
));

90 i‡(
y
 == 0) {

93  
x
;

94 
	}
}

	@arch/mips/include/thread.h

30 #i‚de‡
_MIPS_THREAD_H_


31 
	#_MIPS_THREAD_H_


	)

38 
	~<£tjmp.h
>

40 (*
	tbadÁu…func_t
)();

42 
	sthªad_machdï
 {

43 
badÁu…func_t
 
tm_badÁu…func
;

44 
jmp_buf
 
tm_c›yjmp
;

	@arch/mips/include/tlb.h

30 #i‚de‡
_MIPS_TLB_H_


31 
	#_MIPS_TLB_H_


	)

58 
éb_øndom
(
uöt32_t
 
íåyhi
, uöt32_à
íåylo
);

59 
éb_wrôe
(
uöt32_t
 
íåyhi
, uöt32_à
íåylo
, uöt32_à
ödex
);

60 
éb_ªad
(
uöt32_t
 *
íåyhi
, uöt32_à*
íåylo
, uöt32_à
ödex
);

61 
éb_¥obe
(
uöt32_t
 
íåyhi
, uöt32_à
íåylo
);

80 
	#TLBHI_VPAGE
 0xfffff000

	)

84 
	#TLBLO_PPAGE
 0xfffff000

	)

85 
	#TLBLO_NOCACHE
 0x00000800

	)

86 
	#TLBLO_DIRTY
 0x00000400

	)

87 
	#TLBLO_VALID
 0x00000200

	)

95 
	#TLBHI_INVALID
(
íåyno
Ë((0x80000+”¡ryno))<<12)

	)

96 
	#TLBLO_INVALID
(Ë(0)

	)

102 
	#NUM_TLB
 64

	)

	@arch/mips/include/trapframe.h

30 #i‚de‡
_MIPS_TRAPFRAME_H_


31 
	#_MIPS_TRAPFRAME_H_


	)

40 
	så≠‰ame
 {

41 
uöt32_t
 
	mtf_vaddr
;

42 
uöt32_t
 
	mtf_°©us
;

43 
uöt32_t
 
	mtf_ˇu£
;

44 
uöt32_t
 
	mtf_lo
;

45 
uöt32_t
 
	mtf_hi
;

46 
uöt32_t
 
	mtf_ø
;

47 
uöt32_t
 
	mtf_©
;

48 
uöt32_t
 
	mtf_v0
;

49 
uöt32_t
 
	mtf_v1
;

50 
uöt32_t
 
	mtf_a0
;

51 
uöt32_t
 
	mtf_a1
;

52 
uöt32_t
 
	mtf_a2
;

53 
uöt32_t
 
	mtf_a3
;

54 
uöt32_t
 
	mtf_t0
;

55 
uöt32_t
 
	mtf_t1
;

56 
uöt32_t
 
	mtf_t2
;

57 
uöt32_t
 
	mtf_t3
;

58 
uöt32_t
 
	mtf_t4
;

59 
uöt32_t
 
	mtf_t5
;

60 
uöt32_t
 
	mtf_t6
;

61 
uöt32_t
 
	mtf_t7
;

62 
uöt32_t
 
	mtf_s0
;

63 
uöt32_t
 
	mtf_s1
;

64 
uöt32_t
 
	mtf_s2
;

65 
uöt32_t
 
	mtf_s3
;

66 
uöt32_t
 
	mtf_s4
;

67 
uöt32_t
 
	mtf_s5
;

68 
uöt32_t
 
	mtf_s6
;

69 
uöt32_t
 
	mtf_s7
;

70 
uöt32_t
 
	mtf_t8
;

71 
uöt32_t
 
	mtf_t9
;

72 
uöt32_t
 
	mtf_k0
;

73 
uöt32_t
 
	mtf_k1
;

74 
uöt32_t
 
	mtf_gp
;

75 
uöt32_t
 
	mtf_•
;

76 
uöt32_t
 
	mtf_s8
;

77 
uöt32_t
 
	mtf_ïc
;

83 
	#EX_IRQ
 0

	)

84 
	#EX_MOD
 1

	)

85 
	#EX_TLBL
 2

	)

86 
	#EX_TLBS
 3

	)

87 
	#EX_ADEL
 4

	)

88 
	#EX_ADES
 5

	)

89 
	#EX_IBE
 6

	)

90 
	#EX_DBE
 7

	)

91 
	#EX_SYS
 8

	)

92 
	#EX_BP
 9

	)

93 
	#EX_RI
 10

	)

94 
	#EX_CPU
 11

	)

95 
	#EX_OVF
 12

	)

101 
mùs_u£rmode
(
å≠‰ame
 *
tf
);

106 
vaddr_t
 
˝u°acks
[];

107 
vaddr_t
 
˝uthªads
[];

	@arch/mips/include/types.h

30 #i‚de‡
_MIPS_TYPES_H_


31 
	#_MIPS_TYPES_H_


	)

43 
__u32
 
	t∑ddr_t
;

44 
__u32
 
	tvaddr_t
;

	@arch/mips/include/vm.h

30 #i‚de‡
_MIPS_VM_H_


31 
	#_MIPS_VM_H_


	)

38 
	#PAGE_SIZE
 4096

	)

39 
	#PAGE_FRAME
 0xfffff000

	)

51 
	#MIPS_KUSEG
 0x00000000

	)

52 
	#MIPS_KSEG0
 0x80000000

	)

53 
	#MIPS_KSEG1
 0xa0000000

	)

54 
	#MIPS_KSEG2
 0xc0000000

	)

68 
	#PADDR_TO_KVADDR
(
∑ddr
Ë(’addr)+
MIPS_KSEG0
)

	)

74 
	#USERSPACETOP
 
MIPS_KSEG0


	)

84 
	#USERSTACK
 
USERSPACETOP


	)

101 
øm_boŸ°øp
();

102 
∑ddr_t
 
øm_°ólmem
(
≈ages
);

103 
øm_gësize
(
∑ddr_t
 *
lo
,Öaddr_à*
hi
);

111 
	sébshoŸdown
 {

115 
addr•a˚
 *
	mts_addr•a˚
;

116 
vaddr_t
 
	mts_vaddr
;

119 
	#TLBSHOOTDOWN_MAX
 16

	)

	@arch/mips/locore/trap.c

30 
	~<ty≥s.h
>

31 
	~<sig«l.h
>

32 
	~<lib.h
>

33 
	~<mùs/•ecüÃeg.h
>

34 
	~<mùs/å≠‰ame.h
>

35 
	~<˝u.h
>

36 
	~<•l.h
>

37 
	~<thªad.h
>

38 
	~<cuºít.h
>

39 
	~<vm.h
>

40 
	~<maöbus.h
>

41 
	~<sysˇŒ.h
>

42 
	~<›t-A3.h
>

43 
	~<addr•a˚.h
>

44 
	~<¥oc.h
>

47 
asm_u£rmode
(
å≠‰ame
 *
tf
);

50 
mùs_å≠
(
å≠‰ame
 *
tf
);

54 
	#NTRAPCODES
 13

	)

55 c⁄° *c⁄° 
	gå≠codíames
[
NTRAPCODES
] = {

76 
	$kûl_cuπhªad
(
vaddr_t
 
ïc
, 
code
, vaddr_à
vaddr
)

78 
sig
 = 0;

80 
	`KASSERT
(
code
 < 
NTRAPCODES
);

81 
code
) {

82 
EX_IRQ
:

83 
EX_IBE
:

84 
EX_DBE
:

85 
EX_SYS
:

87 
	`KASSERT
(0);

88 
sig
 = 
SIGABRT
;

90 
EX_MOD
:

91 
EX_TLBL
:

92 
EX_TLBS
:

93 
sig
 = 
SIGSEGV
;

95 
EX_ADEL
:

96 
EX_ADES
:

97 
sig
 = 
SIGBUS
;

99 
EX_BP
:

100 
sig
 = 
SIGTRAP
;

102 
EX_RI
:

103 
sig
 = 
SIGILL
;

105 
EX_CPU
:

106 
sig
 = 
SIGSEGV
;

108 
EX_OVF
:

109 
sig
 = 
SIGFPE
;

116 #i‡
OPT_A3


117 (Ë
ïc
;

118 (Ë
vaddr
;

120 
addr•a˚
 *
as
;

121 
¥oc
 *
p
 = 
cuΩroc
;

122 
	`as_dó˘iv©e
();

123 
as
 = 
	`cuΩroc_£ès
(
NULL
);

124 
	`as_de°roy
(
as
);

125 
	`¥oc_ªmthªad
(
cuπhªad
);

126 
	`¥oc_de°roy
(
p
);

127 
	`thªad_exô
();

131 
	`k¥ötf
("Fatal user modeÅrap %u sig %d (%s,Épc 0x%x, vaddr 0x%x)\n",

132 
code
, 
sig
, 
å≠codíames
[code], 
ïc
, 
vaddr
);

133 
	`∑nic
("I don't know howÅo handleÅhis\n");

135 
	}
}

143 
	$mùs_å≠
(
å≠‰ame
 *
tf
)

145 
uöt32_t
 
code
;

146 
boﬁ
 
isuéb
, 
iskîn
;

147 
•l
;

150 
	`KASSERT
((
å≠‰ame
)==(37*4));

155 
code
 = (
tf
->
tf_ˇu£
 & 
CCA_CODE
Ë>> 
CCA_CODESHIFT
;

156 
isuéb
 = (
tf
->
tf_ˇu£
 & 
CCA_UTLB
) != 0;

157 
iskîn
 = (
tf
->
tf_°©us
 & 
CST_KUp
) == 0;

159 
	`KASSERT
(
code
 < 
NTRAPCODES
);

162 i‡(
cuπhªad
 !
NULL
 && cuπhªad->
t_°ack
 != NULL) {

163 
	`KASSERT
((
vaddr_t
)
tf
 > (vaddr_t)
cuπhªad
->
t_°ack
);

164 
	`KASSERT
((
vaddr_t
)
tf
 < (vaddr_t)(
cuπhªad
->
t_°ack


165 + 
STACK_SIZE
));

169 i‡(
code
 =
EX_IRQ
) {

170 
ﬁd_ö
;

171 
boﬁ
 
dﬂdju°
;

173 
ﬁd_ö
 = 
cuπhªad
->
t_ö_öãºu±
;

174 
cuπhªad
->
t_ö_öãºu±
 = 1;

193 i‡(
cuπhªad
->
t_cur•l
 == 0) {

194 
	`KASSERT
(
cuπhªad
->
t_cur•l
 == 0);

195 
	`KASSERT
(
cuπhªad
->
t_ùlhigh_cou¡
 == 0);

196 
cuπhªad
->
t_cur•l
 = 
IPL_HIGH
;

197 
cuπhªad
->
t_ùlhigh_cou¡
++;

198 
dﬂdju°
 = 
åue
;

201 
dﬂdju°
 = 
Ál£
;

204 
	`maöbus_öãºu±
(
tf
);

206 i‡(
dﬂdju°
) {

207 
	`KASSERT
(
cuπhªad
->
t_cur•l
 =
IPL_HIGH
);

208 
	`KASSERT
(
cuπhªad
->
t_ùlhigh_cou¡
 == 1);

209 
cuπhªad
->
t_ùlhigh_cou¡
--;

210 
cuπhªad
->
t_cur•l
 = 0;

213 
cuπhªad
->
t_ö_öãºu±
 = 
ﬁd_ö
;

214 
d⁄e2
;

228 
•l
 = 
	`•lhigh
();

229 
	`•lx
(
•l
);

232 i‡(
code
 =
EX_SYS
) {

234 
	`KASSERT
(
cuπhªad
->
t_cur•l
 == 0);

235 
	`KASSERT
(
cuπhªad
->
t_ùlhigh_cou¡
 == 0);

237 
	`DEBUG
(
DB_SYSCALL
, "syscall: #%d,árgs %x %x %x %x\n",

238 
tf
->
tf_v0
,Åf->
tf_a0
,Åf->
tf_a1
,Åf->
tf_a2
,Åf->
tf_a3
);

240 
	`sysˇŒ
(
tf
);

241 
d⁄e
;

249 
code
) {

250 
EX_MOD
:

251 i‡(
	`vm_Áu…
(
VM_FAULT_READONLY
, 
tf
->
tf_vaddr
)==0) {

252 
d⁄e
;

255 
EX_TLBL
:

256 i‡(
	`vm_Áu…
(
VM_FAULT_READ
, 
tf
->
tf_vaddr
)==0) {

257 
d⁄e
;

260 
EX_TLBS
:

261 i‡(
	`vm_Áu…
(
VM_FAULT_WRITE
, 
tf
->
tf_vaddr
)==0) {

262 
d⁄e
;

265 
EX_IBE
:

266 
EX_DBE
:

276 
	`∑nic
("Bu†îr‹Éx˚±i⁄, PC=0x%x\n", 
tf
->
tf_ïc
);

286 i‡(!
iskîn
) {

291 
	`kûl_cuπhªad
(
tf
->
tf_ïc
, 
code
,Åf->
tf_vaddr
);

292 
d⁄e
;

316 i‡(
cuπhªad
 !
NULL
 &&

317 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 !
NULL
) {

318 
tf
->
tf_ïc
 = (
vaddr_t
Ë
cuπhªad
->
t_machdï
.
tm_badÁu…func
;

319 
d⁄e
;

326 
	`k¥ötf
("∑nic: F©ÆÉx˚±i⁄ %u (%sËö kî√»mode\n", 
code
,

327 
å≠codíames
[
code
]);

328 
	`k¥ötf
("panic: EPC 0x%x,Éxception vaddr 0x%x\n",

329 
tf
->
tf_ïc
,Åf->
tf_vaddr
);

331 
	`∑nic
("I can't handleÅhis... IÅhink I'll just dieÇow...\n");

333 
d⁄e
:

338 
	`˝u_úqoff
();

339 
d⁄e2
:

347 i‡(
cuπhªad
->
t_°ack
 =
NULL
) {

351 
˝uthªads
[
cur˝u
->
c_numbî
] = (
vaddr_t
)
cuπhªad
;

352 
˝u°acks
[
cur˝u
->
c_numbî
] = (
vaddr_t
)
cuπhªad
->
t_°ack
 + 
STACK_SIZE
;

363 
	`KASSERT
(
	`SAME_STACK
(
˝u°acks
[
cur˝u
->
c_numbî
]-1, (
vaddr_t
)
tf
));

364 
	}
}

384 
	$mùs_u£rmode
(
å≠‰ame
 *
tf
)

393 
	`•l0
();

394 
	`˝u_úqoff
();

396 
˝uthªads
[
cur˝u
->
c_numbî
] = (
vaddr_t
)
cuπhªad
;

397 
˝u°acks
[
cur˝u
->
c_numbî
] = (
vaddr_t
)
cuπhªad
->
t_°ack
 + 
STACK_SIZE
;

414 
	`KASSERT
(
	`SAME_STACK
(
˝u°acks
[
cur˝u
->
c_numbî
]-1, (
vaddr_t
)
tf
));

419 
	`asm_u£rmode
(
tf
);

420 
	}
}

435 
	$íãr_√w_¥o˚ss
(
¨gc
, 
u£Ωå_t
 
¨gv
, 
vaddr_t
 
°ack
, vaddr_à
íåy
)

437 
å≠‰ame
 
tf
;

439 
	`bzîo
(&
tf
, (tf));

441 
tf
.
tf_°©us
 = 
CST_IRQMASK
 | 
CST_IEp
 | 
CST_KUp
;

442 
tf
.
tf_ïc
 = 
íåy
;

443 
tf
.
tf_a0
 = 
¨gc
;

444 
tf
.
tf_a1
 = (
vaddr_t
)
¨gv
;

445 
tf
.
tf_•
 = 
°ack
;

447 
	`mùs_u£rmode
(&
tf
);

448 
	}
}

	@arch/mips/syscall/syscall.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<kîn/sysˇŒ.h
>

33 
	~<lib.h
>

34 
	~<mùs/å≠‰ame.h
>

35 
	~<thªad.h
>

36 
	~<cuºít.h
>

37 
	~<sysˇŒ.h
>

38 
	~<addr•a˚.h
>

40 
	~"›t-A2.h
"

80 
	$sysˇŒ
(
å≠‰ame
 *
tf
)

82 
ˇŒno
;

83 
öt32_t
 
ªtvÆ
;

84 
îr
;

86 
	`KASSERT
(
cuπhªad
 !
NULL
);

87 
	`KASSERT
(
cuπhªad
->
t_cur•l
 == 0);

88 
	`KASSERT
(
cuπhªad
->
t_ùlhigh_cou¡
 == 0);

90 
ˇŒno
 = 
tf
->
tf_v0
;

101 
ªtvÆ
 = 0;

103 
ˇŒno
) {

104 
SYS_ªboŸ
:

105 
îr
 = 
	`sys_ªboŸ
(
tf
->
tf_a0
);

108 
SYS___time
:

109 
îr
 = 
	`sys___time
((
u£Ωå_t
)
tf
->
tf_a0
,

110 (
u£Ωå_t
)
tf
->
tf_a1
);

112 #ifde‡
UW


113 
SYS_wrôe
:

114 
îr
 = 
	`sys_wrôe
(()
tf
->
tf_a0
,

115 (
u£Ωå_t
)
tf
->
tf_a1
,

116 ()
tf
->
tf_a2
,

117 (*)(&
ªtvÆ
));

119 
SYS__exô
:

120 
	`sys__exô
(()
tf
->
tf_a0
);

122 
	`∑nic
("unexpectedÑeturn from sys__exit");

124 
SYS_gëpid
:

125 
îr
 = 
	`sys_gëpid
((
pid_t
 *)&
ªtvÆ
);

127 
SYS_waôpid
:

128 
îr
 = 
	`sys_waôpid
((
pid_t
)
tf
->
tf_a0
,

129 (
u£Ωå_t
)
tf
->
tf_a1
,

130 ()
tf
->
tf_a2
,

131 (
pid_t
 *)&
ªtvÆ
);

136 #i‡
OPT_A2


137 
SYS_f‹k
:

138 
îr
 = 
	`sys_f‹k
(
tf
, &
ªtvÆ
);

140 
SYS_execv
:

141 
îr
 = 
	`sys_execv
((
u£Ωå_t
Ë
tf
->
tf_a0
, (u£Ωå_tËtf->
tf_a1
);

146 
	`k¥ötf
("Unknow¿sysˇŒ %d\n", 
ˇŒno
);

147 
îr
 = 
ENOSYS
;

152 i‡(
îr
) {

158 
tf
->
tf_v0
 = 
îr
;

159 
tf
->
tf_a3
 = 1;

163 
tf
->
tf_v0
 = 
ªtvÆ
;

164 
tf
->
tf_a3
 = 0;

172 
tf
->
tf_ïc
 += 4;

175 
	`KASSERT
(
cuπhªad
->
t_cur•l
 == 0);

177 
	`KASSERT
(
cuπhªad
->
t_ùlhigh_cou¡
 == 0);

178 
	}
}

189 
	$íãr_f‹ked_¥o˚ss
(*
tf
, 
¨g
)

191 #i‡
OPT_A2


192 (Ë
¨g
;

193 
	`as_a˘iv©e
();

194 
å≠‰ame
 
°acktf
;

195 
°acktf
 = *(
å≠‰ame
 *Ë
tf
;

197 
°acktf
.
tf_v0
 = 0;

198 
°acktf
.
tf_a3
 = 0;

199 
°acktf
.
tf_ïc
 = stacktf.tf_epc + 4;

201 
	`k‰ì
(
tf
);

202 
	`mùs_u£rmode
(&
°acktf
);

205 ()
tf
;

206 ()
¨g
;

208 
	}
}

	@arch/mips/thread/cpu.c

34 
	~<ty≥s.h
>

35 
	~<lib.h
>

36 
	~<mùs/•ecüÃeg.h
>

37 
	~<mùs/å≠‰ame.h
>

38 
	~<∂©f‹m/max˝us.h
>

39 
	~<˝u.h
>

40 
	~<thªad.h
>

59 
vaddr_t
 
	g˝u°acks
[
MAXCPUS
];

60 
vaddr_t
 
	g˝uthªads
[
MAXCPUS
];

68 
	$˝u_machdï_öô
(
˝u
 *
c
)

70 
vaddr_t
 
°ackpoöãr
;

72 
	`KASSERT
(
c
->
c_numbî
 < 
MAXCPUS
);

74 i‡(
c
->
c_cuπhªad
->
t_°ack
 =
NULL
) {

84 
°ackpoöãr
 = (
vaddr_t
Ë
c
->
c_cuπhªad
->
t_°ack
;

86 
°ackpoöãr
 +
STACK_SIZE
;

88 
˝u°acks
[
c
->
c_numbî
] = 
°ackpoöãr
;

89 
˝uthªads
[
c
->
c_numbî
] = (
vaddr_t
)c->
c_cuπhªad
;

91 
	}
}

100 
	$˝u_idítify
()

104 
	}
}

130 
	#GET_STATUS
(
x
Ë
__asm
 vﬁ©ûe("mfc0 %0,$12" : "Ù" (x))

	)

131 
	#SET_STATUS
(
x
Ë
__asm
 vﬁ©ûe("mtc0 %0,$12" :: "r" (x))

	)

137 
	$˝u_úq⁄
()

139 
uöt32_t
 
x
;

141 
	`GET_STATUS
(
x
);

142 
x
 |
CST_IEc
;

143 
	`SET_STATUS
(
x
);

144 
	}
}

150 
	$˝u_úqoff
()

152 
uöt32_t
 
x
;

154 
	`GET_STATUS
(
x
);

155 
x
 &~(
uöt32_t
)
CST_IEc
;

156 
	`SET_STATUS
(
x
);

157 
	}
}

164 
	$˝u_úq⁄off
()

166 
uöt32_t
 
x
, 
x⁄
, 
xoff
;

168 
	`GET_STATUS
(
x
);

169 
x⁄
 = 
x
 | 
CST_IEc
;

170 
xoff
 = 
x
 & ~(
uöt32_t
)
CST_IEc
;

171 
	`SET_STATUS
(
x⁄
);

172 
__asm
 volatile("nop;Çop;Çop;Çop");

173 
	`SET_STATUS
(
xoff
);

174 
	}
}

192 
ölöe


194 
	$waô
()

207 
__asm
 volatile(

214 
	}
}

220 
	$˝u_idÀ
()

222 
	`waô
();

223 
	`˝u_úq⁄off
();

224 
	}
}

230 
	$˝u_hÆt
()

232 
	`˝u_úqoff
();

234 
	`waô
();

236 
	}
}

	@arch/mips/thread/switchframe.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<thªad.h
>

33 
	~<thªad¥iv©e.h
>

35 
	~"swôch‰ame.h
"

38 
mùs_thªad°¨t
( );

55 
swôch‰ame_öô
(
thªad
 *thread,

56 (*
íåypoöt
)(*
d©a1
, 
d©a2
),

57 *
d©a1
, 
d©a2
)

59 
vaddr_t
 
°ackt›
;

60 
swôch‰ame
 *
sf
;

67 
°ackt›
 = ((
vaddr_t
)
thªad
->
t_°ack
Ë+ 
STACK_SIZE
;

68 
sf
 = ((
swôch‰ame
 *Ë
°ackt›
) - 1;

71 
	`bzîo
(
sf
, (*sf));

91 
sf
->
sf_s0
 = (
uöt32_t
)
íåypoöt
;

92 
sf
->
sf_s1
 = (
uöt32_t
)
d©a1
;

93 
sf
->
sf_s2
 = (
uöt32_t
)
d©a2
;

94 
sf
->
sf_ø
 = (
uöt32_t
)
mùs_thªad°¨t
;

97 
thªad
->
t_c⁄ãxt
 = 
sf
;

98 
	}
}

	@arch/mips/thread/switchframe.h

30 #i‚de‡
_MIPS_SWITCHFRAME_H_


31 
	#_MIPS_SWITCHFRAME_H_


	)

39 
	sswôch‰ame
 {

40 
uöt32_t
 
	msf_s0
;

41 
uöt32_t
 
	msf_s1
;

42 
uöt32_t
 
	msf_s2
;

43 
uöt32_t
 
	msf_s3
;

44 
uöt32_t
 
	msf_s4
;

45 
uöt32_t
 
	msf_s5
;

46 
uöt32_t
 
	msf_s6
;

47 
uöt32_t
 
	msf_s8
;

48 
uöt32_t
 
	msf_gp
;

49 
uöt32_t
 
	msf_ø
;

	@arch/mips/thread/thread_machdep.c

34 
	~<ty≥s.h
>

35 
	~<lib.h
>

36 
	~<thªad.h
>

37 
	~<thªad¥iv©e.h
>

40 
	$thªad_machdï_öô
(
thªad_machdï
 *
tm
)

42 
tm
->
tm_badÁu…func
 = 
NULL
;

43 
	}
}

46 
	$thªad_machdï_˛ónup
(
thªad_machdï
 *
tm
)

48 
	`KASSERT
(
tm
->
tm_badÁu…func
 =
NULL
);

49 
	}
}

	@arch/mips/vm/dumbvm.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<lib.h
>

33 
	~<•l.h
>

34 
	~<•ölock.h
>

35 
	~<¥oc.h
>

36 
	~<cuºít.h
>

37 
	~<mùs/éb.h
>

38 
	~<addr•a˚.h
>

39 
	~<vm.h
>

40 
	~<›t-A3.h
>

47 
	#DUMBVM_STACKPAGES
 12

	)

52 
•ölock
 
	g°ólmem_lock
 = 
SPINLOCK_INITIALIZER
;

54 #i‡
OPT_A3


55 
	sc‹em≠
{

56 
∑ddr_t
 
	maddr
;

57 
boﬁ
 
	mu£d
;

58 
boﬁ
 
	mc⁄tiguous
;

61 
c‹em≠
 *
	gc‹em≠s
;

62 
	gnum_‰ames
;

63 
boﬁ
 
	göô
 = 
Ál£
;

68 
	$vm_boŸ°øp
()

70 #i‡
OPT_A3


72 
∑ddr_t
 
lo
;

73 
∑ddr_t
 
hi
;

74 
	`øm_gësize
(&
lo
, &
hi
);

76 
c‹em≠s
 = (
c‹em≠
 *Ë
	`PADDR_TO_KVADDR
(
lo
);

77 
‰ames
 = (
hi
 - 
lo
)/
PAGE_SIZE
;

78 
lo
 +
‰ames
 * ((
c‹em≠
));

81 
lo
 % 
PAGE_SIZE
 !=0){

82 
lo
 =Üo+1;

85 
‰ames
 = (
hi
 - 
lo
)/
PAGE_SIZE
;

86 
num_‰ames
 = 
‰ames
;

87 
∑ddr_t
 
cur
 = 
lo
;

89 
i
=0; i<
num_‰ames
; i++){

90 
c‹em≠s
[
i
].
addr
 = 
cur
;

91 
c‹em≠s
[
i
].
u£d
 = 
Ál£
;

92 
c‹em≠s
[
i
].
c⁄tiguous
 = 
Ál£
;

93 
cur
 = cu∏+ 
PAGE_SIZE
;

95 
öô
 = 
åue
;

101 
	}
}

104 
∑ddr_t


105 
	$gëµages
(
≈ages
)

108 
∑ddr_t
 
addr
;

110 
	`•ölock_acquúe
(&
°ólmem_lock
);

111 #i‡
OPT_A3


112 
cou¡
;

113 
°¨t
;

115 if(
öô
 =
åue
){

116 
∑ges
 = (Ë
≈ages
;

117 
boﬁ
 
found
 = 
Ál£
;

119 
i
=0; i<
num_‰ames
; i++){

120 if(
found
 =
åue
){

124 if(
c‹em≠s
[
i
].
u£d
 =
Ál£
){

125 
cou¡
 = 1;

126 if(
∑ges
>1){

127 
j
=
i
+1; j<i+
∑ges
; j++){

128 if(
c‹em≠s
[
j
].
u£d
 =
Ál£
){

129 
cou¡
++;

130 if(
cou¡
 =
∑ges
){

131 
found
 = 
åue
;

132 
°¨t
 = 
i
;

136 
i
 +=
cou¡
;

142 
°¨t
 = 
i
;

143 
found
 = 
åue
;

172 if(
found
 =
åue
){

173 
i
=0; i<
∑ges
; i++){

174 
c‹em≠s
[
°¨t
+
i
].
u£d
=
åue
;

175 if(
i
 =
∑ges
-1){

176 
c‹em≠s
[
°¨t
+
i
].
c⁄tiguous
 = 
Ál£
;

179 
c‹em≠s
[
°¨t
+
i
].
c⁄tiguous
 = 
åue
;

182 
addr
 = 
c‹em≠s
[
°¨t
].addr;

185 
	`•ölock_ªÀa£
(&
°ólmem_lock
);

186  
ENOMEM
;

190 
addr
 = 
	`øm_°ólmem
(
≈ages
);

194 
addr
 = 
	`øm_°ólmem
(
≈ages
);

197 
	`•ölock_ªÀa£
(&
°ólmem_lock
);

199  
addr
;

200 
	}
}

203 
vaddr_t


204 
	$Æloc_k∑ges
(
≈ages
)

206 
∑ddr_t
 
∑
;

207 
∑
 = 
	`gëµages
(
≈ages
);

208 i‡(
∑
==0) {

212 if(
∑
 =
ENOMEM
){

213  
ENOMEM
;

216  
	`PADDR_TO_KVADDR
(
∑
);

217 
	}
}

220 
	$‰ì_k∑ges
(
vaddr_t
 
addr
)

222 #i‡
OPT_A3


224 
	`•ölock_acquúe
(&
°ólmem_lock
);

225 if(
öô
 =
åue
){

227 
boﬁ
 
found
 = 
Ál£
;

228 
i
 =0; i<
num_‰ames
; i++){

229 if(
c‹em≠s
[
i
].
addr
 ==áddr){

230 
found
 = 
åue
;

232 if(
found
 =
åue
){

233 
c‹em≠s
[
i
].
u£d
 = 
Ál£
;

234 if(
c‹em≠s
[
i
].
c⁄tiguous
=
Ál£
){

262 
	`•ölock_ªÀa£
(&
°ólmem_lock
);

267 ()
addr
;

269 
	}
}

272 
	$vm_ébshoŸdown_Æl
()

274 
	`∑nic
("dumbvmÅriedÅo doÅlb shootdown?!\n");

275 
	}
}

278 
	$vm_ébshoŸdown
(c⁄° 
ébshoŸdown
 *
ts
)

280 ()
ts
;

281 
	`∑nic
("dumbvmÅriedÅo doÅlb shootdown?!\n");

282 
	}
}

285 
	$vm_Áu…
(
Áu…ty≥
, 
vaddr_t
 
Áu…addªss
)

288 
vaddr_t
 
vba£1
, 
vt›1
, 
vba£2
, 
vt›2
, 
°ackba£
, 
°ackt›
;

289 
∑ddr_t
 
∑ddr
;

290 
i
;

291 
uöt32_t
 
ehi
, 
ño
;

292 
addr•a˚
 *
as
;

293 
•l
;

294 #i‡
OPT_A3


295 
boﬁ
 
ãxt
 = 
Ál£
;

298 
Áu…addªss
 &
PAGE_FRAME
;

300 
	`DEBUG
(
DB_VM
, "dumbvm: fau…: 0x%x\n", 
Áu…addªss
);

302 
Áu…ty≥
) {

303 
VM_FAULT_READONLY
:

304 #i‡
OPT_A3


305  
EINVAL
;

308 
	`∑nic
("dumbvm: got VM_FAULT_READONLY\n");

310 
VM_FAULT_READ
:

311 
VM_FAULT_WRITE
:

314  
EINVAL
;

317 i‡(
cuΩroc
 =
NULL
) {

323  
EFAULT
;

326 
as
 = 
	`cuΩroc_gëas
();

327 i‡(
as
 =
NULL
) {

332  
EFAULT
;

336 
	`KASSERT
(
as
->
as_vba£1
 != 0);

337 
	`KASSERT
(
as
->
as_pba£1
 != 0);

338 
	`KASSERT
(
as
->
as_≈ages1
 != 0);

339 
	`KASSERT
(
as
->
as_vba£2
 != 0);

340 
	`KASSERT
(
as
->
as_pba£2
 != 0);

341 
	`KASSERT
(
as
->
as_≈ages2
 != 0);

342 
	`KASSERT
(
as
->
as_°ackpba£
 != 0);

343 
	`KASSERT
((
as
->
as_vba£1
 & 
PAGE_FRAME
) ==ás->as_vbase1);

344 
	`KASSERT
((
as
->
as_pba£1
 & 
PAGE_FRAME
) ==ás->as_pbase1);

345 
	`KASSERT
((
as
->
as_vba£2
 & 
PAGE_FRAME
) ==ás->as_vbase2);

346 
	`KASSERT
((
as
->
as_pba£2
 & 
PAGE_FRAME
) ==ás->as_pbase2);

347 
	`KASSERT
((
as
->
as_°ackpba£
 & 
PAGE_FRAME
) ==ás->as_stackpbase);

349 
vba£1
 = 
as
->
as_vba£1
;

350 
vt›1
 = 
vba£1
 + 
as
->
as_≈ages1
 * 
PAGE_SIZE
;

351 
vba£2
 = 
as
->
as_vba£2
;

352 
vt›2
 = 
vba£2
 + 
as
->
as_≈ages2
 * 
PAGE_SIZE
;

353 
°ackba£
 = 
USERSTACK
 - 
DUMBVM_STACKPAGES
 * 
PAGE_SIZE
;

354 
°ackt›
 = 
USERSTACK
;

356 i‡(
Áu…addªss
 >
vba£1
 && fau…addªs†< 
vt›1
) {

357 
∑ddr
 = (
Áu…addªss
 - 
vba£1
Ë+ 
as
->
as_pba£1
;

358 #i‡
OPT_A3


359 
ãxt
 = 
åue
;

362 i‡(
Áu…addªss
 >
vba£2
 && fau…addªs†< 
vt›2
) {

363 
∑ddr
 = (
Áu…addªss
 - 
vba£2
Ë+ 
as
->
as_pba£2
;

365 i‡(
Áu…addªss
 >
°ackba£
 && fau…addªs†< 
°ackt›
) {

366 
∑ddr
 = (
Áu…addªss
 - 
°ackba£
Ë+ 
as
->
as_°ackpba£
;

369  
EFAULT
;

373 
	`KASSERT
((
∑ddr
 & 
PAGE_FRAME
) ==Öaddr);

376 
•l
 = 
	`•lhigh
();

378 
i
=0; i<
NUM_TLB
; i++) {

379 
	`éb_ªad
(&
ehi
, &
ño
, 
i
);

380 i‡(
ño
 & 
TLBLO_VALID
) {

383 
ehi
 = 
Áu…addªss
;

384 
ño
 = 
∑ddr
 | 
TLBLO_DIRTY
 | 
TLBLO_VALID
;

385 
	`DEBUG
(
DB_VM
, "dumbvm: 0x%x -> 0x%x\n", 
Áu…addªss
, 
∑ddr
);

386 #i‡
OPT_A3


387 if(
ãxt
 =
åue
 && 
as
->
as_lﬂd
 ==Årue){

388 
ño
 &~
TLBLO_DIRTY
;

391 
	`éb_wrôe
(
ehi
, 
ño
, 
i
);

392 
	`•lx
(
•l
);

397 #i‡
OPT_A3


398 
ehi
 = 
Áu…addªss
;

399 
ño
 = 
∑ddr
 | 
TLBLO_DIRTY
 | 
TLBLO_VALID
;

401 if(
ãxt
 =
åue
 && 
as
->
as_lﬂd
 ==Årue){

402 
ño
 &~
TLBLO_DIRTY
;

405 
	`éb_øndom
(
ehi
, 
ño
);

406 
	`•lx
(
•l
);

411 
	`k¥ötf
("dumbvm: Ran out of TLBÉntries - cannot handleÖage fault\n");

412 
	`•lx
(
•l
);

413  
EFAULT
;

415 
	}
}

417 
addr•a˚
 *

418 
	$as_¸óã
()

420 
addr•a˚
 *
as
 = 
	`kmÆloc
((addrspace));

421 i‡(
as
==
NULL
) {

422  
NULL
;

425 
as
->
as_vba£1
 = 0;

426 
as
->
as_pba£1
 = 0;

427 
as
->
as_≈ages1
 = 0;

428 
as
->
as_vba£2
 = 0;

429 
as
->
as_pba£2
 = 0;

430 
as
->
as_≈ages2
 = 0;

431 
as
->
as_°ackpba£
 = 0;

432 #i‡
OPT_A3


433 
as
->
as_lﬂd
 = 
Ál£
;

436  
as
;

437 
	}
}

440 
	$as_de°roy
(
addr•a˚
 *
as
)

442 #i‡
OPT_A3


443 
	`‰ì_k∑ges
(
as
->
as_pba£1
);

444 
	`‰ì_k∑ges
(
as
->
as_pba£2
);

445 
	`‰ì_k∑ges
(
as
->
as_°ackpba£
);

447 
	`k‰ì
(
as
);

448 
	}
}

451 
	$as_a˘iv©e
()

453 
i
, 
•l
;

454 
addr•a˚
 *
as
;

456 
as
 = 
	`cuΩroc_gëas
();

457 #ifde‡
UW


460 i‡(
as
 =
NULL
) {

465 
•l
 = 
	`•lhigh
();

467 
i
=0; i<
NUM_TLB
; i++) {

468 
	`éb_wrôe
(
	`TLBHI_INVALID
(
i
), 
	`TLBLO_INVALID
(), i);

471 
	`•lx
(
•l
);

472 
	}
}

475 
	$as_dó˘iv©e
()

478 
	}
}

481 
	$as_deföe_ªgi⁄
(
addr•a˚
 *
as
, 
vaddr_t
 
vaddr
, 
size_t
 
sz
,

482 
ªadabÀ
, 
wrôóbÀ
, 
execuèbÀ
)

484 
size_t
 
≈ages
;

487 
sz
 +
vaddr
 & ~(
vaddr_t
)
PAGE_FRAME
;

488 
vaddr
 &
PAGE_FRAME
;

491 
sz
 = (sz + 
PAGE_SIZE
 - 1Ë& 
PAGE_FRAME
;

493 
≈ages
 = 
sz
 / 
PAGE_SIZE
;

495 #i‡
OPT_A3


496 if(
ªadabÀ
){

497 
as
->
as_ªad
 = 
åue
;

500 
as
->
as_ªad
 = 
Ál£
;

503 if(
wrôóbÀ
){

504 
as
->
as_wrôe
 = 
åue
;

507 
as
->
as_wrôe
 = 
Ál£
;

510 if(
execuèbÀ
){

511 
as
->
as_execuã
 = 
åue
;

514 
as
->
as_execuã
 = 
Ál£
;

518 ()
ªadabÀ
;

519 ()
wrôóbÀ
;

520 ()
execuèbÀ
;

523 i‡(
as
->
as_vba£1
 == 0) {

524 
as
->
as_vba£1
 = 
vaddr
;

525 
as
->
as_≈ages1
 = 
≈ages
;

529 i‡(
as
->
as_vba£2
 == 0) {

530 
as
->
as_vba£2
 = 
vaddr
;

531 
as
->
as_≈ages2
 = 
≈ages
;

538 
	`k¥ötf
("dumbvm: Warning:Åoo manyÑegions\n");

539  
EUNIMP
;

540 
	}
}

544 
	$as_zîo_ªgi⁄
(
∑ddr_t
 
∑ddr
, 
≈ages
)

546 
	`bzîo
((*)
	`PADDR_TO_KVADDR
(
∑ddr
), 
≈ages
 * 
PAGE_SIZE
);

547 
	}
}

550 
	$as_¥ï¨e_lﬂd
(
addr•a˚
 *
as
)

552 
	`KASSERT
(
as
->
as_pba£1
 == 0);

553 
	`KASSERT
(
as
->
as_pba£2
 == 0);

554 
	`KASSERT
(
as
->
as_°ackpba£
 == 0);

556 
as
->
as_pba£1
 = 
	`gëµages
◊s->
as_≈ages1
);

557 i‡(
as
->
as_pba£1
 == 0) {

558  
ENOMEM
;

561 
as
->
as_pba£2
 = 
	`gëµages
◊s->
as_≈ages2
);

562 i‡(
as
->
as_pba£2
 == 0) {

563  
ENOMEM
;

566 
as
->
as_°ackpba£
 = 
	`gëµages
(
DUMBVM_STACKPAGES
);

567 i‡(
as
->
as_°ackpba£
 == 0) {

568  
ENOMEM
;

571 
	`as_zîo_ªgi⁄
(
as
->
as_pba£1
,ás->
as_≈ages1
);

572 
	`as_zîo_ªgi⁄
(
as
->
as_pba£2
,ás->
as_≈ages2
);

573 
	`as_zîo_ªgi⁄
(
as
->
as_°ackpba£
, 
DUMBVM_STACKPAGES
);

576 
	}
}

579 
	$as_com∂ëe_lﬂd
(
addr•a˚
 *
as
)

581 #i‡
OPT_A3


582 
as
->
as_lﬂd
 = 
åue
;

584 ()
as
;

587 
	}
}

590 
	$as_deföe_°ack
(
addr•a˚
 *
as
, 
vaddr_t
 *
°ack±r
)

592 
	`KASSERT
(
as
->
as_°ackpba£
 != 0);

594 *
°ack±r
 = 
USERSTACK
;

596 
	}
}

599 
	$as_c›y
(
addr•a˚
 *
ﬁd
, addr•a˚ **
ªt
)

601 
addr•a˚
 *
√w
;

603 
√w
 = 
	`as_¸óã
();

604 i‡(
√w
==
NULL
) {

605  
ENOMEM
;

608 
√w
->
as_vba£1
 = 
ﬁd
->as_vbase1;

609 
√w
->
as_≈ages1
 = 
ﬁd
->as_npages1;

610 
√w
->
as_vba£2
 = 
ﬁd
->as_vbase2;

611 
√w
->
as_≈ages2
 = 
ﬁd
->as_npages2;

614 i‡(
	`as_¥ï¨e_lﬂd
(
√w
)) {

615 
	`as_de°roy
(
√w
);

616  
ENOMEM
;

619 
	`KASSERT
(
√w
->
as_pba£1
 != 0);

620 
	`KASSERT
(
√w
->
as_pba£2
 != 0);

621 
	`KASSERT
(
√w
->
as_°ackpba£
 != 0);

623 
	`memmove
((*)
	`PADDR_TO_KVADDR
(
√w
->
as_pba£1
),

624 (c⁄° *)
	`PADDR_TO_KVADDR
(
ﬁd
->
as_pba£1
),

625 
ﬁd
->
as_≈ages1
*
PAGE_SIZE
);

627 
	`memmove
((*)
	`PADDR_TO_KVADDR
(
√w
->
as_pba£2
),

628 (c⁄° *)
	`PADDR_TO_KVADDR
(
ﬁd
->
as_pba£2
),

629 
ﬁd
->
as_≈ages2
*
PAGE_SIZE
);

631 
	`memmove
((*)
	`PADDR_TO_KVADDR
(
√w
->
as_°ackpba£
),

632 (c⁄° *)
	`PADDR_TO_KVADDR
(
ﬁd
->
as_°ackpba£
),

633 
DUMBVM_STACKPAGES
*
PAGE_SIZE
);

635 *
ªt
 = 
√w
;

637 
	}
}

	@arch/mips/vm/ram.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<vm.h
>

33 
	~<maöbus.h
>

36 
vaddr_t
 
	gfú°‰ì
;

38 
∑ddr_t
 
	gfú°∑ddr
;

39 
∑ddr_t
 
	gœ°∑ddr
;

46 
	$øm_boŸ°øp
()

48 
size_t
 
ømsize
;

51 
ømsize
 = 
	`maöbus_ømsize
();

60 i‡(
ømsize
 > 508*1024*1024) {

61 
ømsize
 = 508*1024*1024;

64 
œ°∑ddr
 = 
ømsize
;

70 
fú°∑ddr
 = 
fú°‰ì
 - 
MIPS_KSEG0
;

72 
	`k¥ötf
("%ukÖhysical memoryávailable\n",

73 (
œ°∑ddr
-
fú°∑ddr
)/1024);

74 
	}
}

94 
∑ddr_t


95 
	$øm_°ólmem
(
≈ages
)

97 
size_t
 
size
;

98 
∑ddr_t
 
∑ddr
;

100 
size
 = 
≈ages
 * 
PAGE_SIZE
;

102 i‡(
fú°∑ddr
 + 
size
 > 
œ°∑ddr
) {

106 
∑ddr
 = 
fú°∑ddr
;

107 
fú°∑ddr
 +
size
;

109  
∑ddr
;

110 
	}
}

121 
	$øm_gësize
(
∑ddr_t
 *
lo
,Öaddr_à*
hi
)

123 *
lo
 = 
fú°∑ddr
;

124 *
hi
 = 
œ°∑ddr
;

125 
fú°∑ddr
 = 
œ°∑ddr
 = 0;

126 
	}
}

	@arch/sys161/dev/lamebus_machdep.c

30 
	~<ty≥s.h
>

31 
	~<kîn/uni°d.h
>

32 
	~<lib.h
>

33 
	~<mùs/å≠‰ame.h
>

34 
	~<˝u.h
>

35 
	~<•l.h
>

36 
	~<˛ock.h
>

37 
	~<thªad.h
>

38 
	~<cuºít.h
>

39 
	~<synch.h
>

40 
	~<maöbus.h
>

41 
	~<sys161/bus.h
>

42 
	~<œmebus/œmebus.h
>

43 
	~"autoc⁄f.h
"

51 
	#CPU_FREQUENCY
 25000000

	)

62 
	$mùs_timî_£t
(
uöt32_t
 
cou¡
)

68 
__asm
 volatile(

73 :: "r" (
cou¡
));

74 
	}
}

81 
œmebus_so·c
 *
	gœmebus
;

84 
	$maöbus_boŸ°øp
()

87 
	`KASSERT
(
cuπhªad
->
t_cur•l
 > 0);

90 
œmebus
 = 
	`œmebus_öô
();

93 
	`œmebus_föd_˝us
(
œmebus
);

98 
	`k¥ötf
("lamebus0 (system main bus)\n");

105 
	`•l0
();

111 
	`autoc⁄f_œmebus
(
œmebus
, 0);

116 
	`mùs_timî_£t
(
CPU_FREQUENCY
 / 
HZ
);

117 
	}
}

123 
	$maöbus_°¨t_˝us
()

125 
	`œmebus_°¨t_˝us
(
œmebus
);

126 
	}
}

134 
	$œmebus_m≠_¨ó
(
œmebus_so·c
 *
bus
, 
¶Ÿ
, 
uöt32_t
 
off£t
)

136 
uöt32_t
 
addªss
;

138 ()
bus
;

140 
	`KASSERT
(
¶Ÿ
 >0 && slŸ < 
LB_NSLOTS
);

142 
addªss
 = 
LB_BASEADDR
 + 
¶Ÿ
*
LB_SLOT_SIZE
 + 
off£t
;

143  (*)
addªss
;

144 
	}
}

149 
uöt32_t


150 
	$œmebus_ªad_ªgi°î
(
œmebus_so·c
 *
bus
, 
¶Ÿ
, 
uöt32_t
 
off£t
)

152 
uöt32_t
 *
±r
 = 
	`œmebus_m≠_¨ó
(
bus
, 
¶Ÿ
, 
off£t
);

154  *
±r
;

155 
	}
}

161 
	$œmebus_wrôe_ªgi°î
(
œmebus_so·c
 *
bus
, 
¶Ÿ
,

162 
uöt32_t
 
off£t
, uöt32_à
vÆ
)

164 
uöt32_t
 *
±r
 = 
	`œmebus_m≠_¨ó
(
bus
, 
¶Ÿ
, 
off£t
);

166 *
±r
 = 
vÆ
;

167 
	}
}

174 
	$maöbus_powîoff
()

182 
	`œmebus_powîoff
(
œmebus
);

183 
	}
}

189 
	$maöbus_ªboŸ
()

198 
	`k¥ötf
("CannotÑeboot -Öowering off instead, sorry.\n");

199 
	`maöbus_powîoff
();

200 
	}
}

208 
	$maöbus_hÆt
()

210 
	`˝u_hÆt
();

211 
	}
}

221 
	$maöbus_∑nic
()

223 
	`maöbus_powîoff
();

224 
	}
}

230 
uöt32_t


231 
	$maöbus_ømsize
()

233  
	`œmebus_ømsize
();

234 
	}
}

240 
	$maöbus_£nd_ùi
(
˝u
 *
èrgë
)

242 
	`œmebus_as£π_ùi
(
œmebus
, 
èrgë
);

243 
	}
}

250 
	#LAMEBUS_IRQ_BIT
 0x00000400

	)

251 
	#LAMEBUS_IPI_BIT
 0x00000800

	)

252 
	#MIPS_TIMER_BIT
 0x00008000

	)

255 
	$maöbus_öãºu±
(
å≠‰ame
 *
tf
)

257 
uöt32_t
 
ˇu£
;

260 
	`KASSERT
(
cuπhªad
->
t_cur•l
 > 0);

262 
ˇu£
 = 
tf
->
tf_ˇu£
;

263 i‡(
ˇu£
 & 
LAMEBUS_IRQ_BIT
) {

264 
	`œmebus_öãºu±
(
œmebus
);

266 i‡(
ˇu£
 & 
LAMEBUS_IPI_BIT
) {

267 
	`öãΩro˚ss‹_öãºu±
();

268 
	`œmebus_˛ór_ùi
(
œmebus
, 
cur˝u
);

270 i‡(
ˇu£
 & 
MIPS_TIMER_BIT
) {

272 
	`mùs_timî_£t
(
CPU_FREQUENCY
 / 
HZ
);

274 
	`h¨d˛ock
();

277 
	`∑nic
("Unknow¿öãºu±; cau£Ñegi°î i†%08x\n", 
ˇu£
);

279 
	}
}

	@arch/sys161/include/bus.h

30 #i‚de‡
_SYS161_BUS_H_


31 
	#_SYS161_BUS_H_


	)

40 
	~<machöe/vm.h
>

41 
	~<œmebus/œmebus.h
>

43 
	#bus_wrôe_ªgi°î
(
bus
, 
¶Ÿ
, 
off£t
, 
vÆ
) \

44 
	`œmebus_wrôe_ªgi°î
(
bus
, 
¶Ÿ
, 
off£t
, 
vÆ
)

	)

46 
	#bus_ªad_ªgi°î
(
bus
, 
¶Ÿ
, 
off£t
) \

47 
	`œmebus_ªad_ªgi°î
(
bus
, 
¶Ÿ
, 
off£t
)

	)

49 
	#bus_m≠_¨ó
(
bus
, 
¶Ÿ
, 
off£t
) \

50 
	`œmebus_m≠_¨ó
(
bus
, 
¶Ÿ
, 
off£t
)

	)

57 
	#LB_BASEADDR
 (
MIPS_KSEG1
 + 0x1„00000)

	)

	@arch/sys161/include/maxcpus.h

30 #i‚de‡
_SYS161_MAXCPUS_H_


31 
	#_SYS161_MAXCPUS_H_


	)

42 
	#MAXCPUS
 32

	)

	@compile/ASST0/autoconf.c

2 
	~<ty≥s.h
>

3 
	~<lib.h
>

4 
	~"autoc⁄f.h
"

6 
autoc⁄f_bìp
(
bìp_so·c
 *, );

7 
autoc⁄f_c⁄
(
c⁄_so·c
 *, );

8 
autoc⁄f_emu
(
emu_so·c
 *, );

9 
autoc⁄f_lhd
(
lhd_so·c
 *, );

10 
autoc⁄f_Ã™dom
(
Ã™dom_so·c
 *, );

11 
autoc⁄f_l£r
(
l£r_so·c
 *, );

12 
autoc⁄f_…imî
(
…imî_so·c
 *, );

13 
autoc⁄f_…ø˚
(
…ø˚_so·c
 *, );

14 
autoc⁄f_øndom
(
øndom_so·c
 *, );

15 
autoc⁄f_π˛ock
(
π˛ock_so·c
 *, );

16 
	g√xtunô_bìp
;

17 
	g√xtunô_c⁄
;

18 
	g√xtunô_emu
;

19 
	g√xtunô_lhd
;

20 
	g√xtunô_Ã™dom
;

21 
	g√xtunô_l£r
;

22 
	g√xtunô_…imî
;

23 
	g√xtunô_…ø˚
;

24 
	g√xtunô_øndom
;

25 
	g√xtunô_π˛ock
;

29 
	$åy©èch_emu_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

31 
emu_so·c
 *
dev
;

32 
ªsu…
;

34 
dev
 = 
	`©èch_emu_to_œmebus
(
devunô
, 
bus
);

35 i‡(
dev
==
NULL
) {

38 
	`k¥ötf
("emu%dáàœmebus%d", 
devunô
, 
busunô
);

39 
ªsu…
 = 
	`c⁄fig_emu
(
dev
, 
devunô
);

40 i‡(
ªsu…
 != 0) {

41 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

43  
ªsu…
;

45 
	`k¥ötf
("\n");

46 
√xtunô_emu
 = 
devunô
+1;

47 
	`autoc⁄f_emu
(
dev
, 
devunô
);

49 
	}
}

53 
	$åy©èch_…ø˚_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

55 
…ø˚_so·c
 *
dev
;

56 
ªsu…
;

58 
dev
 = 
	`©èch_…ø˚_to_œmebus
(
devunô
, 
bus
);

59 i‡(
dev
==
NULL
) {

62 
	`k¥ötf
("…ø˚%dáàœmebus%d", 
devunô
, 
busunô
);

63 
ªsu…
 = 
	`c⁄fig_…ø˚
(
dev
, 
devunô
);

64 i‡(
ªsu…
 != 0) {

65 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

67  
ªsu…
;

69 
	`k¥ötf
("\n");

70 
√xtunô_…ø˚
 = 
devunô
+1;

71 
	`autoc⁄f_…ø˚
(
dev
, 
devunô
);

73 
	}
}

77 
	$åy©èch_…imî_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

79 
…imî_so·c
 *
dev
;

80 
ªsu…
;

82 
dev
 = 
	`©èch_…imî_to_œmebus
(
devunô
, 
bus
);

83 i‡(
dev
==
NULL
) {

86 
	`k¥ötf
("…imî%dáàœmebus%d", 
devunô
, 
busunô
);

87 
ªsu…
 = 
	`c⁄fig_…imî
(
dev
, 
devunô
);

88 i‡(
ªsu…
 != 0) {

89 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

91  
ªsu…
;

93 
	`k¥ötf
("\n");

94 
√xtunô_…imî
 = 
devunô
+1;

95 
	`autoc⁄f_…imî
(
dev
, 
devunô
);

97 
	}
}

101 
	$åy©èch_Ã™dom_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

103 
Ã™dom_so·c
 *
dev
;

104 
ªsu…
;

106 
dev
 = 
	`©èch_Ã™dom_to_œmebus
(
devunô
, 
bus
);

107 i‡(
dev
==
NULL
) {

110 
	`k¥ötf
("Ã™dom%dáàœmebus%d", 
devunô
, 
busunô
);

111 
ªsu…
 = 
	`c⁄fig_Ã™dom
(
dev
, 
devunô
);

112 i‡(
ªsu…
 != 0) {

113 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

115  
ªsu…
;

117 
	`k¥ötf
("\n");

118 
√xtunô_Ã™dom
 = 
devunô
+1;

119 
	`autoc⁄f_Ã™dom
(
dev
, 
devunô
);

121 
	}
}

125 
	$åy©èch_lhd_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

127 
lhd_so·c
 *
dev
;

128 
ªsu…
;

130 
dev
 = 
	`©èch_lhd_to_œmebus
(
devunô
, 
bus
);

131 i‡(
dev
==
NULL
) {

134 
	`k¥ötf
("lhd%dáàœmebus%d", 
devunô
, 
busunô
);

135 
ªsu…
 = 
	`c⁄fig_lhd
(
dev
, 
devunô
);

136 i‡(
ªsu…
 != 0) {

137 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

139  
ªsu…
;

141 
	`k¥ötf
("\n");

142 
√xtunô_lhd
 = 
devunô
+1;

143 
	`autoc⁄f_lhd
(
dev
, 
devunô
);

145 
	}
}

149 
	$åy©èch_l£r_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

151 
l£r_so·c
 *
dev
;

152 
ªsu…
;

154 
dev
 = 
	`©èch_l£r_to_œmebus
(
devunô
, 
bus
);

155 i‡(
dev
==
NULL
) {

158 
	`k¥ötf
("l£r%dáàœmebus%d", 
devunô
, 
busunô
);

159 
ªsu…
 = 
	`c⁄fig_l£r
(
dev
, 
devunô
);

160 i‡(
ªsu…
 != 0) {

161 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

163  
ªsu…
;

165 
	`k¥ötf
("\n");

166 
√xtunô_l£r
 = 
devunô
+1;

167 
	`autoc⁄f_l£r
(
dev
, 
devunô
);

169 
	}
}

173 
	$åy©èch_bìp_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
, 
busunô
)

175 
bìp_so·c
 *
dev
;

176 
ªsu…
;

178 
dev
 = 
	`©èch_bìp_to_…imî
(
devunô
, 
bus
);

179 i‡(
dev
==
NULL
) {

182 
	`k¥ötf
("bìp%dáà…imî%d", 
devunô
, 
busunô
);

183 
ªsu…
 = 
	`c⁄fig_bìp
(
dev
, 
devunô
);

184 i‡(
ªsu…
 != 0) {

185 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

187  
ªsu…
;

189 
	`k¥ötf
("\n");

190 
√xtunô_bìp
 = 
devunô
+1;

191 
	`autoc⁄f_bìp
(
dev
, 
devunô
);

193 
	}
}

197 
	$åy©èch_c⁄_to_l£r
(
devunô
, 
l£r_so·c
 *
bus
, 
busunô
)

199 
c⁄_so·c
 *
dev
;

200 
ªsu…
;

202 
dev
 = 
	`©èch_c⁄_to_l£r
(
devunô
, 
bus
);

203 i‡(
dev
==
NULL
) {

206 
	`k¥ötf
("c⁄%dáàl£r%d", 
devunô
, 
busunô
);

207 
ªsu…
 = 
	`c⁄fig_c⁄
(
dev
, 
devunô
);

208 i‡(
ªsu…
 != 0) {

209 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

211  
ªsu…
;

213 
	`k¥ötf
("\n");

214 
√xtunô_c⁄
 = 
devunô
+1;

215 
	`autoc⁄f_c⁄
(
dev
, 
devunô
);

217 
	}
}

221 
	$åy©èch_π˛ock_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
, 
busunô
)

223 
π˛ock_so·c
 *
dev
;

224 
ªsu…
;

226 
dev
 = 
	`©èch_π˛ock_to_…imî
(
devunô
, 
bus
);

227 i‡(
dev
==
NULL
) {

230 
	`k¥ötf
("π˛ock%dáà…imî%d", 
devunô
, 
busunô
);

231 
ªsu…
 = 
	`c⁄fig_π˛ock
(
dev
, 
devunô
);

232 i‡(
ªsu…
 != 0) {

233 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

235  
ªsu…
;

237 
	`k¥ötf
("\n");

238 
√xtunô_π˛ock
 = 
devunô
+1;

239 
	`autoc⁄f_π˛ock
(
dev
, 
devunô
);

241 
	}
}

245 
	$åy©èch_øndom_to_Ã™dom
(
devunô
, 
Ã™dom_so·c
 *
bus
, 
busunô
)

247 
øndom_so·c
 *
dev
;

248 
ªsu…
;

250 
dev
 = 
	`©èch_øndom_to_Ã™dom
(
devunô
, 
bus
);

251 i‡(
dev
==
NULL
) {

254 
	`k¥ötf
("øndom%dáàÃ™dom%d", 
devunô
, 
busunô
);

255 
ªsu…
 = 
	`c⁄fig_øndom
(
dev
, 
devunô
);

256 i‡(
ªsu…
 != 0) {

257 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

259  
ªsu…
;

261 
	`k¥ötf
("\n");

262 
√xtunô_øndom
 = 
devunô
+1;

263 
	`autoc⁄f_øndom
(
dev
, 
devunô
);

265 
	}
}

270 
	$autoc⁄f_lhd
(
lhd_so·c
 *
bus
, 
busunô
)

272 ()
bus
; ()
busunô
;

273 
	}
}

277 
	$autoc⁄f_øndom
(
øndom_so·c
 *
bus
, 
busunô
)

279 ()
bus
; ()
busunô
;

280 
	}
}

284 
	$autoc⁄f_π˛ock
(
π˛ock_so·c
 *
bus
, 
busunô
)

286 ()
bus
; ()
busunô
;

287 
	}
}

291 
	$autoc⁄f_emu
(
emu_so·c
 *
bus
, 
busunô
)

293 ()
bus
; ()
busunô
;

294 
	}
}

298 
	$autoc⁄f_…ø˚
(
…ø˚_so·c
 *
bus
, 
busunô
)

300 ()
bus
; ()
busunô
;

301 
	}
}

305 
	$autoc⁄f_c⁄
(
c⁄_so·c
 *
bus
, 
busunô
)

307 ()
bus
; ()
busunô
;

308 
	}
}

311 
	$autoc⁄f_œmebus
(
œmebus_so·c
 *
bus
, 
busunô
)

313 ()
bus
; ()
busunô
;

315 
ªsu…
, 
devunô
=
√xtunô_emu
;

317 
ªsu…
 = 
	`åy©èch_emu_to_œmebus
(
devunô
, 
bus
, 
busunô
);

318 
devunô
++;

319 } 
ªsu…
==0);

322 
ªsu…
, 
devunô
=
√xtunô_…ø˚
;

324 
ªsu…
 = 
	`åy©èch_…ø˚_to_œmebus
(
devunô
, 
bus
, 
busunô
);

325 
devunô
++;

326 } 
ªsu…
==0);

329 
ªsu…
, 
devunô
=
√xtunô_…imî
;

331 
ªsu…
 = 
	`åy©èch_…imî_to_œmebus
(
devunô
, 
bus
, 
busunô
);

332 
devunô
++;

333 } 
ªsu…
==0);

336 
ªsu…
, 
devunô
=
√xtunô_Ã™dom
;

338 
ªsu…
 = 
	`åy©èch_Ã™dom_to_œmebus
(
devunô
, 
bus
, 
busunô
);

339 
devunô
++;

340 } 
ªsu…
==0);

343 
ªsu…
, 
devunô
=
√xtunô_lhd
;

345 
ªsu…
 = 
	`åy©èch_lhd_to_œmebus
(
devunô
, 
bus
, 
busunô
);

346 
devunô
++;

347 } 
ªsu…
==0);

350 
ªsu…
, 
devunô
=
√xtunô_l£r
;

352 
ªsu…
 = 
	`åy©èch_l£r_to_œmebus
(
devunô
, 
bus
, 
busunô
);

353 
devunô
++;

354 } 
ªsu…
==0);

356 
	}
}

360 
	$autoc⁄f_bìp
(
bìp_so·c
 *
bus
, 
busunô
)

362 ()
bus
; ()
busunô
;

363 
	}
}

367 
	$autoc⁄f_l£r
(
l£r_so·c
 *
bus
, 
busunô
)

369 ()
bus
; ()
busunô
;

371 i‡(
√xtunô_c⁄
 <= 0) {

372 
	`åy©èch_c⁄_to_l£r
(0, 
bus
, 
busunô
);

375 
	}
}

379 
	$autoc⁄f_Ã™dom
(
Ã™dom_so·c
 *
bus
, 
busunô
)

381 ()
bus
; ()
busunô
;

383 i‡(
√xtunô_øndom
 <= 0) {

384 
	`åy©èch_øndom_to_Ã™dom
(0, 
bus
, 
busunô
);

387 
	}
}

391 
	$autoc⁄f_…imî
(
…imî_so·c
 *
bus
, 
busunô
)

393 ()
bus
; ()
busunô
;

395 i‡(
√xtunô_bìp
 <= 0) {

396 
	`åy©èch_bìp_to_…imî
(0, 
bus
, 
busunô
);

400 i‡(
√xtunô_π˛ock
 <= 0) {

401 
	`åy©èch_π˛ock_to_…imî
(0, 
bus
, 
busunô
);

404 
	}
}

407 
	$p£udoc⁄fig
()

409 
	}
}

	@compile/ASST0/autoconf.h

2 #i‚de‡
_AUTOCONF_H_


3 
	#_AUTOCONF_H_


	)

5 
	gœmebus_so·c
;

6 
	gemu_so·c
;

7 
	g…ø˚_so·c
;

8 
	g…imî_so·c
;

9 
	gÃ™dom_so·c
;

10 
	glhd_so·c
;

11 
	gl£r_so·c
;

12 
	gbìp_so·c
;

13 
	gc⁄_so·c
;

14 
	gπ˛ock_so·c
;

15 
	gøndom_so·c
;

17 
autoc⁄f_œmebus
(
œmebus_so·c
 *
dev
, 
unô
);

19 
emu_so·c
 *
©èch_emu_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

20 
…ø˚_so·c
 *
©èch_…ø˚_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

21 
…imî_so·c
 *
©èch_…imî_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

22 
Ã™dom_so·c
 *
©èch_Ã™dom_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

23 
lhd_so·c
 *
©èch_lhd_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

24 
l£r_so·c
 *
©èch_l£r_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

25 
bìp_so·c
 *
©èch_bìp_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
);

26 
c⁄_so·c
 *
©èch_c⁄_to_l£r
(
devunô
, 
l£r_so·c
 *
bus
);

27 
π˛ock_so·c
 *
©èch_π˛ock_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
);

28 
øndom_so·c
 *
©èch_øndom_to_Ã™dom
(
devunô
, 
Ã™dom_so·c
 *
bus
);

30 
c⁄fig_emu
(
emu_so·c
 *
dev
, 
unô
);

31 
c⁄fig_…ø˚
(
…ø˚_so·c
 *
dev
, 
unô
);

32 
c⁄fig_…imî
(
…imî_so·c
 *
dev
, 
unô
);

33 
c⁄fig_Ã™dom
(
Ã™dom_so·c
 *
dev
, 
unô
);

34 
c⁄fig_lhd
(
lhd_so·c
 *
dev
, 
unô
);

35 
c⁄fig_l£r
(
l£r_so·c
 *
dev
, 
unô
);

36 
c⁄fig_bìp
(
bìp_so·c
 *
dev
, 
unô
);

37 
c⁄fig_c⁄
(
c⁄_so·c
 *
dev
, 
unô
);

38 
c⁄fig_π˛ock
(
π˛ock_so·c
 *
dev
, 
unô
);

39 
c⁄fig_øndom
(
øndom_so·c
 *
dev
, 
unô
);

41 
p£udoc⁄fig
();

	@compile/ASST0/opt-A0.h

2 #i‚de‡
_OPT_A0_H_


3 
	#_OPT_A0_H_


	)

4 
	#OPT_A0
 1

	)

	@compile/ASST0/opt-A1.h

2 #i‚de‡
_OPT_A1_H_


3 
	#_OPT_A1_H_


	)

4 
	#OPT_A1
 0

	)

	@compile/ASST0/opt-A2.h

2 #i‚de‡
_OPT_A2_H_


3 
	#_OPT_A2_H_


	)

4 
	#OPT_A2
 0

	)

	@compile/ASST0/opt-A3.h

2 #i‚de‡
_OPT_A3_H_


3 
	#_OPT_A3_H_


	)

4 
	#OPT_A3
 0

	)

	@compile/ASST0/opt-A4.h

2 #i‚de‡
_OPT_A4_H_


3 
	#_OPT_A4_H_


	)

4 
	#OPT_A4
 0

	)

	@compile/ASST0/opt-A5.h

2 #i‚de‡
_OPT_A5_H_


3 
	#_OPT_A5_H_


	)

4 
	#OPT_A5
 0

	)

	@compile/ASST0/opt-dumbvm.h

2 #i‚de‡
_OPT_DUMBVM_H_


3 
	#_OPT_DUMBVM_H_


	)

4 
	#OPT_DUMBVM
 1

	)

	@compile/ASST0/opt-net.h

2 #i‚de‡
_OPT_NET_H_


3 
	#_OPT_NET_H_


	)

4 
	#OPT_NET
 0

	)

	@compile/ASST0/opt-netfs.h

2 #i‚de‡
_OPT_NETFS_H_


3 
	#_OPT_NETFS_H_


	)

4 
	#OPT_NETFS
 0

	)

	@compile/ASST0/opt-noasserts.h

2 #i‚de‡
_OPT_NOASSERTS_H_


3 
	#_OPT_NOASSERTS_H_


	)

4 
	#OPT_NOASSERTS
 0

	)

	@compile/ASST0/opt-sfs.h

2 #i‚de‡
_OPT_SFS_H_


3 
	#_OPT_SFS_H_


	)

4 
	#OPT_SFS
 1

	)

	@compile/ASST0/opt-synchprobs.h

2 #i‚de‡
_OPT_SYNCHPROBS_H_


3 
	#_OPT_SYNCHPROBS_H_


	)

4 
	#OPT_SYNCHPROBS
 0

	)

	@compile/ASST0/vers.c

2 c⁄° 
	gbuûdvîsi⁄
 = 4;

3 c⁄° 
	gbuûdc⁄fig
[] = "ASST0";

	@compile/ASST1/autoconf.c

2 
	~<ty≥s.h
>

3 
	~<lib.h
>

4 
	~"autoc⁄f.h
"

6 
autoc⁄f_bìp
(
bìp_so·c
 *, );

7 
autoc⁄f_c⁄
(
c⁄_so·c
 *, );

8 
autoc⁄f_emu
(
emu_so·c
 *, );

9 
autoc⁄f_lhd
(
lhd_so·c
 *, );

10 
autoc⁄f_Ã™dom
(
Ã™dom_so·c
 *, );

11 
autoc⁄f_l£r
(
l£r_so·c
 *, );

12 
autoc⁄f_…imî
(
…imî_so·c
 *, );

13 
autoc⁄f_…ø˚
(
…ø˚_so·c
 *, );

14 
autoc⁄f_øndom
(
øndom_so·c
 *, );

15 
autoc⁄f_π˛ock
(
π˛ock_so·c
 *, );

16 
	g√xtunô_bìp
;

17 
	g√xtunô_c⁄
;

18 
	g√xtunô_emu
;

19 
	g√xtunô_lhd
;

20 
	g√xtunô_Ã™dom
;

21 
	g√xtunô_l£r
;

22 
	g√xtunô_…imî
;

23 
	g√xtunô_…ø˚
;

24 
	g√xtunô_øndom
;

25 
	g√xtunô_π˛ock
;

29 
	$åy©èch_emu_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

31 
emu_so·c
 *
dev
;

32 
ªsu…
;

34 
dev
 = 
	`©èch_emu_to_œmebus
(
devunô
, 
bus
);

35 i‡(
dev
==
NULL
) {

38 
	`k¥ötf
("emu%dáàœmebus%d", 
devunô
, 
busunô
);

39 
ªsu…
 = 
	`c⁄fig_emu
(
dev
, 
devunô
);

40 i‡(
ªsu…
 != 0) {

41 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

43  
ªsu…
;

45 
	`k¥ötf
("\n");

46 
√xtunô_emu
 = 
devunô
+1;

47 
	`autoc⁄f_emu
(
dev
, 
devunô
);

49 
	}
}

53 
	$åy©èch_…ø˚_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

55 
…ø˚_so·c
 *
dev
;

56 
ªsu…
;

58 
dev
 = 
	`©èch_…ø˚_to_œmebus
(
devunô
, 
bus
);

59 i‡(
dev
==
NULL
) {

62 
	`k¥ötf
("…ø˚%dáàœmebus%d", 
devunô
, 
busunô
);

63 
ªsu…
 = 
	`c⁄fig_…ø˚
(
dev
, 
devunô
);

64 i‡(
ªsu…
 != 0) {

65 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

67  
ªsu…
;

69 
	`k¥ötf
("\n");

70 
√xtunô_…ø˚
 = 
devunô
+1;

71 
	`autoc⁄f_…ø˚
(
dev
, 
devunô
);

73 
	}
}

77 
	$åy©èch_…imî_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

79 
…imî_so·c
 *
dev
;

80 
ªsu…
;

82 
dev
 = 
	`©èch_…imî_to_œmebus
(
devunô
, 
bus
);

83 i‡(
dev
==
NULL
) {

86 
	`k¥ötf
("…imî%dáàœmebus%d", 
devunô
, 
busunô
);

87 
ªsu…
 = 
	`c⁄fig_…imî
(
dev
, 
devunô
);

88 i‡(
ªsu…
 != 0) {

89 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

91  
ªsu…
;

93 
	`k¥ötf
("\n");

94 
√xtunô_…imî
 = 
devunô
+1;

95 
	`autoc⁄f_…imî
(
dev
, 
devunô
);

97 
	}
}

101 
	$åy©èch_Ã™dom_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

103 
Ã™dom_so·c
 *
dev
;

104 
ªsu…
;

106 
dev
 = 
	`©èch_Ã™dom_to_œmebus
(
devunô
, 
bus
);

107 i‡(
dev
==
NULL
) {

110 
	`k¥ötf
("Ã™dom%dáàœmebus%d", 
devunô
, 
busunô
);

111 
ªsu…
 = 
	`c⁄fig_Ã™dom
(
dev
, 
devunô
);

112 i‡(
ªsu…
 != 0) {

113 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

115  
ªsu…
;

117 
	`k¥ötf
("\n");

118 
√xtunô_Ã™dom
 = 
devunô
+1;

119 
	`autoc⁄f_Ã™dom
(
dev
, 
devunô
);

121 
	}
}

125 
	$åy©èch_lhd_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

127 
lhd_so·c
 *
dev
;

128 
ªsu…
;

130 
dev
 = 
	`©èch_lhd_to_œmebus
(
devunô
, 
bus
);

131 i‡(
dev
==
NULL
) {

134 
	`k¥ötf
("lhd%dáàœmebus%d", 
devunô
, 
busunô
);

135 
ªsu…
 = 
	`c⁄fig_lhd
(
dev
, 
devunô
);

136 i‡(
ªsu…
 != 0) {

137 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

139  
ªsu…
;

141 
	`k¥ötf
("\n");

142 
√xtunô_lhd
 = 
devunô
+1;

143 
	`autoc⁄f_lhd
(
dev
, 
devunô
);

145 
	}
}

149 
	$åy©èch_l£r_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

151 
l£r_so·c
 *
dev
;

152 
ªsu…
;

154 
dev
 = 
	`©èch_l£r_to_œmebus
(
devunô
, 
bus
);

155 i‡(
dev
==
NULL
) {

158 
	`k¥ötf
("l£r%dáàœmebus%d", 
devunô
, 
busunô
);

159 
ªsu…
 = 
	`c⁄fig_l£r
(
dev
, 
devunô
);

160 i‡(
ªsu…
 != 0) {

161 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

163  
ªsu…
;

165 
	`k¥ötf
("\n");

166 
√xtunô_l£r
 = 
devunô
+1;

167 
	`autoc⁄f_l£r
(
dev
, 
devunô
);

169 
	}
}

173 
	$åy©èch_bìp_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
, 
busunô
)

175 
bìp_so·c
 *
dev
;

176 
ªsu…
;

178 
dev
 = 
	`©èch_bìp_to_…imî
(
devunô
, 
bus
);

179 i‡(
dev
==
NULL
) {

182 
	`k¥ötf
("bìp%dáà…imî%d", 
devunô
, 
busunô
);

183 
ªsu…
 = 
	`c⁄fig_bìp
(
dev
, 
devunô
);

184 i‡(
ªsu…
 != 0) {

185 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

187  
ªsu…
;

189 
	`k¥ötf
("\n");

190 
√xtunô_bìp
 = 
devunô
+1;

191 
	`autoc⁄f_bìp
(
dev
, 
devunô
);

193 
	}
}

197 
	$åy©èch_c⁄_to_l£r
(
devunô
, 
l£r_so·c
 *
bus
, 
busunô
)

199 
c⁄_so·c
 *
dev
;

200 
ªsu…
;

202 
dev
 = 
	`©èch_c⁄_to_l£r
(
devunô
, 
bus
);

203 i‡(
dev
==
NULL
) {

206 
	`k¥ötf
("c⁄%dáàl£r%d", 
devunô
, 
busunô
);

207 
ªsu…
 = 
	`c⁄fig_c⁄
(
dev
, 
devunô
);

208 i‡(
ªsu…
 != 0) {

209 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

211  
ªsu…
;

213 
	`k¥ötf
("\n");

214 
√xtunô_c⁄
 = 
devunô
+1;

215 
	`autoc⁄f_c⁄
(
dev
, 
devunô
);

217 
	}
}

221 
	$åy©èch_π˛ock_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
, 
busunô
)

223 
π˛ock_so·c
 *
dev
;

224 
ªsu…
;

226 
dev
 = 
	`©èch_π˛ock_to_…imî
(
devunô
, 
bus
);

227 i‡(
dev
==
NULL
) {

230 
	`k¥ötf
("π˛ock%dáà…imî%d", 
devunô
, 
busunô
);

231 
ªsu…
 = 
	`c⁄fig_π˛ock
(
dev
, 
devunô
);

232 i‡(
ªsu…
 != 0) {

233 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

235  
ªsu…
;

237 
	`k¥ötf
("\n");

238 
√xtunô_π˛ock
 = 
devunô
+1;

239 
	`autoc⁄f_π˛ock
(
dev
, 
devunô
);

241 
	}
}

245 
	$åy©èch_øndom_to_Ã™dom
(
devunô
, 
Ã™dom_so·c
 *
bus
, 
busunô
)

247 
øndom_so·c
 *
dev
;

248 
ªsu…
;

250 
dev
 = 
	`©èch_øndom_to_Ã™dom
(
devunô
, 
bus
);

251 i‡(
dev
==
NULL
) {

254 
	`k¥ötf
("øndom%dáàÃ™dom%d", 
devunô
, 
busunô
);

255 
ªsu…
 = 
	`c⁄fig_øndom
(
dev
, 
devunô
);

256 i‡(
ªsu…
 != 0) {

257 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

259  
ªsu…
;

261 
	`k¥ötf
("\n");

262 
√xtunô_øndom
 = 
devunô
+1;

263 
	`autoc⁄f_øndom
(
dev
, 
devunô
);

265 
	}
}

270 
	$autoc⁄f_lhd
(
lhd_so·c
 *
bus
, 
busunô
)

272 ()
bus
; ()
busunô
;

273 
	}
}

277 
	$autoc⁄f_øndom
(
øndom_so·c
 *
bus
, 
busunô
)

279 ()
bus
; ()
busunô
;

280 
	}
}

284 
	$autoc⁄f_π˛ock
(
π˛ock_so·c
 *
bus
, 
busunô
)

286 ()
bus
; ()
busunô
;

287 
	}
}

291 
	$autoc⁄f_emu
(
emu_so·c
 *
bus
, 
busunô
)

293 ()
bus
; ()
busunô
;

294 
	}
}

298 
	$autoc⁄f_…ø˚
(
…ø˚_so·c
 *
bus
, 
busunô
)

300 ()
bus
; ()
busunô
;

301 
	}
}

305 
	$autoc⁄f_c⁄
(
c⁄_so·c
 *
bus
, 
busunô
)

307 ()
bus
; ()
busunô
;

308 
	}
}

311 
	$autoc⁄f_œmebus
(
œmebus_so·c
 *
bus
, 
busunô
)

313 ()
bus
; ()
busunô
;

315 
ªsu…
, 
devunô
=
√xtunô_emu
;

317 
ªsu…
 = 
	`åy©èch_emu_to_œmebus
(
devunô
, 
bus
, 
busunô
);

318 
devunô
++;

319 } 
ªsu…
==0);

322 
ªsu…
, 
devunô
=
√xtunô_…ø˚
;

324 
ªsu…
 = 
	`åy©èch_…ø˚_to_œmebus
(
devunô
, 
bus
, 
busunô
);

325 
devunô
++;

326 } 
ªsu…
==0);

329 
ªsu…
, 
devunô
=
√xtunô_…imî
;

331 
ªsu…
 = 
	`åy©èch_…imî_to_œmebus
(
devunô
, 
bus
, 
busunô
);

332 
devunô
++;

333 } 
ªsu…
==0);

336 
ªsu…
, 
devunô
=
√xtunô_Ã™dom
;

338 
ªsu…
 = 
	`åy©èch_Ã™dom_to_œmebus
(
devunô
, 
bus
, 
busunô
);

339 
devunô
++;

340 } 
ªsu…
==0);

343 
ªsu…
, 
devunô
=
√xtunô_lhd
;

345 
ªsu…
 = 
	`åy©èch_lhd_to_œmebus
(
devunô
, 
bus
, 
busunô
);

346 
devunô
++;

347 } 
ªsu…
==0);

350 
ªsu…
, 
devunô
=
√xtunô_l£r
;

352 
ªsu…
 = 
	`åy©èch_l£r_to_œmebus
(
devunô
, 
bus
, 
busunô
);

353 
devunô
++;

354 } 
ªsu…
==0);

356 
	}
}

360 
	$autoc⁄f_bìp
(
bìp_so·c
 *
bus
, 
busunô
)

362 ()
bus
; ()
busunô
;

363 
	}
}

367 
	$autoc⁄f_l£r
(
l£r_so·c
 *
bus
, 
busunô
)

369 ()
bus
; ()
busunô
;

371 i‡(
√xtunô_c⁄
 <= 0) {

372 
	`åy©èch_c⁄_to_l£r
(0, 
bus
, 
busunô
);

375 
	}
}

379 
	$autoc⁄f_Ã™dom
(
Ã™dom_so·c
 *
bus
, 
busunô
)

381 ()
bus
; ()
busunô
;

383 i‡(
√xtunô_øndom
 <= 0) {

384 
	`åy©èch_øndom_to_Ã™dom
(0, 
bus
, 
busunô
);

387 
	}
}

391 
	$autoc⁄f_…imî
(
…imî_so·c
 *
bus
, 
busunô
)

393 ()
bus
; ()
busunô
;

395 i‡(
√xtunô_bìp
 <= 0) {

396 
	`åy©èch_bìp_to_…imî
(0, 
bus
, 
busunô
);

400 i‡(
√xtunô_π˛ock
 <= 0) {

401 
	`åy©èch_π˛ock_to_…imî
(0, 
bus
, 
busunô
);

404 
	}
}

407 
	$p£udoc⁄fig
()

409 
	}
}

	@compile/ASST1/autoconf.h

2 #i‚de‡
_AUTOCONF_H_


3 
	#_AUTOCONF_H_


	)

5 
	gœmebus_so·c
;

6 
	gemu_so·c
;

7 
	g…ø˚_so·c
;

8 
	g…imî_so·c
;

9 
	gÃ™dom_so·c
;

10 
	glhd_so·c
;

11 
	gl£r_so·c
;

12 
	gbìp_so·c
;

13 
	gc⁄_so·c
;

14 
	gπ˛ock_so·c
;

15 
	gøndom_so·c
;

17 
autoc⁄f_œmebus
(
œmebus_so·c
 *
dev
, 
unô
);

19 
emu_so·c
 *
©èch_emu_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

20 
…ø˚_so·c
 *
©èch_…ø˚_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

21 
…imî_so·c
 *
©èch_…imî_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

22 
Ã™dom_so·c
 *
©èch_Ã™dom_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

23 
lhd_so·c
 *
©èch_lhd_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

24 
l£r_so·c
 *
©èch_l£r_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

25 
bìp_so·c
 *
©èch_bìp_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
);

26 
c⁄_so·c
 *
©èch_c⁄_to_l£r
(
devunô
, 
l£r_so·c
 *
bus
);

27 
π˛ock_so·c
 *
©èch_π˛ock_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
);

28 
øndom_so·c
 *
©èch_øndom_to_Ã™dom
(
devunô
, 
Ã™dom_so·c
 *
bus
);

30 
c⁄fig_emu
(
emu_so·c
 *
dev
, 
unô
);

31 
c⁄fig_…ø˚
(
…ø˚_so·c
 *
dev
, 
unô
);

32 
c⁄fig_…imî
(
…imî_so·c
 *
dev
, 
unô
);

33 
c⁄fig_Ã™dom
(
Ã™dom_so·c
 *
dev
, 
unô
);

34 
c⁄fig_lhd
(
lhd_so·c
 *
dev
, 
unô
);

35 
c⁄fig_l£r
(
l£r_so·c
 *
dev
, 
unô
);

36 
c⁄fig_bìp
(
bìp_so·c
 *
dev
, 
unô
);

37 
c⁄fig_c⁄
(
c⁄_so·c
 *
dev
, 
unô
);

38 
c⁄fig_π˛ock
(
π˛ock_so·c
 *
dev
, 
unô
);

39 
c⁄fig_øndom
(
øndom_so·c
 *
dev
, 
unô
);

41 
p£udoc⁄fig
();

	@compile/ASST1/opt-A0.h

2 #i‚de‡
_OPT_A0_H_


3 
	#_OPT_A0_H_


	)

4 
	#OPT_A0
 0

	)

	@compile/ASST1/opt-A1.h

2 #i‚de‡
_OPT_A1_H_


3 
	#_OPT_A1_H_


	)

4 
	#OPT_A1
 1

	)

	@compile/ASST1/opt-A2.h

2 #i‚de‡
_OPT_A2_H_


3 
	#_OPT_A2_H_


	)

4 
	#OPT_A2
 0

	)

	@compile/ASST1/opt-A3.h

2 #i‚de‡
_OPT_A3_H_


3 
	#_OPT_A3_H_


	)

4 
	#OPT_A3
 0

	)

	@compile/ASST1/opt-A4.h

2 #i‚de‡
_OPT_A4_H_


3 
	#_OPT_A4_H_


	)

4 
	#OPT_A4
 0

	)

	@compile/ASST1/opt-A5.h

2 #i‚de‡
_OPT_A5_H_


3 
	#_OPT_A5_H_


	)

4 
	#OPT_A5
 0

	)

	@compile/ASST1/opt-dumbvm.h

2 #i‚de‡
_OPT_DUMBVM_H_


3 
	#_OPT_DUMBVM_H_


	)

4 
	#OPT_DUMBVM
 1

	)

	@compile/ASST1/opt-net.h

2 #i‚de‡
_OPT_NET_H_


3 
	#_OPT_NET_H_


	)

4 
	#OPT_NET
 0

	)

	@compile/ASST1/opt-netfs.h

2 #i‚de‡
_OPT_NETFS_H_


3 
	#_OPT_NETFS_H_


	)

4 
	#OPT_NETFS
 0

	)

	@compile/ASST1/opt-noasserts.h

2 #i‚de‡
_OPT_NOASSERTS_H_


3 
	#_OPT_NOASSERTS_H_


	)

4 
	#OPT_NOASSERTS
 0

	)

	@compile/ASST1/opt-sfs.h

2 #i‚de‡
_OPT_SFS_H_


3 
	#_OPT_SFS_H_


	)

4 
	#OPT_SFS
 1

	)

	@compile/ASST1/opt-synchprobs.h

2 #i‚de‡
_OPT_SYNCHPROBS_H_


3 
	#_OPT_SYNCHPROBS_H_


	)

4 
	#OPT_SYNCHPROBS
 1

	)

	@compile/ASST1/vers.c

2 c⁄° 
	gbuûdvîsi⁄
 = 42;

3 c⁄° 
	gbuûdc⁄fig
[] = "ASST1";

	@compile/ASST2/autoconf.c

2 
	~<ty≥s.h
>

3 
	~<lib.h
>

4 
	~"autoc⁄f.h
"

6 
autoc⁄f_bìp
(
bìp_so·c
 *, );

7 
autoc⁄f_c⁄
(
c⁄_so·c
 *, );

8 
autoc⁄f_emu
(
emu_so·c
 *, );

9 
autoc⁄f_lhd
(
lhd_so·c
 *, );

10 
autoc⁄f_Ã™dom
(
Ã™dom_so·c
 *, );

11 
autoc⁄f_l£r
(
l£r_so·c
 *, );

12 
autoc⁄f_…imî
(
…imî_so·c
 *, );

13 
autoc⁄f_…ø˚
(
…ø˚_so·c
 *, );

14 
autoc⁄f_øndom
(
øndom_so·c
 *, );

15 
autoc⁄f_π˛ock
(
π˛ock_so·c
 *, );

16 
	g√xtunô_bìp
;

17 
	g√xtunô_c⁄
;

18 
	g√xtunô_emu
;

19 
	g√xtunô_lhd
;

20 
	g√xtunô_Ã™dom
;

21 
	g√xtunô_l£r
;

22 
	g√xtunô_…imî
;

23 
	g√xtunô_…ø˚
;

24 
	g√xtunô_øndom
;

25 
	g√xtunô_π˛ock
;

29 
	$åy©èch_emu_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

31 
emu_so·c
 *
dev
;

32 
ªsu…
;

34 
dev
 = 
	`©èch_emu_to_œmebus
(
devunô
, 
bus
);

35 i‡(
dev
==
NULL
) {

38 
	`k¥ötf
("emu%dáàœmebus%d", 
devunô
, 
busunô
);

39 
ªsu…
 = 
	`c⁄fig_emu
(
dev
, 
devunô
);

40 i‡(
ªsu…
 != 0) {

41 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

43  
ªsu…
;

45 
	`k¥ötf
("\n");

46 
√xtunô_emu
 = 
devunô
+1;

47 
	`autoc⁄f_emu
(
dev
, 
devunô
);

49 
	}
}

53 
	$åy©èch_…ø˚_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

55 
…ø˚_so·c
 *
dev
;

56 
ªsu…
;

58 
dev
 = 
	`©èch_…ø˚_to_œmebus
(
devunô
, 
bus
);

59 i‡(
dev
==
NULL
) {

62 
	`k¥ötf
("…ø˚%dáàœmebus%d", 
devunô
, 
busunô
);

63 
ªsu…
 = 
	`c⁄fig_…ø˚
(
dev
, 
devunô
);

64 i‡(
ªsu…
 != 0) {

65 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

67  
ªsu…
;

69 
	`k¥ötf
("\n");

70 
√xtunô_…ø˚
 = 
devunô
+1;

71 
	`autoc⁄f_…ø˚
(
dev
, 
devunô
);

73 
	}
}

77 
	$åy©èch_…imî_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

79 
…imî_so·c
 *
dev
;

80 
ªsu…
;

82 
dev
 = 
	`©èch_…imî_to_œmebus
(
devunô
, 
bus
);

83 i‡(
dev
==
NULL
) {

86 
	`k¥ötf
("…imî%dáàœmebus%d", 
devunô
, 
busunô
);

87 
ªsu…
 = 
	`c⁄fig_…imî
(
dev
, 
devunô
);

88 i‡(
ªsu…
 != 0) {

89 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

91  
ªsu…
;

93 
	`k¥ötf
("\n");

94 
√xtunô_…imî
 = 
devunô
+1;

95 
	`autoc⁄f_…imî
(
dev
, 
devunô
);

97 
	}
}

101 
	$åy©èch_Ã™dom_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

103 
Ã™dom_so·c
 *
dev
;

104 
ªsu…
;

106 
dev
 = 
	`©èch_Ã™dom_to_œmebus
(
devunô
, 
bus
);

107 i‡(
dev
==
NULL
) {

110 
	`k¥ötf
("Ã™dom%dáàœmebus%d", 
devunô
, 
busunô
);

111 
ªsu…
 = 
	`c⁄fig_Ã™dom
(
dev
, 
devunô
);

112 i‡(
ªsu…
 != 0) {

113 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

115  
ªsu…
;

117 
	`k¥ötf
("\n");

118 
√xtunô_Ã™dom
 = 
devunô
+1;

119 
	`autoc⁄f_Ã™dom
(
dev
, 
devunô
);

121 
	}
}

125 
	$åy©èch_lhd_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

127 
lhd_so·c
 *
dev
;

128 
ªsu…
;

130 
dev
 = 
	`©èch_lhd_to_œmebus
(
devunô
, 
bus
);

131 i‡(
dev
==
NULL
) {

134 
	`k¥ötf
("lhd%dáàœmebus%d", 
devunô
, 
busunô
);

135 
ªsu…
 = 
	`c⁄fig_lhd
(
dev
, 
devunô
);

136 i‡(
ªsu…
 != 0) {

137 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

139  
ªsu…
;

141 
	`k¥ötf
("\n");

142 
√xtunô_lhd
 = 
devunô
+1;

143 
	`autoc⁄f_lhd
(
dev
, 
devunô
);

145 
	}
}

149 
	$åy©èch_l£r_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

151 
l£r_so·c
 *
dev
;

152 
ªsu…
;

154 
dev
 = 
	`©èch_l£r_to_œmebus
(
devunô
, 
bus
);

155 i‡(
dev
==
NULL
) {

158 
	`k¥ötf
("l£r%dáàœmebus%d", 
devunô
, 
busunô
);

159 
ªsu…
 = 
	`c⁄fig_l£r
(
dev
, 
devunô
);

160 i‡(
ªsu…
 != 0) {

161 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

163  
ªsu…
;

165 
	`k¥ötf
("\n");

166 
√xtunô_l£r
 = 
devunô
+1;

167 
	`autoc⁄f_l£r
(
dev
, 
devunô
);

169 
	}
}

173 
	$åy©èch_bìp_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
, 
busunô
)

175 
bìp_so·c
 *
dev
;

176 
ªsu…
;

178 
dev
 = 
	`©èch_bìp_to_…imî
(
devunô
, 
bus
);

179 i‡(
dev
==
NULL
) {

182 
	`k¥ötf
("bìp%dáà…imî%d", 
devunô
, 
busunô
);

183 
ªsu…
 = 
	`c⁄fig_bìp
(
dev
, 
devunô
);

184 i‡(
ªsu…
 != 0) {

185 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

187  
ªsu…
;

189 
	`k¥ötf
("\n");

190 
√xtunô_bìp
 = 
devunô
+1;

191 
	`autoc⁄f_bìp
(
dev
, 
devunô
);

193 
	}
}

197 
	$åy©èch_c⁄_to_l£r
(
devunô
, 
l£r_so·c
 *
bus
, 
busunô
)

199 
c⁄_so·c
 *
dev
;

200 
ªsu…
;

202 
dev
 = 
	`©èch_c⁄_to_l£r
(
devunô
, 
bus
);

203 i‡(
dev
==
NULL
) {

206 
	`k¥ötf
("c⁄%dáàl£r%d", 
devunô
, 
busunô
);

207 
ªsu…
 = 
	`c⁄fig_c⁄
(
dev
, 
devunô
);

208 i‡(
ªsu…
 != 0) {

209 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

211  
ªsu…
;

213 
	`k¥ötf
("\n");

214 
√xtunô_c⁄
 = 
devunô
+1;

215 
	`autoc⁄f_c⁄
(
dev
, 
devunô
);

217 
	}
}

221 
	$åy©èch_π˛ock_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
, 
busunô
)

223 
π˛ock_so·c
 *
dev
;

224 
ªsu…
;

226 
dev
 = 
	`©èch_π˛ock_to_…imî
(
devunô
, 
bus
);

227 i‡(
dev
==
NULL
) {

230 
	`k¥ötf
("π˛ock%dáà…imî%d", 
devunô
, 
busunô
);

231 
ªsu…
 = 
	`c⁄fig_π˛ock
(
dev
, 
devunô
);

232 i‡(
ªsu…
 != 0) {

233 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

235  
ªsu…
;

237 
	`k¥ötf
("\n");

238 
√xtunô_π˛ock
 = 
devunô
+1;

239 
	`autoc⁄f_π˛ock
(
dev
, 
devunô
);

241 
	}
}

245 
	$åy©èch_øndom_to_Ã™dom
(
devunô
, 
Ã™dom_so·c
 *
bus
, 
busunô
)

247 
øndom_so·c
 *
dev
;

248 
ªsu…
;

250 
dev
 = 
	`©èch_øndom_to_Ã™dom
(
devunô
, 
bus
);

251 i‡(
dev
==
NULL
) {

254 
	`k¥ötf
("øndom%dáàÃ™dom%d", 
devunô
, 
busunô
);

255 
ªsu…
 = 
	`c⁄fig_øndom
(
dev
, 
devunô
);

256 i‡(
ªsu…
 != 0) {

257 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

259  
ªsu…
;

261 
	`k¥ötf
("\n");

262 
√xtunô_øndom
 = 
devunô
+1;

263 
	`autoc⁄f_øndom
(
dev
, 
devunô
);

265 
	}
}

270 
	$autoc⁄f_lhd
(
lhd_so·c
 *
bus
, 
busunô
)

272 ()
bus
; ()
busunô
;

273 
	}
}

277 
	$autoc⁄f_øndom
(
øndom_so·c
 *
bus
, 
busunô
)

279 ()
bus
; ()
busunô
;

280 
	}
}

284 
	$autoc⁄f_π˛ock
(
π˛ock_so·c
 *
bus
, 
busunô
)

286 ()
bus
; ()
busunô
;

287 
	}
}

291 
	$autoc⁄f_emu
(
emu_so·c
 *
bus
, 
busunô
)

293 ()
bus
; ()
busunô
;

294 
	}
}

298 
	$autoc⁄f_…ø˚
(
…ø˚_so·c
 *
bus
, 
busunô
)

300 ()
bus
; ()
busunô
;

301 
	}
}

305 
	$autoc⁄f_c⁄
(
c⁄_so·c
 *
bus
, 
busunô
)

307 ()
bus
; ()
busunô
;

308 
	}
}

311 
	$autoc⁄f_œmebus
(
œmebus_so·c
 *
bus
, 
busunô
)

313 ()
bus
; ()
busunô
;

315 
ªsu…
, 
devunô
=
√xtunô_emu
;

317 
ªsu…
 = 
	`åy©èch_emu_to_œmebus
(
devunô
, 
bus
, 
busunô
);

318 
devunô
++;

319 } 
ªsu…
==0);

322 
ªsu…
, 
devunô
=
√xtunô_…ø˚
;

324 
ªsu…
 = 
	`åy©èch_…ø˚_to_œmebus
(
devunô
, 
bus
, 
busunô
);

325 
devunô
++;

326 } 
ªsu…
==0);

329 
ªsu…
, 
devunô
=
√xtunô_…imî
;

331 
ªsu…
 = 
	`åy©èch_…imî_to_œmebus
(
devunô
, 
bus
, 
busunô
);

332 
devunô
++;

333 } 
ªsu…
==0);

336 
ªsu…
, 
devunô
=
√xtunô_Ã™dom
;

338 
ªsu…
 = 
	`åy©èch_Ã™dom_to_œmebus
(
devunô
, 
bus
, 
busunô
);

339 
devunô
++;

340 } 
ªsu…
==0);

343 
ªsu…
, 
devunô
=
√xtunô_lhd
;

345 
ªsu…
 = 
	`åy©èch_lhd_to_œmebus
(
devunô
, 
bus
, 
busunô
);

346 
devunô
++;

347 } 
ªsu…
==0);

350 
ªsu…
, 
devunô
=
√xtunô_l£r
;

352 
ªsu…
 = 
	`åy©èch_l£r_to_œmebus
(
devunô
, 
bus
, 
busunô
);

353 
devunô
++;

354 } 
ªsu…
==0);

356 
	}
}

360 
	$autoc⁄f_bìp
(
bìp_so·c
 *
bus
, 
busunô
)

362 ()
bus
; ()
busunô
;

363 
	}
}

367 
	$autoc⁄f_l£r
(
l£r_so·c
 *
bus
, 
busunô
)

369 ()
bus
; ()
busunô
;

371 i‡(
√xtunô_c⁄
 <= 0) {

372 
	`åy©èch_c⁄_to_l£r
(0, 
bus
, 
busunô
);

375 
	}
}

379 
	$autoc⁄f_Ã™dom
(
Ã™dom_so·c
 *
bus
, 
busunô
)

381 ()
bus
; ()
busunô
;

383 i‡(
√xtunô_øndom
 <= 0) {

384 
	`åy©èch_øndom_to_Ã™dom
(0, 
bus
, 
busunô
);

387 
	}
}

391 
	$autoc⁄f_…imî
(
…imî_so·c
 *
bus
, 
busunô
)

393 ()
bus
; ()
busunô
;

395 i‡(
√xtunô_bìp
 <= 0) {

396 
	`åy©èch_bìp_to_…imî
(0, 
bus
, 
busunô
);

400 i‡(
√xtunô_π˛ock
 <= 0) {

401 
	`åy©èch_π˛ock_to_…imî
(0, 
bus
, 
busunô
);

404 
	}
}

407 
	$p£udoc⁄fig
()

409 
	}
}

	@compile/ASST2/autoconf.h

2 #i‚de‡
_AUTOCONF_H_


3 
	#_AUTOCONF_H_


	)

5 
	gœmebus_so·c
;

6 
	gemu_so·c
;

7 
	g…ø˚_so·c
;

8 
	g…imî_so·c
;

9 
	gÃ™dom_so·c
;

10 
	glhd_so·c
;

11 
	gl£r_so·c
;

12 
	gbìp_so·c
;

13 
	gc⁄_so·c
;

14 
	gπ˛ock_so·c
;

15 
	gøndom_so·c
;

17 
autoc⁄f_œmebus
(
œmebus_so·c
 *
dev
, 
unô
);

19 
emu_so·c
 *
©èch_emu_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

20 
…ø˚_so·c
 *
©èch_…ø˚_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

21 
…imî_so·c
 *
©èch_…imî_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

22 
Ã™dom_so·c
 *
©èch_Ã™dom_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

23 
lhd_so·c
 *
©èch_lhd_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

24 
l£r_so·c
 *
©èch_l£r_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

25 
bìp_so·c
 *
©èch_bìp_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
);

26 
c⁄_so·c
 *
©èch_c⁄_to_l£r
(
devunô
, 
l£r_so·c
 *
bus
);

27 
π˛ock_so·c
 *
©èch_π˛ock_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
);

28 
øndom_so·c
 *
©èch_øndom_to_Ã™dom
(
devunô
, 
Ã™dom_so·c
 *
bus
);

30 
c⁄fig_emu
(
emu_so·c
 *
dev
, 
unô
);

31 
c⁄fig_…ø˚
(
…ø˚_so·c
 *
dev
, 
unô
);

32 
c⁄fig_…imî
(
…imî_so·c
 *
dev
, 
unô
);

33 
c⁄fig_Ã™dom
(
Ã™dom_so·c
 *
dev
, 
unô
);

34 
c⁄fig_lhd
(
lhd_so·c
 *
dev
, 
unô
);

35 
c⁄fig_l£r
(
l£r_so·c
 *
dev
, 
unô
);

36 
c⁄fig_bìp
(
bìp_so·c
 *
dev
, 
unô
);

37 
c⁄fig_c⁄
(
c⁄_so·c
 *
dev
, 
unô
);

38 
c⁄fig_π˛ock
(
π˛ock_so·c
 *
dev
, 
unô
);

39 
c⁄fig_øndom
(
øndom_so·c
 *
dev
, 
unô
);

41 
p£udoc⁄fig
();

	@compile/ASST2/opt-A0.h

2 #i‚de‡
_OPT_A0_H_


3 
	#_OPT_A0_H_


	)

4 
	#OPT_A0
 0

	)

	@compile/ASST2/opt-A1.h

2 #i‚de‡
_OPT_A1_H_


3 
	#_OPT_A1_H_


	)

4 
	#OPT_A1
 1

	)

	@compile/ASST2/opt-A2.h

2 #i‚de‡
_OPT_A2_H_


3 
	#_OPT_A2_H_


	)

4 
	#OPT_A2
 1

	)

	@compile/ASST2/opt-A3.h

2 #i‚de‡
_OPT_A3_H_


3 
	#_OPT_A3_H_


	)

4 
	#OPT_A3
 0

	)

	@compile/ASST2/opt-A4.h

2 #i‚de‡
_OPT_A4_H_


3 
	#_OPT_A4_H_


	)

4 
	#OPT_A4
 0

	)

	@compile/ASST2/opt-A5.h

2 #i‚de‡
_OPT_A5_H_


3 
	#_OPT_A5_H_


	)

4 
	#OPT_A5
 0

	)

	@compile/ASST2/opt-dumbvm.h

2 #i‚de‡
_OPT_DUMBVM_H_


3 
	#_OPT_DUMBVM_H_


	)

4 
	#OPT_DUMBVM
 1

	)

	@compile/ASST2/opt-net.h

2 #i‚de‡
_OPT_NET_H_


3 
	#_OPT_NET_H_


	)

4 
	#OPT_NET
 0

	)

	@compile/ASST2/opt-netfs.h

2 #i‚de‡
_OPT_NETFS_H_


3 
	#_OPT_NETFS_H_


	)

4 
	#OPT_NETFS
 0

	)

	@compile/ASST2/opt-noasserts.h

2 #i‚de‡
_OPT_NOASSERTS_H_


3 
	#_OPT_NOASSERTS_H_


	)

4 
	#OPT_NOASSERTS
 0

	)

	@compile/ASST2/opt-sfs.h

2 #i‚de‡
_OPT_SFS_H_


3 
	#_OPT_SFS_H_


	)

4 
	#OPT_SFS
 1

	)

	@compile/ASST2/opt-synchprobs.h

2 #i‚de‡
_OPT_SYNCHPROBS_H_


3 
	#_OPT_SYNCHPROBS_H_


	)

4 
	#OPT_SYNCHPROBS
 0

	)

	@compile/ASST2/vers.c

2 c⁄° 
	gbuûdvîsi⁄
 = 18;

3 c⁄° 
	gbuûdc⁄fig
[] = "ASST2";

	@compile/ASST3/autoconf.c

2 
	~<ty≥s.h
>

3 
	~<lib.h
>

4 
	~"autoc⁄f.h
"

6 
autoc⁄f_bìp
(
bìp_so·c
 *, );

7 
autoc⁄f_c⁄
(
c⁄_so·c
 *, );

8 
autoc⁄f_emu
(
emu_so·c
 *, );

9 
autoc⁄f_lhd
(
lhd_so·c
 *, );

10 
autoc⁄f_Ã™dom
(
Ã™dom_so·c
 *, );

11 
autoc⁄f_l£r
(
l£r_so·c
 *, );

12 
autoc⁄f_…imî
(
…imî_so·c
 *, );

13 
autoc⁄f_…ø˚
(
…ø˚_so·c
 *, );

14 
autoc⁄f_øndom
(
øndom_so·c
 *, );

15 
autoc⁄f_π˛ock
(
π˛ock_so·c
 *, );

16 
	g√xtunô_bìp
;

17 
	g√xtunô_c⁄
;

18 
	g√xtunô_emu
;

19 
	g√xtunô_lhd
;

20 
	g√xtunô_Ã™dom
;

21 
	g√xtunô_l£r
;

22 
	g√xtunô_…imî
;

23 
	g√xtunô_…ø˚
;

24 
	g√xtunô_øndom
;

25 
	g√xtunô_π˛ock
;

29 
	$åy©èch_emu_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

31 
emu_so·c
 *
dev
;

32 
ªsu…
;

34 
dev
 = 
	`©èch_emu_to_œmebus
(
devunô
, 
bus
);

35 i‡(
dev
==
NULL
) {

38 
	`k¥ötf
("emu%dáàœmebus%d", 
devunô
, 
busunô
);

39 
ªsu…
 = 
	`c⁄fig_emu
(
dev
, 
devunô
);

40 i‡(
ªsu…
 != 0) {

41 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

43  
ªsu…
;

45 
	`k¥ötf
("\n");

46 
√xtunô_emu
 = 
devunô
+1;

47 
	`autoc⁄f_emu
(
dev
, 
devunô
);

49 
	}
}

53 
	$åy©èch_…ø˚_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

55 
…ø˚_so·c
 *
dev
;

56 
ªsu…
;

58 
dev
 = 
	`©èch_…ø˚_to_œmebus
(
devunô
, 
bus
);

59 i‡(
dev
==
NULL
) {

62 
	`k¥ötf
("…ø˚%dáàœmebus%d", 
devunô
, 
busunô
);

63 
ªsu…
 = 
	`c⁄fig_…ø˚
(
dev
, 
devunô
);

64 i‡(
ªsu…
 != 0) {

65 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

67  
ªsu…
;

69 
	`k¥ötf
("\n");

70 
√xtunô_…ø˚
 = 
devunô
+1;

71 
	`autoc⁄f_…ø˚
(
dev
, 
devunô
);

73 
	}
}

77 
	$åy©èch_…imî_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

79 
…imî_so·c
 *
dev
;

80 
ªsu…
;

82 
dev
 = 
	`©èch_…imî_to_œmebus
(
devunô
, 
bus
);

83 i‡(
dev
==
NULL
) {

86 
	`k¥ötf
("…imî%dáàœmebus%d", 
devunô
, 
busunô
);

87 
ªsu…
 = 
	`c⁄fig_…imî
(
dev
, 
devunô
);

88 i‡(
ªsu…
 != 0) {

89 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

91  
ªsu…
;

93 
	`k¥ötf
("\n");

94 
√xtunô_…imî
 = 
devunô
+1;

95 
	`autoc⁄f_…imî
(
dev
, 
devunô
);

97 
	}
}

101 
	$åy©èch_Ã™dom_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

103 
Ã™dom_so·c
 *
dev
;

104 
ªsu…
;

106 
dev
 = 
	`©èch_Ã™dom_to_œmebus
(
devunô
, 
bus
);

107 i‡(
dev
==
NULL
) {

110 
	`k¥ötf
("Ã™dom%dáàœmebus%d", 
devunô
, 
busunô
);

111 
ªsu…
 = 
	`c⁄fig_Ã™dom
(
dev
, 
devunô
);

112 i‡(
ªsu…
 != 0) {

113 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

115  
ªsu…
;

117 
	`k¥ötf
("\n");

118 
√xtunô_Ã™dom
 = 
devunô
+1;

119 
	`autoc⁄f_Ã™dom
(
dev
, 
devunô
);

121 
	}
}

125 
	$åy©èch_lhd_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

127 
lhd_so·c
 *
dev
;

128 
ªsu…
;

130 
dev
 = 
	`©èch_lhd_to_œmebus
(
devunô
, 
bus
);

131 i‡(
dev
==
NULL
) {

134 
	`k¥ötf
("lhd%dáàœmebus%d", 
devunô
, 
busunô
);

135 
ªsu…
 = 
	`c⁄fig_lhd
(
dev
, 
devunô
);

136 i‡(
ªsu…
 != 0) {

137 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

139  
ªsu…
;

141 
	`k¥ötf
("\n");

142 
√xtunô_lhd
 = 
devunô
+1;

143 
	`autoc⁄f_lhd
(
dev
, 
devunô
);

145 
	}
}

149 
	$åy©èch_l£r_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

151 
l£r_so·c
 *
dev
;

152 
ªsu…
;

154 
dev
 = 
	`©èch_l£r_to_œmebus
(
devunô
, 
bus
);

155 i‡(
dev
==
NULL
) {

158 
	`k¥ötf
("l£r%dáàœmebus%d", 
devunô
, 
busunô
);

159 
ªsu…
 = 
	`c⁄fig_l£r
(
dev
, 
devunô
);

160 i‡(
ªsu…
 != 0) {

161 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

163  
ªsu…
;

165 
	`k¥ötf
("\n");

166 
√xtunô_l£r
 = 
devunô
+1;

167 
	`autoc⁄f_l£r
(
dev
, 
devunô
);

169 
	}
}

173 
	$åy©èch_bìp_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
, 
busunô
)

175 
bìp_so·c
 *
dev
;

176 
ªsu…
;

178 
dev
 = 
	`©èch_bìp_to_…imî
(
devunô
, 
bus
);

179 i‡(
dev
==
NULL
) {

182 
	`k¥ötf
("bìp%dáà…imî%d", 
devunô
, 
busunô
);

183 
ªsu…
 = 
	`c⁄fig_bìp
(
dev
, 
devunô
);

184 i‡(
ªsu…
 != 0) {

185 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

187  
ªsu…
;

189 
	`k¥ötf
("\n");

190 
√xtunô_bìp
 = 
devunô
+1;

191 
	`autoc⁄f_bìp
(
dev
, 
devunô
);

193 
	}
}

197 
	$åy©èch_c⁄_to_l£r
(
devunô
, 
l£r_so·c
 *
bus
, 
busunô
)

199 
c⁄_so·c
 *
dev
;

200 
ªsu…
;

202 
dev
 = 
	`©èch_c⁄_to_l£r
(
devunô
, 
bus
);

203 i‡(
dev
==
NULL
) {

206 
	`k¥ötf
("c⁄%dáàl£r%d", 
devunô
, 
busunô
);

207 
ªsu…
 = 
	`c⁄fig_c⁄
(
dev
, 
devunô
);

208 i‡(
ªsu…
 != 0) {

209 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

211  
ªsu…
;

213 
	`k¥ötf
("\n");

214 
√xtunô_c⁄
 = 
devunô
+1;

215 
	`autoc⁄f_c⁄
(
dev
, 
devunô
);

217 
	}
}

221 
	$åy©èch_π˛ock_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
, 
busunô
)

223 
π˛ock_so·c
 *
dev
;

224 
ªsu…
;

226 
dev
 = 
	`©èch_π˛ock_to_…imî
(
devunô
, 
bus
);

227 i‡(
dev
==
NULL
) {

230 
	`k¥ötf
("π˛ock%dáà…imî%d", 
devunô
, 
busunô
);

231 
ªsu…
 = 
	`c⁄fig_π˛ock
(
dev
, 
devunô
);

232 i‡(
ªsu…
 != 0) {

233 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

235  
ªsu…
;

237 
	`k¥ötf
("\n");

238 
√xtunô_π˛ock
 = 
devunô
+1;

239 
	`autoc⁄f_π˛ock
(
dev
, 
devunô
);

241 
	}
}

245 
	$åy©èch_øndom_to_Ã™dom
(
devunô
, 
Ã™dom_so·c
 *
bus
, 
busunô
)

247 
øndom_so·c
 *
dev
;

248 
ªsu…
;

250 
dev
 = 
	`©èch_øndom_to_Ã™dom
(
devunô
, 
bus
);

251 i‡(
dev
==
NULL
) {

254 
	`k¥ötf
("øndom%dáàÃ™dom%d", 
devunô
, 
busunô
);

255 
ªsu…
 = 
	`c⁄fig_øndom
(
dev
, 
devunô
);

256 i‡(
ªsu…
 != 0) {

257 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

259  
ªsu…
;

261 
	`k¥ötf
("\n");

262 
√xtunô_øndom
 = 
devunô
+1;

263 
	`autoc⁄f_øndom
(
dev
, 
devunô
);

265 
	}
}

270 
	$autoc⁄f_lhd
(
lhd_so·c
 *
bus
, 
busunô
)

272 ()
bus
; ()
busunô
;

273 
	}
}

277 
	$autoc⁄f_øndom
(
øndom_so·c
 *
bus
, 
busunô
)

279 ()
bus
; ()
busunô
;

280 
	}
}

284 
	$autoc⁄f_π˛ock
(
π˛ock_so·c
 *
bus
, 
busunô
)

286 ()
bus
; ()
busunô
;

287 
	}
}

291 
	$autoc⁄f_emu
(
emu_so·c
 *
bus
, 
busunô
)

293 ()
bus
; ()
busunô
;

294 
	}
}

298 
	$autoc⁄f_…ø˚
(
…ø˚_so·c
 *
bus
, 
busunô
)

300 ()
bus
; ()
busunô
;

301 
	}
}

305 
	$autoc⁄f_c⁄
(
c⁄_so·c
 *
bus
, 
busunô
)

307 ()
bus
; ()
busunô
;

308 
	}
}

311 
	$autoc⁄f_œmebus
(
œmebus_so·c
 *
bus
, 
busunô
)

313 ()
bus
; ()
busunô
;

315 
ªsu…
, 
devunô
=
√xtunô_emu
;

317 
ªsu…
 = 
	`åy©èch_emu_to_œmebus
(
devunô
, 
bus
, 
busunô
);

318 
devunô
++;

319 } 
ªsu…
==0);

322 
ªsu…
, 
devunô
=
√xtunô_…ø˚
;

324 
ªsu…
 = 
	`åy©èch_…ø˚_to_œmebus
(
devunô
, 
bus
, 
busunô
);

325 
devunô
++;

326 } 
ªsu…
==0);

329 
ªsu…
, 
devunô
=
√xtunô_…imî
;

331 
ªsu…
 = 
	`åy©èch_…imî_to_œmebus
(
devunô
, 
bus
, 
busunô
);

332 
devunô
++;

333 } 
ªsu…
==0);

336 
ªsu…
, 
devunô
=
√xtunô_Ã™dom
;

338 
ªsu…
 = 
	`åy©èch_Ã™dom_to_œmebus
(
devunô
, 
bus
, 
busunô
);

339 
devunô
++;

340 } 
ªsu…
==0);

343 
ªsu…
, 
devunô
=
√xtunô_lhd
;

345 
ªsu…
 = 
	`åy©èch_lhd_to_œmebus
(
devunô
, 
bus
, 
busunô
);

346 
devunô
++;

347 } 
ªsu…
==0);

350 
ªsu…
, 
devunô
=
√xtunô_l£r
;

352 
ªsu…
 = 
	`åy©èch_l£r_to_œmebus
(
devunô
, 
bus
, 
busunô
);

353 
devunô
++;

354 } 
ªsu…
==0);

356 
	}
}

360 
	$autoc⁄f_bìp
(
bìp_so·c
 *
bus
, 
busunô
)

362 ()
bus
; ()
busunô
;

363 
	}
}

367 
	$autoc⁄f_l£r
(
l£r_so·c
 *
bus
, 
busunô
)

369 ()
bus
; ()
busunô
;

371 i‡(
√xtunô_c⁄
 <= 0) {

372 
	`åy©èch_c⁄_to_l£r
(0, 
bus
, 
busunô
);

375 
	}
}

379 
	$autoc⁄f_Ã™dom
(
Ã™dom_so·c
 *
bus
, 
busunô
)

381 ()
bus
; ()
busunô
;

383 i‡(
√xtunô_øndom
 <= 0) {

384 
	`åy©èch_øndom_to_Ã™dom
(0, 
bus
, 
busunô
);

387 
	}
}

391 
	$autoc⁄f_…imî
(
…imî_so·c
 *
bus
, 
busunô
)

393 ()
bus
; ()
busunô
;

395 i‡(
√xtunô_bìp
 <= 0) {

396 
	`åy©èch_bìp_to_…imî
(0, 
bus
, 
busunô
);

400 i‡(
√xtunô_π˛ock
 <= 0) {

401 
	`åy©èch_π˛ock_to_…imî
(0, 
bus
, 
busunô
);

404 
	}
}

407 
	$p£udoc⁄fig
()

409 
	}
}

	@compile/ASST3/autoconf.h

2 #i‚de‡
_AUTOCONF_H_


3 
	#_AUTOCONF_H_


	)

5 
	gœmebus_so·c
;

6 
	gemu_so·c
;

7 
	g…ø˚_so·c
;

8 
	g…imî_so·c
;

9 
	gÃ™dom_so·c
;

10 
	glhd_so·c
;

11 
	gl£r_so·c
;

12 
	gbìp_so·c
;

13 
	gc⁄_so·c
;

14 
	gπ˛ock_so·c
;

15 
	gøndom_so·c
;

17 
autoc⁄f_œmebus
(
œmebus_so·c
 *
dev
, 
unô
);

19 
emu_so·c
 *
©èch_emu_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

20 
…ø˚_so·c
 *
©èch_…ø˚_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

21 
…imî_so·c
 *
©èch_…imî_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

22 
Ã™dom_so·c
 *
©èch_Ã™dom_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

23 
lhd_so·c
 *
©èch_lhd_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

24 
l£r_so·c
 *
©èch_l£r_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

25 
bìp_so·c
 *
©èch_bìp_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
);

26 
c⁄_so·c
 *
©èch_c⁄_to_l£r
(
devunô
, 
l£r_so·c
 *
bus
);

27 
π˛ock_so·c
 *
©èch_π˛ock_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
);

28 
øndom_so·c
 *
©èch_øndom_to_Ã™dom
(
devunô
, 
Ã™dom_so·c
 *
bus
);

30 
c⁄fig_emu
(
emu_so·c
 *
dev
, 
unô
);

31 
c⁄fig_…ø˚
(
…ø˚_so·c
 *
dev
, 
unô
);

32 
c⁄fig_…imî
(
…imî_so·c
 *
dev
, 
unô
);

33 
c⁄fig_Ã™dom
(
Ã™dom_so·c
 *
dev
, 
unô
);

34 
c⁄fig_lhd
(
lhd_so·c
 *
dev
, 
unô
);

35 
c⁄fig_l£r
(
l£r_so·c
 *
dev
, 
unô
);

36 
c⁄fig_bìp
(
bìp_so·c
 *
dev
, 
unô
);

37 
c⁄fig_c⁄
(
c⁄_so·c
 *
dev
, 
unô
);

38 
c⁄fig_π˛ock
(
π˛ock_so·c
 *
dev
, 
unô
);

39 
c⁄fig_øndom
(
øndom_so·c
 *
dev
, 
unô
);

41 
p£udoc⁄fig
();

	@compile/ASST3/opt-A0.h

2 #i‚de‡
_OPT_A0_H_


3 
	#_OPT_A0_H_


	)

4 
	#OPT_A0
 0

	)

	@compile/ASST3/opt-A1.h

2 #i‚de‡
_OPT_A1_H_


3 
	#_OPT_A1_H_


	)

4 
	#OPT_A1
 1

	)

	@compile/ASST3/opt-A2.h

2 #i‚de‡
_OPT_A2_H_


3 
	#_OPT_A2_H_


	)

4 
	#OPT_A2
 1

	)

	@compile/ASST3/opt-A3.h

2 #i‚de‡
_OPT_A3_H_


3 
	#_OPT_A3_H_


	)

4 
	#OPT_A3
 1

	)

	@compile/ASST3/opt-A4.h

2 #i‚de‡
_OPT_A4_H_


3 
	#_OPT_A4_H_


	)

4 
	#OPT_A4
 0

	)

	@compile/ASST3/opt-A5.h

2 #i‚de‡
_OPT_A5_H_


3 
	#_OPT_A5_H_


	)

4 
	#OPT_A5
 0

	)

	@compile/ASST3/opt-dumbvm.h

2 #i‚de‡
_OPT_DUMBVM_H_


3 
	#_OPT_DUMBVM_H_


	)

4 
	#OPT_DUMBVM
 1

	)

	@compile/ASST3/opt-net.h

2 #i‚de‡
_OPT_NET_H_


3 
	#_OPT_NET_H_


	)

4 
	#OPT_NET
 0

	)

	@compile/ASST3/opt-netfs.h

2 #i‚de‡
_OPT_NETFS_H_


3 
	#_OPT_NETFS_H_


	)

4 
	#OPT_NETFS
 0

	)

	@compile/ASST3/opt-noasserts.h

2 #i‚de‡
_OPT_NOASSERTS_H_


3 
	#_OPT_NOASSERTS_H_


	)

4 
	#OPT_NOASSERTS
 0

	)

	@compile/ASST3/opt-sfs.h

2 #i‚de‡
_OPT_SFS_H_


3 
	#_OPT_SFS_H_


	)

4 
	#OPT_SFS
 1

	)

	@compile/ASST3/opt-synchprobs.h

2 #i‚de‡
_OPT_SYNCHPROBS_H_


3 
	#_OPT_SYNCHPROBS_H_


	)

4 
	#OPT_SYNCHPROBS
 0

	)

	@compile/ASST3/vers.c

2 c⁄° 
	gbuûdvîsi⁄
 = 15;

3 c⁄° 
	gbuûdc⁄fig
[] = "ASST3";

	@dev/generic/beep.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<lib.h
>

33 
	~<gíîic/bìp.h
>

34 
	~"autoc⁄f.h
"

47 
bìp_so·c
 *
	gthe_bìp
 = 
NULL
;

50 
	$c⁄fig_bìp
(
bìp_so·c
 *
bs
, 
unô
)

53 i‡(
unô
!=0) {

54  
ENODEV
;

57 
	`KASSERT
(
the_bìp
==
NULL
);

58 
the_bìp
 = 
bs
;

60 
	}
}

63 
	$bìp
()

65 i‡(
the_bìp
!=
NULL
) {

66 
the_bìp
->
	`bs_bìp
—he_bìp->
bs_devd©a
);

69 
	`k¥ötf
("beep: Warning:Ço beep device\n");

71 
	}
}

	@dev/generic/beep.h

30 #i‚de‡
_GENERIC_BEEP_H_


31 
	#_GENERIC_BEEP_H_


	)

38 
	sbìp_so·c
 {

39 *
	mbs_devd©a
;

40 (*
	mbs_bìp
)(*
	mdevd©a
);

	@dev/generic/console.c

53 
	~<ty≥s.h
>

54 
	~<kîn/î∫o.h
>

55 
	~<lib.h
>

56 
	~<uio.h
>

57 
	~<thªad.h
>

58 
	~<cuºít.h
>

59 
	~<synch.h
>

60 
	~<gíîic/c⁄sﬁe.h
>

61 
	~<vfs.h
>

62 
	~<devi˚.h
>

63 
	~"autoc⁄f.h
"

68 
c⁄_so·c
 *
	gthe_c⁄sﬁe
 = 
NULL
;

74 
lock
 *
	gc⁄_u£æock_ªad
 = 
NULL
;

75 
lock
 *
	gc⁄_u£æock_wrôe
 = 
NULL
;

84 
	#DELAYBUFSIZE
 1024

	)

85 
	gdñayed_outbuf
[
DELAYBUFSIZE
];

86 
size_t
 
	gdñayed_outbuf_pos
=0;

90 
	$putch_dñayed
(
ch
)

97 
	`KASSERT
(
dñayed_outbuf_pos
 < (
dñayed_outbuf
));

98 
dñayed_outbuf
[
dñayed_outbuf_pos
++] = 
ch
;

99 
	}
}

103 
	$Êush_dñay_buf
()

105 
size_t
 
i
;

106 
i
=0; i<
dñayed_outbuf_pos
; i++) {

107 
	`putch
(
dñayed_outbuf
[
i
]);

109 
dñayed_outbuf_pos
 = 0;

110 
	}
}

120 
	$putch_pﬁÀd
(
c⁄_so·c
 *
cs
, 
ch
)

122 
cs
->
	`cs_£ndpﬁÀd
(cs->
cs_devd©a
, 
ch
);

123 
	}
}

127 
	$putch_¥ï¨e_pﬁÀd
(
c⁄_so·c
 *
cs
)

129 i‡(
cs
->
cs_°¨çﬁlög
 !
NULL
) {

130 
cs
->
	`cs_°¨çﬁlög
(cs->
cs_devd©a
);

132 
	}
}

136 
	$putch_com∂ëe_pﬁÀd
(
c⁄_so·c
 *
cs
)

138 i‡(
cs
->
cs_ídpﬁlög
 !
NULL
) {

139 
cs
->
	`cs_ídpﬁlög
(cs->
cs_devd©a
);

141 
	}
}

150 
	$putch_öå
(
c⁄_so·c
 *
cs
, 
ch
)

152 
	`P
(
cs
->
cs_w£m
);

153 
cs
->
	`cs_£nd
(cs->
cs_devd©a
, 
ch
);

154 
	}
}

161 
	$gëch_öå
(
c⁄_so·c
 *
cs
)

163 
ªt
;

165 
	`P
(
cs
->
cs_r£m
);

166 
ªt
 = 
cs
->
cs_gŸch¨s
[cs->
cs_gŸch¨s_èû
];

167 
cs
->
cs_gŸch¨s_èû
 =

168 (
cs
->
cs_gŸch¨s_èû
 + 1Ë% 
CONSOLE_INPUT_BUFFER_SIZE
;

169  
ªt
;

170 
	}
}

182 
	$c⁄_öput
(*
vcs
, 
ch
)

184 
c⁄_so·c
 *
cs
 = 
vcs
;

185 
√xthód
;

187 
√xthód
 = (
cs
->
cs_gŸch¨s_hód
 + 1Ë% 
CONSOLE_INPUT_BUFFER_SIZE
;

188 i‡(
√xthód
 =
cs
->
cs_gŸch¨s_èû
) {

193 
cs
->
cs_gŸch¨s
[cs->
cs_gŸch¨s_hód
] = 
ch
;

194 
cs
->
cs_gŸch¨s_hód
 = 
√xthód
;

196 
	`V
(
cs
->
cs_r£m
);

197 
	}
}

203 
	$c⁄_°¨t
(*
vcs
)

205 
c⁄_so·c
 *
cs
 = 
vcs
;

207 
	`V
(
cs
->
cs_w£m
);

208 
	}
}

221 
	$putch
(
ch
)

223 
c⁄_so·c
 *
cs
 = 
the_c⁄sﬁe
;

225 i‡(
cs
==
NULL
) {

226 
	`putch_dñayed
(
ch
);

228 i‡(
cuπhªad
->
t_ö_öãºu±
 || cuπhªad->
t_ùlhigh_cou¡
 > 0) {

229 
	`putch_pﬁÀd
(
cs
, 
ch
);

232 
	`putch_öå
(
cs
, 
ch
);

234 
	}
}

237 
	$putch_¥ï¨e
()

239 
c⁄_so·c
 *
cs
 = 
the_c⁄sﬁe
;

241 i‡(
cs
 =
NULL
) {

244 i‡(
cuπhªad
->
t_ö_öãºu±
 || cuπhªad->
t_ùlhigh_cou¡
 > 0) {

245 
	`putch_¥ï¨e_pﬁÀd
(
cs
);

250 
	}
}

253 
	$putch_com∂ëe
()

255 
c⁄_so·c
 *
cs
 = 
the_c⁄sﬁe
;

257 i‡(
cs
 =
NULL
) {

260 i‡(
cuπhªad
->
t_ö_öãºu±
 || cuπhªad->
t_ùlhigh_cou¡
 > 0) {

261 
	`putch_com∂ëe_pﬁÀd
(
cs
);

266 
	}
}

269 
	$gëch
()

271 
c⁄_so·c
 *
cs
 = 
the_c⁄sﬁe
;

272 
	`KASSERT
(
cs
 !
NULL
);

273 
	`KASSERT
(!
cuπhªad
->
t_ö_öãºu±
 && cuπhªad->
t_ùlhigh_cou¡
 == 0);

275  
	`gëch_öå
(
cs
);

276 
	}
}

286 
	$c⁄_›í
(
devi˚
 *
dev
, 
›íÊags
)

288 ()
dev
;

289 ()
›íÊags
;

291 
	}
}

295 
	$c⁄_˛o£
(
devi˚
 *
dev
)

297 ()
dev
;

299 
	}
}

303 
	$c⁄_io
(
devi˚
 *
dev
, 
uio
 *uio)

305 
ªsu…
;

306 
ch
;

307 
lock
 *
lk
;

309 ()
dev
;

311 i‡(
uio
->
uio_rw
==
UIO_READ
) {

312 
lk
 = 
c⁄_u£æock_ªad
;

315 
lk
 = 
c⁄_u£æock_wrôe
;

318 
	`KASSERT
(
lk
 !
NULL
);

319 
	`lock_acquúe
(
lk
);

321 
uio
->
uio_ªsid
 > 0) {

322 i‡(
uio
->
uio_rw
==
UIO_READ
) {

323 
ch
 = 
	`gëch
();

324 i‡(
ch
=='\r') {

325 
ch
 = '\n';

327 
ªsu…
 = 
	`uiomove
(&
ch
, 1, 
uio
);

328 i‡(
ªsu…
) {

329 
	`lock_ªÀa£
(
lk
);

330  
ªsu…
;

332 i‡(
ch
=='\n') {

337 
ªsu…
 = 
	`uiomove
(&
ch
, 1, 
uio
);

338 i‡(
ªsu…
) {

339 
	`lock_ªÀa£
(
lk
);

340  
ªsu…
;

342 i‡(
ch
=='\n') {

343 
	`putch
('\r');

345 
	`putch
(
ch
);

348 
	`lock_ªÀa£
(
lk
);

350 
	}
}

354 
	$c⁄_io˘l
(
devi˚
 *
dev
, 
›
, 
u£Ωå_t
 
d©a
)

357 ()
dev
;

358 ()
›
;

359 ()
d©a
;

360  
EINVAL
;

361 
	}
}

365 
	$©èch_c⁄sﬁe_to_vfs
(
c⁄_so·c
 *
cs
)

367 
devi˚
 *
dev
;

368 
ªsu…
;

370 
dev
 = 
	`kmÆloc
((*dev));

371 i‡(
dev
==
NULL
) {

372  
ENOMEM
;

375 
dev
->
d_›í
 = 
c⁄_›í
;

376 
dev
->
d_˛o£
 = 
c⁄_˛o£
;

377 
dev
->
d_io
 = 
c⁄_io
;

378 
dev
->
d_io˘l
 = 
c⁄_io˘l
;

379 
dev
->
d_blocks
 = 0;

380 
dev
->
d_blocksize
 = 1;

381 
dev
->
d_d©a
 = 
cs
;

383 
ªsu…
 = 
	`vfs_adddev
("c⁄", 
dev
, 0);

384 i‡(
ªsu…
) {

385 
	`k‰ì
(
dev
);

386  
ªsu…
;

390 
	}
}

399 
	$c⁄fig_c⁄
(
c⁄_so·c
 *
cs
, 
unô
)

401 
£m≠h‹e
 *
r£m
, *
w£m
;

402 
lock
 *
æk
, *
wlk
;

411 i‡(
unô
>0) {

412 
	`KASSERT
(
the_c⁄sﬁe
!=
NULL
);

413  
ENODEV
;

415 
	`KASSERT
(
the_c⁄sﬁe
==
NULL
);

417 
r£m
 = 
	`£m_¸óã
("consoleÑead", 0);

418 i‡(
r£m
 =
NULL
) {

419  
ENOMEM
;

421 
w£m
 = 
	`£m_¸óã
("console write", 1);

422 i‡(
w£m
 =
NULL
) {

423 
	`£m_de°roy
(
r£m
);

424  
ENOMEM
;

426 
æk
 = 
	`lock_¸óã
("console-lock-read");

427 i‡(
æk
 =
NULL
) {

428 
	`£m_de°roy
(
r£m
);

429 
	`£m_de°roy
(
w£m
);

430  
ENOMEM
;

432 
wlk
 = 
	`lock_¸óã
("console-lock-write");

433 i‡(
wlk
 =
NULL
) {

434 
	`lock_de°roy
(
æk
);

435 
	`£m_de°roy
(
r£m
);

436 
	`£m_de°roy
(
w£m
);

437  
ENOMEM
;

440 
cs
->
cs_r£m
 = 
r£m
;

441 
cs
->
cs_w£m
 = 
w£m
;

442 
cs
->
cs_gŸch¨s_hód
 = 0;

443 
cs
->
cs_gŸch¨s_èû
 = 0;

445 
the_c⁄sﬁe
 = 
cs
;

446 
c⁄_u£æock_ªad
 = 
æk
;

447 
c⁄_u£æock_wrôe
 = 
wlk
;

449 
	`Êush_dñay_buf
();

451  
	`©èch_c⁄sﬁe_to_vfs
(
cs
);

452 
	}
}

	@dev/generic/console.h

30 #i‚de‡
_GENERIC_CONSOLE_H_


31 
	#_GENERIC_CONSOLE_H_


	)

40 
	#CONSOLE_INPUT_BUFFER_SIZE
 32

	)

42 
	sc⁄_so·c
 {

44 *
	mcs_devd©a
;

45 (*
	mcs_£nd
)(*
	mdevd©a
, 
	mch
);

46 (*
	mcs_£ndpﬁÀd
)(*
	mdevd©a
, 
	mch
);

47 (*
	mcs_°¨çﬁlög
)(*
	mdevd©a
);

48 (*
	mcs_ídpﬁlög
)(*
	mdevd©a
);

51 
£m≠h‹e
 *
	mcs_r£m
;

52 
£m≠h‹e
 *
	mcs_w£m
;

53 
	mcs_gŸch¨s
[
CONSOLE_INPUT_BUFFER_SIZE
];

54 
	mcs_gŸch¨s_hód
;

55 
	mcs_gŸch¨s_èû
;

61 
c⁄_öput
–*
cs
, 
ch
);

62 
c⁄_°¨t
–*
cs
);

	@dev/generic/random.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<kîn/f˙é.h
>

33 
	~<lib.h
>

34 
	~<uio.h
>

35 
	~<vfs.h
>

36 
	~<gíîic/øndom.h
>

37 
	~"autoc⁄f.h
"

50 
øndom_so·c
 *
	gthe_øndom
 = 
NULL
;

58 
	$ønd›í
(
devi˚
 *
dev
, 
›íÊags
)

60 ()
dev
;

62 i‡(
›íÊags
 !
O_RDONLY
) {

63  
EIO
;

67 
	}
}

74 
	$ønd˛o£
(
devi˚
 *
dev
)

76 ()
dev
;

78 
	}
}

85 
	$øndio
(
devi˚
 *
dev
, 
uio
 *uio)

87 
øndom_so·c
 *
rs
 = 
dev
->
d_d©a
;

89 i‡(
uio
->
uio_rw
 !
UIO_READ
) {

90  
EIO
;

93  
rs
->
	`rs_ªad
‘s->
rs_devd©a
, 
uio
);

94 
	}
}

101 
	$øndio˘l
(
devi˚
 *
dev
, 
›
, 
u£Ωå_t
 
d©a
)

106 ()
dev
;

107 ()
›
;

108 ()
d©a
;

109  
EIOCTL
;

110 
	}
}

116 
	$c⁄fig_øndom
(
øndom_so·c
 *
rs
, 
unô
)

118 
ªsu…
;

121 i‡(
unô
!=0) {

122  
ENODEV
;

125 
	`KASSERT
(
the_øndom
==
NULL
);

126 
the_øndom
 = 
rs
;

128 
rs
->
rs_dev
.
d_›í
 = 
ønd›í
;

129 
rs
->
rs_dev
.
d_˛o£
 = 
ønd˛o£
;

130 
rs
->
rs_dev
.
d_io
 = 
øndio
;

131 
rs
->
rs_dev
.
d_io˘l
 = 
øndio˘l
;

132 
rs
->
rs_dev
.
d_blocks
 = 0;

133 
rs
->
rs_dev
.
d_blocksize
 = 1;

134 
rs
->
rs_dev
.
d_d©a
 =Ñs;

137 
ªsu…
 = 
	`vfs_adddev
("øndom", &
rs
->
rs_dev
, 0);

138 i‡(
ªsu…
) {

139  
ªsu…
;

143 
	}
}

150 
uöt32_t


151 
	$øndom
()

153 i‡(
the_øndom
==
NULL
) {

154 
	`∑nic
("NoÑandom device\n");

156  
the_øndom
->
	`rs_øndom
—he_øndom->
rs_devd©a
);

157 
	}
}

159 
uöt32_t


160 
	$øndmax
()

162 i‡(
the_øndom
==
NULL
) {

163 
	`∑nic
("NoÑandom device\n");

165  
the_øndom
->
	`rs_øndmax
—he_øndom->
rs_devd©a
);

166 
	}
}

	@dev/generic/random.h

30 #i‚de‡
_GENERIC_RANDOM_H_


31 
	#_GENERIC_RANDOM_H_


	)

33 
	~<devi˚.h
>

34 
	guio
;

36 
	søndom_so·c
 {

38 *
	mrs_devd©a
;

39 
uöt32_t
 (*
rs_øndom
)(*
	mdevd©a
);

40 
uöt32_t
 (*
rs_øndmax
)(*
	mdevd©a
);

41 (*
	mrs_ªad
)(*
	mdevd©a
, 
uio
 *
	muio
);

43 
devi˚
 
	mrs_dev
;

	@dev/generic/rtclock.c

43 
	~<ty≥s.h
>

44 
	~<kîn/î∫o.h
>

45 
	~<lib.h
>

46 
	~<˛ock.h
>

47 
	~<gíîic/π˛ock.h
>

48 
	~"autoc⁄f.h
"

50 
π˛ock_so·c
 *
	gthe_˛ock
 = 
NULL
;

53 
	$c⁄fig_π˛ock
(
π˛ock_so·c
 *
πc
, 
unô
)

56 i‡(
unô
!=0) {

57  
ENODEV
;

60 
	`KASSERT
(
the_˛ock
==
NULL
);

61 
the_˛ock
 = 
πc
;

63 
	}
}

66 
	$gëtime
(
time_t
 *
£cs
, 
uöt32_t
 *
n£cs
)

68 
	`KASSERT
(
the_˛ock
!=
NULL
);

69 
the_˛ock
->
	`πc_gëtime
—he_˛ock->
πc_devd©a
, 
£cs
, 
n£cs
);

70 
	}
}

	@dev/generic/rtclock.h

30 #i‚de‡
_GENERIC_RTCLOCK_H_


31 
	#_GENERIC_RTCLOCK_H_


	)

38 
	sπ˛ock_so·c
 {

39 *
	mπc_devd©a
;

41 (*
	mπc_gëtime
)(*
	mdevd©a
, 
time_t
 *
	m£cs
, 
uöt32_t
 *
	mn£cs
);

	@dev/lamebus/beep_ltimer.c

35 
	~<ty≥s.h
>

36 
	~<lib.h
>

37 
	~<gíîic/bìp.h
>

38 
	~<œmebus/…imî.h
>

39 
	~"autoc⁄f.h
"

41 
bìp_so·c
 *

42 
	$©èch_bìp_to_…imî
(
bì≤o
, 
…imî_so·c
 *
ls
)

44 
bìp_so·c
 *
bs
 = 
	`kmÆloc
((beep_softc));

45 i‡(
bs
==
NULL
) {

46  
NULL
;

49 ()
bì≤o
;

51 
bs
->
bs_devd©a
 = 
ls
;

52 
bs
->
bs_bìp
 = 
…imî_bìp
;

54  
bs
;

55 
	}
}

	@dev/lamebus/con_lscreen.c

35 
	~<ty≥s.h
>

36 
	~<lib.h
>

37 
	~<gíîic/c⁄sﬁe.h
>

38 
	~<œmebus/ls¸ìn.h
>

39 
	~"autoc⁄f.h
"

41 
c⁄_so·c
 *

42 
	$©èch_c⁄_to_ls¸ìn
(
c⁄¢o
, 
ls¸ìn_so·c
 *
ls
)

44 
c⁄_so·c
 *
cs
 = 
	`kmÆloc
((con_softc));

45 i‡(
cs
==
NULL
) {

46  
NULL
;

49 
cs
->
cs_devd©a
 = 
ls
;

50 
cs
->
cs_£nd
 = 
ls¸ìn_wrôe
;

51 
cs
->
cs_£ndpﬁÀd
 = 
ls¸ìn_wrôe
;

52 
cs
->
cs_°¨çﬁlög
 = 
NULL
;

53 
cs
->
cs_ídpﬁlög
 = 
NULL
;

55 
ls
->
ls_devd©a
 = 
cs
;

56 
ls
->
ls_°¨t
 = 
c⁄_°¨t
;

57 
ls
->
ls_öput
 = 
c⁄_öput
;

59  
cs
;

60 
	}
}

	@dev/lamebus/con_lser.c

35 
	~<ty≥s.h
>

36 
	~<lib.h
>

37 
	~<gíîic/c⁄sﬁe.h
>

38 
	~<œmebus/l£r.h
>

39 
	~"autoc⁄f.h
"

41 
c⁄_so·c
 *

42 
	$©èch_c⁄_to_l£r
(
c⁄¢o
, 
l£r_so·c
 *
ls
)

44 
c⁄_so·c
 *
cs
 = 
	`kmÆloc
((con_softc));

45 i‡(
cs
==
NULL
) {

46  
NULL
;

49 ()
c⁄¢o
;

51 
cs
->
cs_devd©a
 = 
ls
;

52 
cs
->
cs_£nd
 = 
l£r_wrôe
;

53 
cs
->
cs_£ndpﬁÀd
 = 
l£r_wrôïﬁÀd
;

54 
cs
->
cs_°¨çﬁlög
 = 
l£r_°¨çﬁlög
;

55 
cs
->
cs_ídpﬁlög
 = 
l£r_ídpﬁlög
;

57 
ls
->
ls_devd©a
 = 
cs
;

58 
ls
->
ls_°¨t
 = 
c⁄_°¨t
;

59 
ls
->
ls_öput
 = 
c⁄_öput
;

61  
cs
;

62 
	}
}

	@dev/lamebus/emu.c

43 
	~<ty≥s.h
>

44 
	~<kîn/î∫o.h
>

45 
	~<kîn/f˙é.h
>

46 
	~<°©.h
>

47 
	~<lib.h
>

48 
	~<¨øy.h
>

49 
	~<uio.h
>

50 
	~<synch.h
>

51 
	~<œmebus/emu.h
>

52 
	~<∂©f‹m/bus.h
>

53 
	~<vfs.h
>

54 
	~<emufs.h
>

55 
	~"autoc⁄f.h
"

58 
	#REG_HANDLE
 0

	)

59 
	#REG_OFFSET
 4

	)

60 
	#REG_IOLEN
 8

	)

61 
	#REG_OPER
 12

	)

62 
	#REG_RESULT
 16

	)

65 
	#EMU_BUFFER
 32768

	)

68 
	#EMU_OP_OPEN
 1

	)

69 
	#EMU_OP_CREATE
 2

	)

70 
	#EMU_OP_EXCLCREATE
 3

	)

71 
	#EMU_OP_CLOSE
 4

	)

72 
	#EMU_OP_READ
 5

	)

73 
	#EMU_OP_READDIR
 6

	)

74 
	#EMU_OP_WRITE
 7

	)

75 
	#EMU_OP_GETSIZE
 8

	)

76 
	#EMU_OP_TRUNC
 9

	)

79 
	#EMU_RES_SUCCESS
 1

	)

80 
	#EMU_RES_BADHANDLE
 2

	)

81 
	#EMU_RES_BADOP
 3

	)

82 
	#EMU_RES_BADPATH
 4

	)

83 
	#EMU_RES_BADSIZE
 5

	)

84 
	#EMU_RES_EXISTS
 6

	)

85 
	#EMU_RES_ISDIR
 7

	)

86 
	#EMU_RES_MEDIA
 8

	)

87 
	#EMU_RES_NOHANDLES
 9

	)

88 
	#EMU_RES_NOSPACE
 10

	)

89 
	#EMU_RES_NOTDIR
 11

	)

90 
	#EMU_RES_UNKNOWN
 12

	)

91 
	#EMU_RES_UNSUPP
 13

	)

102 
ölöe


103 
uöt32_t


104 
	$emu_ºeg
(
emu_so·c
 *
sc
, 
uöt32_t
 
ªg
)

106  
	`bus_ªad_ªgi°î
(
sc
->
e_busd©a
, sc->
e_bu•os
, 
ªg
);

107 
	}
}

113 
ölöe


115 
	$emu_wªg
(
emu_so·c
 *
sc
, 
uöt32_t
 
ªg
, uöt32_à
vÆ
)

117 
	`bus_wrôe_ªgi°î
(
sc
->
e_busd©a
, sc->
e_bu•os
, 
ªg
, 
vÆ
);

118 
	}
}

124 
	$emu_úq
(*
dev
)

126 
emu_so·c
 *
sc
 = 
dev
;

128 
sc
->
e_ªsu…
 = 
	`emu_ºeg
(sc, 
REG_RESULT
);

129 
	`emu_wªg
(
sc
, 
REG_RESULT
, 0);

131 
	`V
(
sc
->
e_£m
);

132 
	}
}

139 
uöt32_t


140 
	$å™¶©e_îr
(
emu_so·c
 *
sc
, 
uöt32_t
 
code
)

142 
code
) {

143 
EMU_RES_SUCCESS
:  0;

144 
EMU_RES_BADHANDLE
:

145 
EMU_RES_BADOP
:

146 
EMU_RES_BADSIZE
:

147 
	`∑nic
("emu%d: gŸ f©ÆÑesu… codê%d\n", 
sc
->
e_unô
, 
code
);

148 
EMU_RES_BADPATH
:  
ENOENT
;

149 
EMU_RES_EXISTS
:  
EEXIST
;

150 
EMU_RES_ISDIR
:  
EISDIR
;

151 
EMU_RES_MEDIA
:  
EIO
;

152 
EMU_RES_NOHANDLES
:  
ENFILE
;

153 
EMU_RES_NOSPACE
:  
ENOSPC
;

154 
EMU_RES_NOTDIR
:  
ENOTDIR
;

155 
EMU_RES_UNKNOWN
:  
EIO
;

156 
EMU_RES_UNSUPP
:  
EUNIMP
;

158 
	`k¥ötf
("emu%d: Unknow¿ªsu… codê%d\n", 
sc
->
e_unô
, 
code
);

159  
EAGAIN
;

160 
	}
}

167 
	$emu_waôd⁄e
(
emu_so·c
 *
sc
)

169 
	`P
(
sc
->
e_£m
);

170  
	`å™¶©e_îr
(
sc
, sc->
e_ªsu…
);

171 
	}
}

181 
	$emu_›í
(
emu_so·c
 *
sc
, 
uöt32_t
 
h™dÀ
, c⁄° *
«me
,

182 
boﬁ
 
¸óã
, boﬁ 
ex˛
, 
mode_t
 
mode
,

183 
uöt32_t
 *
√wh™dÀ
, *
√wisdú
)

185 
uöt32_t
 
›
;

186 
ªsu…
;

188 i‡(
	`°æí
(
«me
)+1 > 
EMU_MAXIO
) {

189  
ENAMETOOLONG
;

192 i‡(
¸óã
 && 
ex˛
) {

193 
›
 = 
EMU_OP_EXCLCREATE
;

195 i‡(
¸óã
) {

196 
›
 = 
EMU_OP_CREATE
;

199 
›
 = 
EMU_OP_OPEN
;

203 ()
mode
;

205 
	`lock_acquúe
(
sc
->
e_lock
);

207 
	`°r˝y
(
sc
->
e_iobuf
, 
«me
);

208 
	`emu_wªg
(
sc
, 
REG_IOLEN
, 
	`°æí
(
«me
));

209 
	`emu_wªg
(
sc
, 
REG_HANDLE
, 
h™dÀ
);

210 
	`emu_wªg
(
sc
, 
REG_OPER
, 
›
);

211 
ªsu…
 = 
	`emu_waôd⁄e
(
sc
);

213 i‡(
ªsu…
==0) {

214 *
√wh™dÀ
 = 
	`emu_ºeg
(
sc
, 
REG_HANDLE
);

215 *
√wisdú
 = 
	`emu_ºeg
(
sc
, 
REG_IOLEN
)>0;

218 
	`lock_ªÀa£
(
sc
->
e_lock
);

219  
ªsu…
;

220 
	}
}

229 
	$emu_˛o£
(
emu_so·c
 *
sc
, 
uöt32_t
 
h™dÀ
)

231 
ªsu…
;

232 
boﬁ
 
möe
;

233 
ªåõs
 = 0;

235 
möe
 = 
	`lock_do_i_hﬁd
(
sc
->
e_lock
);

236 i‡(!
möe
) {

237 
	`lock_acquúe
(
sc
->
e_lock
);

243 
	`emu_wªg
(
sc
, 
REG_HANDLE
, 
h™dÀ
);

244 
	`emu_wªg
(
sc
, 
REG_OPER
, 
EMU_OP_CLOSE
);

245 
ªsu…
 = 
	`emu_waôd⁄e
(
sc
);

247 i‡(
ªsu…
==
EIO
 && 
ªåõs
 < 10) {

248 
	`k¥ötf
("emu%d: I/OÉrror on close,Ñetrying\n",

249 
sc
->
e_unô
);

250 
ªåõs
++;

256 i‡(!
möe
) {

257 
	`lock_ªÀa£
(
sc
->
e_lock
);

259  
ªsu…
;

260 
	}
}

267 
	$emu_d‹ód
(
emu_so·c
 *
sc
, 
uöt32_t
 
h™dÀ
, uöt32_à
Àn
,

268 
uöt32_t
 
›
, 
uio
 *uio)

270 
ªsu…
;

272 
	`KASSERT
(
uio
->
uio_rw
 =
UIO_READ
);

274 
	`lock_acquúe
(
sc
->
e_lock
);

276 
	`emu_wªg
(
sc
, 
REG_HANDLE
, 
h™dÀ
);

277 
	`emu_wªg
(
sc
, 
REG_IOLEN
, 
Àn
);

278 
	`emu_wªg
(
sc
, 
REG_OFFSET
, 
uio
->
uio_off£t
);

279 
	`emu_wªg
(
sc
, 
REG_OPER
, 
›
);

280 
ªsu…
 = 
	`emu_waôd⁄e
(
sc
);

281 i‡(
ªsu…
) {

282 
out
;

285 
ªsu…
 = 
	`uiomove
(
sc
->
e_iobuf
, 
	`emu_ºeg
(sc, 
REG_IOLEN
), 
uio
);

287 
uio
->
uio_off£t
 = 
	`emu_ºeg
(
sc
, 
REG_OFFSET
);

289 
out
:

290 
	`lock_ªÀa£
(
sc
->
e_lock
);

291  
ªsu…
;

292 
	}
}

299 
	$emu_ªad
(
emu_so·c
 *
sc
, 
uöt32_t
 
h™dÀ
, uöt32_à
Àn
,

300 
uio
 *uio)

302  
	`emu_d‹ód
(
sc
, 
h™dÀ
, 
Àn
, 
EMU_OP_READ
, 
uio
);

303 
	}
}

310 
	$emu_ªaddú
(
emu_so·c
 *
sc
, 
uöt32_t
 
h™dÀ
, uöt32_à
Àn
,

311 
uio
 *uio)

313  
	`emu_d‹ód
(
sc
, 
h™dÀ
, 
Àn
, 
EMU_OP_READDIR
, 
uio
);

314 
	}
}

321 
	$emu_wrôe
(
emu_so·c
 *
sc
, 
uöt32_t
 
h™dÀ
, uöt32_à
Àn
,

322 
uio
 *uio)

324 
ªsu…
;

326 
	`KASSERT
(
uio
->
uio_rw
 =
UIO_WRITE
);

328 
	`lock_acquúe
(
sc
->
e_lock
);

330 
	`emu_wªg
(
sc
, 
REG_HANDLE
, 
h™dÀ
);

331 
	`emu_wªg
(
sc
, 
REG_IOLEN
, 
Àn
);

332 
	`emu_wªg
(
sc
, 
REG_OFFSET
, 
uio
->
uio_off£t
);

334 
ªsu…
 = 
	`uiomove
(
sc
->
e_iobuf
, 
Àn
, 
uio
);

335 i‡(
ªsu…
) {

336 
out
;

339 
	`emu_wªg
(
sc
, 
REG_OPER
, 
EMU_OP_WRITE
);

340 
ªsu…
 = 
	`emu_waôd⁄e
(
sc
);

342 
out
:

343 
	`lock_ªÀa£
(
sc
->
e_lock
);

344  
ªsu…
;

345 
	}
}

352 
	$emu_gësize
(
emu_so·c
 *
sc
, 
uöt32_t
 
h™dÀ
, 
off_t
 *
ªtvÆ
)

354 
ªsu…
;

356 
	`lock_acquúe
(
sc
->
e_lock
);

358 
	`emu_wªg
(
sc
, 
REG_HANDLE
, 
h™dÀ
);

359 
	`emu_wªg
(
sc
, 
REG_OPER
, 
EMU_OP_GETSIZE
);

360 
ªsu…
 = 
	`emu_waôd⁄e
(
sc
);

361 i‡(
ªsu…
==0) {

362 *
ªtvÆ
 = 
	`emu_ºeg
(
sc
, 
REG_IOLEN
);

365 
	`lock_ªÀa£
(
sc
->
e_lock
);

366  
ªsu…
;

367 
	}
}

374 
	$emu_åunc
(
emu_so·c
 *
sc
, 
uöt32_t
 
h™dÀ
, 
off_t
 
Àn
)

376 
ªsu…
;

378 
	`lock_acquúe
(
sc
->
e_lock
);

380 
	`emu_wªg
(
sc
, 
REG_HANDLE
, 
h™dÀ
);

381 
	`emu_wªg
(
sc
, 
REG_IOLEN
, 
Àn
);

382 
	`emu_wªg
(
sc
, 
REG_OPER
, 
EMU_OP_TRUNC
);

383 
ªsu…
 = 
	`emu_waôd⁄e
(
sc
);

385 
	`lock_ªÀa£
(
sc
->
e_lock
);

386  
ªsu…
;

387 
	}
}

399 
emufs_lﬂdvnode
(
emufs_fs
 *
ef
, 
uöt32_t
 
h™dÀ
, 
isdú
,

400 
emufs_vnode
 **
ªt
);

407 
	$emufs_›í
(
vnode
 *
v
, 
›íÊags
)

417 i‡(
›íÊags
 & 
O_APPEND
) {

418  
EUNIMP
;

421 ()
v
;

424 
	}
}

431 
	$emufs_›ídú
(
vnode
 *
v
, 
›íÊags
)

433 
›íÊags
 & 
O_ACCMODE
) {

434 
O_RDONLY
:

436 
O_WRONLY
:

437 
O_RDWR
:

439  
EISDIR
;

441 i‡(
›íÊags
 & 
O_APPEND
) {

442  
EISDIR
;

445 ()
v
;

447 
	}
}

454 
	$emufs_˛o£
(
vnode
 *
v
)

456 ()
v
;

458 
	}
}

467 
	$emufs_ª˛aim
(
vnode
 *
v
)

469 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

470 
emufs_fs
 *
ef
 = 
v
->
vn_fs
->
fs_d©a
;

471 
ix
, 
i
, 
num
;

472 
ªsu…
;

479 
	`vfs_biglock_acquúe
();

480 
	`lock_acquúe
(
ef
->
ef_emu
->
e_lock
);

482 i‡(
ev
->
ev_v
.
vn_ªfcou¡
 != 1) {

483 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

484 
	`vfs_biglock_ªÀa£
();

485  
EBUSY
;

489 
ªsu…
 = 
	`emu_˛o£
(
ev
->
ev_emu
,Év->
ev_h™dÀ
);

490 i‡(
ªsu…
) {

491 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

492 
	`vfs_biglock_ªÀa£
();

493  
ªsu…
;

496 
num
 = 
	`vnodóºay_num
(
ef
->
ef_vnodes
);

497 
ix
 = 
num
;

498 
i
=0; i<
num
; i++) {

499 
vnode
 *
vx
;

501 
vx
 = 
	`vnodóºay_gë
(
ef
->
ef_vnodes
, 
i
);

502 i‡(
vx
 =
v
) {

503 
ix
 = 
i
;

507 i‡(
ix
 =
num
) {

508 
	`∑nic
("emu%d:Ñeclaim vnode %uÇot in vnodeÖool\n",

509 
ef
->
ef_emu
->
e_unô
, 
ev
->
ev_h™dÀ
);

512 
	`vnodóºay_ªmove
(
ef
->
ef_vnodes
, 
ix
);

513 
	`VOP_CLEANUP
(&
ev
->
ev_v
);

515 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

516 
	`vfs_biglock_ªÀa£
();

518 
	`k‰ì
(
ev
);

520 
	}
}

527 
	$emufs_ªad
(
vnode
 *
v
, 
uio
 *uio)

529 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

530 
uöt32_t
 
amt
;

531 
size_t
 
ﬁdªsid
;

532 
ªsu…
;

534 
	`KASSERT
(
uio
->
uio_rw
==
UIO_READ
);

536 
uio
->
uio_ªsid
 > 0) {

537 
amt
 = 
uio
->
uio_ªsid
;

538 i‡(
amt
 > 
EMU_MAXIO
) {

539 
amt
 = 
EMU_MAXIO
;

542 
ﬁdªsid
 = 
uio
->
uio_ªsid
;

544 
ªsu…
 = 
	`emu_ªad
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, 
amt
, 
uio
);

545 i‡(
ªsu…
) {

546  
ªsu…
;

549 i‡(
uio
->
uio_ªsid
 =
ﬁdªsid
) {

556 
	}
}

563 
	$emufs_gëdúíåy
(
vnode
 *
v
, 
uio
 *uio)

565 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

566 
uöt32_t
 
amt
;

568 
	`KASSERT
(
uio
->
uio_rw
==
UIO_READ
);

570 
amt
 = 
uio
->
uio_ªsid
;

571 i‡(
amt
 > 
EMU_MAXIO
) {

572 
amt
 = 
EMU_MAXIO
;

575  
	`emu_ªaddú
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, 
amt
, 
uio
);

576 
	}
}

583 
	$emufs_wrôe
(
vnode
 *
v
, 
uio
 *uio)

585 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

586 
uöt32_t
 
amt
;

587 
size_t
 
ﬁdªsid
;

588 
ªsu…
;

590 
	`KASSERT
(
uio
->
uio_rw
==
UIO_WRITE
);

592 
uio
->
uio_ªsid
 > 0) {

593 
amt
 = 
uio
->
uio_ªsid
;

594 i‡(
amt
 > 
EMU_MAXIO
) {

595 
amt
 = 
EMU_MAXIO
;

598 
ﬁdªsid
 = 
uio
->
uio_ªsid
;

600 
ªsu…
 = 
	`emu_wrôe
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, 
amt
, 
uio
);

601 i‡(
ªsu…
) {

602  
ªsu…
;

605 i‡(
uio
->
uio_ªsid
 =
ﬁdªsid
) {

612 
	}
}

619 
	$emufs_io˘l
(
vnode
 *
v
, 
›
, 
u£Ωå_t
 
d©a
)

625 ()
v
;

626 ()
›
;

627 ()
d©a
;

629  
EINVAL
;

630 
	}
}

637 
	$emufs_°©
(
vnode
 *
v
, 
°©
 *
°©buf
)

639 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

640 
ªsu…
;

642 
	`bzîo
(
°©buf
, (
°©
));

644 
ªsu…
 = 
	`emu_gësize
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, &
°©buf
->
°_size
);

645 i‡(
ªsu…
) {

646  
ªsu…
;

649 
ªsu…
 = 
	`VOP_GETTYPE
(
v
, &
°©buf
->
°_mode
);

650 i‡(
ªsu…
) {

651  
ªsu…
;

653 
°©buf
->
°_mode
 |= 0644;

654 
°©buf
->
°_∆ök
 = 1;

655 
°©buf
->
°_blocks
 = 0;

658 
	}
}

665 
	$emufs_fûe_gëty≥
(
vnode
 *
v
, 
uöt32_t
 *
ªsu…
)

667 ()
v
;

668 *
ªsu…
 = 
S_IFREG
;

670 
	}
}

677 
	$emufs_dú_gëty≥
(
vnode
 *
v
, 
uöt32_t
 *
ªsu…
)

679 ()
v
;

680 *
ªsu…
 = 
S_IFDIR
;

682 
	}
}

689 
	$emufs_åy£ek
(
vnode
 *
v
, 
off_t
 
pos
)

691 i‡(
pos
<0) {

692  
EINVAL
;

696 ()
v
;

699 
	}
}

706 
	$emufs_fsync
(
vnode
 *
v
)

708 ()
v
;

710 
	}
}

717 
	$emufs_åunˇã
(
vnode
 *
v
, 
off_t
 
Àn
)

719 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

720  
	`emu_åunc
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, 
Àn
);

721 
	}
}

728 
	$emufs_¸ót
(
vnode
 *
dú
, c⁄° *
«me
, 
boﬁ
 
ex˛
, 
mode_t
 
mode
,

729 
vnode
 **
ªt
)

731 
emufs_vnode
 *
ev
 = 
dú
->
vn_d©a
;

732 
emufs_fs
 *
ef
 = 
dú
->
vn_fs
->
fs_d©a
;

733 
emufs_vnode
 *
√wguy
;

734 
uöt32_t
 
h™dÀ
;

735 
ªsu…
;

736 
isdú
;

738 
ªsu…
 = 
	`emu_›í
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, 
«me
, 
åue
, 
ex˛
, 
mode
,

739 &
h™dÀ
, &
isdú
);

740 i‡(
ªsu…
) {

741  
ªsu…
;

744 
ªsu…
 = 
	`emufs_lﬂdvnode
(
ef
, 
h™dÀ
, 
isdú
, &
√wguy
);

745 i‡(
ªsu…
) {

746 
	`emu_˛o£
(
ev
->
ev_emu
, 
h™dÀ
);

747  
ªsu…
;

750 *
ªt
 = &
√wguy
->
ev_v
;

752 
	}
}

759 
	$emufs_lookup
(
vnode
 *
dú
, *
∑th«me
, vnodê**
ªt
)

761 
emufs_vnode
 *
ev
 = 
dú
->
vn_d©a
;

762 
emufs_fs
 *
ef
 = 
dú
->
vn_fs
->
fs_d©a
;

763 
emufs_vnode
 *
√wguy
;

764 
uöt32_t
 
h™dÀ
;

765 
ªsu…
;

766 
isdú
;

768 
ªsu…
 = 
	`emu_›í
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, 
∑th«me
, 
Ál£
, false, 0,

769 &
h™dÀ
, &
isdú
);

770 i‡(
ªsu…
) {

771  
ªsu…
;

774 
ªsu…
 = 
	`emufs_lﬂdvnode
(
ef
, 
h™dÀ
, 
isdú
, &
√wguy
);

775 i‡(
ªsu…
) {

776 
	`emu_˛o£
(
ev
->
ev_emu
, 
h™dÀ
);

777  
ªsu…
;

780 *
ªt
 = &
√wguy
->
ev_v
;

782 
	}
}

789 
	$emufs_look∑ª¡
(
vnode
 *
dú
, *
∑th«me
, vnodê**
ªt
,

790 *
buf
, 
size_t
 
Àn
)

792 *
s
;

794 
s
 = 
	`°ºchr
(
∑th«me
, '/');

795 i‡(
s
==
NULL
) {

797 i‡(
	`°æí
(
∑th«me
)+1 > 
Àn
) {

798  
ENAMETOOLONG
;

800 
	`VOP_INCREF
(
dú
);

801 *
ªt
 = 
dú
;

802 
	`°r˝y
(
buf
, 
∑th«me
);

806 *
s
 = 0;

807 
s
++;

808 i‡(
	`°æí
(
s
)+1 > 
Àn
) {

809  
ENAMETOOLONG
;

811 
	`°r˝y
(
buf
, 
s
);

813  
	`emufs_lookup
(
dú
, 
∑th«me
, 
ªt
);

814 
	}
}

821 
	$emufs_«mefûe
(
vnode
 *
v
, 
uio
 *uio)

823 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

824 
emufs_fs
 *
ef
 = 
v
->
vn_fs
->
fs_d©a
;

826 i‡(
ev
 =
ef
->
ef_roŸ
) {

833 ()
uio
;

835  
EUNIMP
;

836 
	}
}

843 
	$emufs_mm≠
(
vnode
 *
v
)

845 ()
v
;

846  
EUNIMP
;

847 
	}
}

857 
	$emufs_dú_åy£ek
(
vnode
 *
v
, 
off_t
 
pos
)

859 ()
v
;

860 ()
pos
;

861  
EUNIMP
;

862 
	}
}

866 
	$emufs_symlök
(
vnode
 *
v
, c⁄° *
c⁄ã¡s
, c⁄° *
«me
)

868 ()
v
;

869 ()
c⁄ã¡s
;

870 ()
«me
;

871  
EUNIMP
;

872 
	}
}

876 
	$emufs_mkdú
(
vnode
 *
v
, c⁄° *
«me
, 
mode_t
 
mode
)

878 ()
v
;

879 ()
«me
;

880 ()
mode
;

881  
EUNIMP
;

882 
	}
}

886 
	$emufs_lök
(
vnode
 *
v
, c⁄° *
«me
, vnodê*
èrgë
)

888 ()
v
;

889 ()
«me
;

890 ()
èrgë
;

891  
EUNIMP
;

892 
	}
}

896 
	$emufs_ªmove
(
vnode
 *
v
, c⁄° *
«me
)

898 ()
v
;

899 ()
«me
;

900  
EUNIMP
;

901 
	}
}

905 
	$emufs_rmdú
(
vnode
 *
v
, c⁄° *
«me
)

907 ()
v
;

908 ()
«me
;

909  
EUNIMP
;

910 
	}
}

914 
	$emufs_ª«me
(
vnode
 *
v1
, c⁄° *
n1
,

915 
vnode
 *
v2
, c⁄° *
n2
)

917 ()
v1
;

918 ()
n1
;

919 ()
v2
;

920 ()
n2
;

921  
EUNIMP
;

922 
	}
}

941 
	$emufs_void_›_isdú
(
vnode
 *
v
)

943 ()
v
;

944  
EISDIR
;

945 
	}
}

949 
	$emufs_uio_›_isdú
(
vnode
 *
v
, 
uio
 *uio)

951 ()
v
;

952 ()
uio
;

953  
EISDIR
;

954 
	}
}

958 
	$emufs_uio_›_nŸdú
(
vnode
 *
v
, 
uio
 *uio)

960 ()
v
;

961 ()
uio
;

962  
ENOTDIR
;

963 
	}
}

967 
	$emufs_«me_›_nŸdú
(
vnode
 *
v
, c⁄° *
«me
)

969 ()
v
;

970 ()
«me
;

971  
ENOTDIR
;

972 
	}
}

976 
	$emufs_ªadlök_nŸlök
(
vnode
 *
v
, 
uio
 *uio)

978 ()
v
;

979 ()
uio
;

980  
EINVAL
;

981 
	}
}

985 
	$emufs_¸ót_nŸdú
(
vnode
 *
v
, c⁄° *
«me
, 
boﬁ
 
ex˛
, 
mode_t
 
mode
,

986 
vnode
 **
ªtvÆ
)

988 ()
v
;

989 ()
«me
;

990 ()
ex˛
;

991 ()
mode
;

992 ()
ªtvÆ
;

993  
ENOTDIR
;

994 
	}
}

998 
	$emufs_symlök_nŸdú
(
vnode
 *
v
, c⁄° *
c⁄ã¡s
, c⁄° *
«me
)

1000 ()
v
;

1001 ()
c⁄ã¡s
;

1002 ()
«me
;

1003  
ENOTDIR
;

1004 
	}
}

1008 
	$emufs_mkdú_nŸdú
(
vnode
 *
v
, c⁄° *
«me
, 
mode_t
 
mode
)

1010 ()
v
;

1011 ()
«me
;

1012 ()
mode
;

1013  
ENOTDIR
;

1014 
	}
}

1018 
	$emufs_lök_nŸdú
(
vnode
 *
v
, c⁄° *
«me
, vnodê*
èrgë
)

1020 ()
v
;

1021 ()
«me
;

1022 ()
èrgë
;

1023  
ENOTDIR
;

1024 
	}
}

1028 
	$emufs_ª«me_nŸdú
(
vnode
 *
v1
, c⁄° *
n1
,

1029 
vnode
 *
v2
, c⁄° *
n2
)

1031 ()
v1
;

1032 ()
n1
;

1033 ()
v2
;

1034 ()
n2
;

1035  
ENOTDIR
;

1036 
	}
}

1040 
	$emufs_lookup_nŸdú
(
vnode
 *
v
, *
∑th«me
, vnodê**
ªsu…
)

1042 ()
v
;

1043 ()
∑th«me
;

1044 ()
ªsu…
;

1045  
ENOTDIR
;

1046 
	}
}

1050 
	$emufs_look∑ª¡_nŸdú
(
vnode
 *
v
, *
∑th«me
, vnodê**
ªsu…
,

1051 *
buf
, 
size_t
 
Àn
)

1053 ()
v
;

1054 ()
∑th«me
;

1055 ()
ªsu…
;

1056 ()
buf
;

1057 ()
Àn
;

1058  
ENOTDIR
;

1059 
	}
}

1064 
	$emufs_åunˇã_isdú
(
vnode
 *
v
, 
off_t
 
Àn
)

1066 ()
v
;

1067 ()
Àn
;

1068  
ENOTDIR
;

1069 
	}
}

1076 c⁄° 
vnode_›s
 
	gemufs_fûe›s
 = {

1077 
VOP_MAGIC
,

1079 
emufs_›í
,

1080 
emufs_˛o£
,

1081 
emufs_ª˛aim
,

1083 
emufs_ªad
,

1084 
emufs_ªadlök_nŸlök
,

1085 
emufs_uio_›_nŸdú
,

1086 
emufs_wrôe
,

1087 
emufs_io˘l
,

1088 
emufs_°©
,

1089 
emufs_fûe_gëty≥
,

1090 
emufs_åy£ek
,

1091 
emufs_fsync
,

1092 
emufs_mm≠
,

1093 
emufs_åunˇã
,

1094 
emufs_uio_›_nŸdú
,

1096 
emufs_¸ót_nŸdú
,

1097 
emufs_symlök_nŸdú
,

1098 
emufs_mkdú_nŸdú
,

1099 
emufs_lök_nŸdú
,

1100 
emufs_«me_›_nŸdú
,

1101 
emufs_«me_›_nŸdú
,

1102 
emufs_ª«me_nŸdú
,

1104 
emufs_lookup_nŸdú
,

1105 
emufs_look∑ª¡_nŸdú
,

1111 c⁄° 
vnode_›s
 
	gemufs_dú›s
 = {

1112 
VOP_MAGIC
,

1114 
emufs_›ídú
,

1115 
emufs_˛o£
,

1116 
emufs_ª˛aim
,

1118 
emufs_uio_›_isdú
,

1119 
emufs_uio_›_isdú
,

1120 
emufs_gëdúíåy
,

1121 
emufs_uio_›_isdú
,

1122 
emufs_io˘l
,

1123 
emufs_°©
,

1124 
emufs_dú_gëty≥
,

1125 
emufs_dú_åy£ek
,

1126 
emufs_void_›_isdú
,

1127 
emufs_void_›_isdú
,

1128 
emufs_åunˇã_isdú
,

1129 
emufs_«mefûe
,

1131 
emufs_¸ót
,

1132 
emufs_symlök
,

1133 
emufs_mkdú
,

1134 
emufs_lök
,

1135 
emufs_ªmove
,

1136 
emufs_rmdú
,

1137 
emufs_ª«me
,

1139 
emufs_lookup
,

1140 
emufs_look∑ª¡
,

1148 
	$emufs_lﬂdvnode
(
emufs_fs
 *
ef
, 
uöt32_t
 
h™dÀ
, 
isdú
,

1149 
emufs_vnode
 **
ªt
)

1151 
vnode
 *
v
;

1152 
emufs_vnode
 *
ev
;

1153 
i
, 
num
;

1154 
ªsu…
;

1156 
	`vfs_biglock_acquúe
();

1157 
	`lock_acquúe
(
ef
->
ef_emu
->
e_lock
);

1159 
num
 = 
	`vnodóºay_num
(
ef
->
ef_vnodes
);

1160 
i
=0; i<
num
; i++) {

1161 
v
 = 
	`vnodóºay_gë
(
ef
->
ef_vnodes
, 
i
);

1162 
ev
 = 
v
->
vn_d©a
;

1163 i‡(
ev
->
ev_h™dÀ
 =
h™dÀ
) {

1166 
	`VOP_INCREF
(&
ev
->
ev_v
);

1168 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

1169 
	`vfs_biglock_ªÀa£
();

1170 *
ªt
 = 
ev
;

1177 
ev
 = 
	`kmÆloc
((
emufs_vnode
));

1178 i‡(
ev
==
NULL
) {

1179 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

1180  
ENOMEM
;

1183 
ev
->
ev_emu
 = 
ef
->
ef_emu
;

1184 
ev
->
ev_h™dÀ
 = 
h™dÀ
;

1186 
ªsu…
 = 
	`VOP_INIT
(&
ev
->
ev_v
, 
isdú
 ? &
emufs_dú›s
 : &
emufs_fûe›s
,

1187 &
ef
->
ef_fs
, 
ev
);

1188 i‡(
ªsu…
) {

1189 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

1190 
	`vfs_biglock_ªÀa£
();

1191 
	`k‰ì
(
ev
);

1192  
ªsu…
;

1195 
ªsu…
 = 
	`vnodóºay_add
(
ef
->
ef_vnodes
, &
ev
->
ev_v
, 
NULL
);

1196 i‡(
ªsu…
) {

1198 
	`VOP_CLEANUP
(&
ev
->
ev_v
);

1199 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

1200 
	`vfs_biglock_ªÀa£
();

1201 
	`k‰ì
(
ev
);

1202  
ªsu…
;

1205 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

1206 
	`vfs_biglock_ªÀa£
();

1208 *
ªt
 = 
ev
;

1210 
	}
}

1225 
	$emufs_sync
(
fs
 *fs)

1227 ()
fs
;

1229 
	}
}

1236 
	$emufs_gëvﬁ«me
(
fs
 *fs)

1239 ()
fs
;

1240  
NULL
;

1241 
	}
}

1247 
vnode
 *

1248 
	$emufs_gëroŸ
(
fs
 *fs)

1250 
emufs_fs
 *
ef
;

1252 
	`KASSERT
(
fs
 !
NULL
);

1254 
ef
 = 
fs
->
fs_d©a
;

1256 
	`KASSERT
(
ef
 !
NULL
);

1257 
	`KASSERT
(
ef
->
ef_roŸ
 !
NULL
);

1259 
	`VOP_INCREF
(&
ef
->
ef_roŸ
->
ev_v
);

1260  &
ef
->
ef_roŸ
->
ev_v
;

1261 
	}
}

1268 
	$emufs_unmou¡
(
fs
 *fs)

1271 ()
fs
;

1272  
EBUSY
;

1273 
	}
}

1284 
	$emufs_addtovfs
(
emu_so·c
 *
sc
, c⁄° *
dev«me
)

1286 
emufs_fs
 *
ef
;

1287 
ªsu…
;

1289 
ef
 = 
	`kmÆloc
((
emufs_fs
));

1290 i‡(
ef
==
NULL
) {

1291  
ENOMEM
;

1294 
ef
->
ef_fs
.
fs_sync
 = 
emufs_sync
;

1295 
ef
->
ef_fs
.
fs_gëvﬁ«me
 = 
emufs_gëvﬁ«me
;

1296 
ef
->
ef_fs
.
fs_gëroŸ
 = 
emufs_gëroŸ
;

1297 
ef
->
ef_fs
.
fs_unmou¡
 = 
emufs_unmou¡
;

1298 
ef
->
ef_fs
.
fs_d©a
 =Éf;

1300 
ef
->
ef_emu
 = 
sc
;

1301 
ef
->
ef_roŸ
 = 
NULL
;

1302 
ef
->
ef_vnodes
 = 
	`vnodóºay_¸óã
();

1303 i‡(
ef
->
ef_vnodes
 =
NULL
) {

1304 
	`k‰ì
(
ef
);

1305  
ENOMEM
;

1308 
ªsu…
 = 
	`emufs_lﬂdvnode
(
ef
, 
EMU_ROOTHANDLE
, 1, &ef->
ef_roŸ
);

1309 i‡(
ªsu…
) {

1310 
	`k‰ì
(
ef
);

1311  
ªsu…
;

1314 
	`KASSERT
(
ef
->
ef_roŸ
!=
NULL
);

1316 
ªsu…
 = 
	`vfs_addfs
(
dev«me
, &
ef
->
ef_fs
);

1317 i‡(
ªsu…
) {

1318 
	`VOP_DECREF
(&
ef
->
ef_roŸ
->
ev_v
);

1319 
	`k‰ì
(
ef
);

1321  
ªsu…
;

1322 
	}
}

1333 
	$c⁄fig_emu
(
emu_so·c
 *
sc
, 
emuno
)

1335 
«me
[32];

1337 
sc
->
e_lock
 = 
	`lock_¸óã
("emufs-lock");

1338 i‡(
sc
->
e_lock
 =
NULL
) {

1339  
ENOMEM
;

1341 
sc
->
e_£m
 = 
	`£m_¸óã
("emufs-sem", 0);

1342 i‡(
sc
->
e_£m
 =
NULL
) {

1343 
	`lock_de°roy
(
sc
->
e_lock
);

1344 
sc
->
e_lock
 = 
NULL
;

1345  
ENOMEM
;

1347 
sc
->
e_iobuf
 = 
	`bus_m≠_¨ó
(sc->
e_busd©a
, sc->
e_bu•os
, 
EMU_BUFFER
);

1349 
	`¢¥ötf
(
«me
, “ame), "emu%d", 
emuno
);

1351  
	`emufs_addtovfs
(
sc
, 
«me
);

1352 
	}
}

	@dev/lamebus/emu.h

30 #i‚de‡
_LAMEBUS_EMU_H_


31 
	#_LAMEBUS_EMU_H_


	)

34 
	#EMU_MAXIO
 16384

	)

35 
	#EMU_ROOTHANDLE
 0

	)

43 
	semu_so·c
 {

45 *
	me_busd©a
;

46 
uöt32_t
 
	me_bu•os
;

47 
	me_unô
;

50 
lock
 *
	me_lock
;

51 
£m≠h‹e
 *
	me_£m
;

52 *
	me_iobuf
;

55 
uöt32_t
 
	me_ªsu…
;

59 
emu_úq
( *);

	@dev/lamebus/emu_att.c

34 
	~<ty≥s.h
>

35 
	~<lib.h
>

36 
	~<œmebus/œmebus.h
>

37 
	~<œmebus/emu.h
>

38 
	~"autoc⁄f.h
"

41 
	#LOW_VERSION
 1

	)

43 
	#HIGH_VERSION
 1

	)

45 
emu_so·c
 *

46 
	$©èch_emu_to_œmebus
(
emuno
, 
œmebus_so·c
 *
sc
)

48 
emu_so·c
 *
es
;

49 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_EMUFS
,

50 
LOW_VERSION
, 
HIGH_VERSION
);

51 i‡(
¶Ÿ
 < 0) {

52  
NULL
;

55 
es
 = 
	`kmÆloc
((
emu_so·c
));

56 i‡(
es
==
NULL
) {

57  
NULL
;

60 
es
->
e_busd©a
 = 
sc
;

61 
es
->
e_bu•os
 = 
¶Ÿ
;

62 
es
->
e_unô
 = 
emuno
;

64 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

65 
	`œmebus_©èch_öãºu±
(
sc
, 
¶Ÿ
, 
es
, 
emu_úq
);

67  
es
;

68 
	}
}

	@dev/lamebus/lamebus.c

34 
	~<ty≥s.h
>

35 
	~<lib.h
>

36 
	~<˝u.h
>

37 
	~<•ölock.h
>

38 
	~<cuºít.h
>

39 
	~<œmebus/œmebus.h
>

42 
	#CFGREG_VID
 0

	)

43 
	#CFGREG_DID
 4

	)

44 
	#CFGREG_DRL
 8

	)

47 
	#CTLREG_RAMSZ
 0x200

	)

48 
	#CTLREG_IRQS
 0x204

	)

49 
	#CTLREG_PWR
 0x208

	)

50 
	#CTLREG_IRQE
 0x20c

	)

51 
	#CTLREG_CPUS
 0x210

	)

52 
	#CTLREG_CPUE
 0x214

	)

53 
	#CTLREG_SELF
 0x218

	)

56 
	#CTLCPU_CIRQE
 0x000

	)

57 
	#CTLCPU_CIPI
 0x004

	)

58 
	#CTLCPU_CRAM
 0x300

	)

65 
ölöe


66 
uöt32_t


67 
	$ªad_cfg_ªgi°î
(
œmebus_so·c
 *
lb
, 
¶Ÿ
, 
uöt32_t
 
off£t
)

70 
off£t
 +
LB_CONFIG_SIZE
*
¶Ÿ
;

71  
	`œmebus_ªad_ªgi°î
(
lb
, 
LB_CONTROLLER_SLOT
, 
off£t
);

72 
	}
}

78 
ölöe


80 
	$wrôe_cfg_ªgi°î
(
œmebus_so·c
 *
lb
, 
¶Ÿ
, 
uöt32_t
 
off£t
,

81 
uöt32_t
 
vÆ
)

83 
off£t
 +
LB_CONFIG_SIZE
*
¶Ÿ
;

84 
	`œmebus_wrôe_ªgi°î
(
lb
, 
LB_CONTROLLER_SLOT
, 
off£t
, 
vÆ
);

85 
	}
}

91 
ölöe


92 
uöt32_t


93 
	$ªad_˘l_ªgi°î
(
œmebus_so·c
 *
lb
, 
uöt32_t
 
off£t
)

96  
	`ªad_cfg_ªgi°î
(
lb
, 
LB_CONTROLLER_SLOT
, 
off£t
);

97 
	}
}

103 
ölöe


105 
	$wrôe_˘l_ªgi°î
(
œmebus_so·c
 *
lb
, 
uöt32_t
 
off£t
, uöt32_à
vÆ
)

107 
	`wrôe_cfg_ªgi°î
(
lb
, 
LB_CONTROLLER_SLOT
, 
off£t
, 
vÆ
);

108 
	}
}

114 
ölöe


116 
	$wrôe_˘l˝u_ªgi°î
(
œmebus_so·c
 *
lb
, 
hw_˝unum
,

117 
uöt32_t
 
off£t
, uöt32_à
vÆ
)

119 
off£t
 +
LB_CTLCPU_OFFSET
 + 
hw_˝unum
 * 
LB_CTLCPU_SIZE
;

120 
	`œmebus_wrôe_ªgi°î
(
lb
, 
LB_CONTROLLER_SLOT
, 
off£t
, 
vÆ
);

121 
	}
}

127 
	$œmebus_föd_˝us
(
œmebus_so·c
 *
œmebus
)

129 
uöt32_t
 
˝umask
, 
£lf
, 
bô
, 
vÆ
;

130 
i
, 
num˝us
, 
boŸ˝u
;

131 
hwnum
[32];

133 
˝umask
 = 
	`ªad_˘l_ªgi°î
(
œmebus
, 
CTLREG_CPUS
);

134 
£lf
 = 
	`ªad_˘l_ªgi°î
(
œmebus
, 
CTLREG_SELF
);

136 
num˝us
 = 0;

137 
boŸ˝u
 = 0;

138 
i
=0; i<32; i++) {

139 
bô
 = (
uöt32_t
)1 << 
i
;

140 i‡((
˝umask
 & 
bô
) != 0) {

141 i‡(
£lf
 & 
bô
) {

142 
boŸ˝u
 = 
num˝us
;

143 
cur˝u
->
c_h¨dw¨e_numbî
 = 
i
;

145 
hwnum
[
num˝us
] = 
i
;

146 
num˝us
++;

150 
i
=0; i<
num˝us
; i++) {

151 i‡(
i
 !
boŸ˝u
) {

152 
	`˝u_¸óã
(
hwnum
[
i
]);

162 
i
=0; i<
num˝us
; i++) {

163 i‡(
i
 !
boŸ˝u
) {

164 
vÆ
 = 0;

167 
vÆ
 = 0xffffffff;

169 
	`wrôe_˘l˝u_ªgi°î
(
œmebus
, 
hwnum
[
i
], 
CTLCPU_CIRQE
, 
vÆ
);

171 
	}
}

184 
	$œmebus_°¨t_˝us
(
œmebus_so·c
 *
œmebus
)

186 
uöt32_t
 
˝umask
, 
£lf
, 
bô
;

187 
uöt32_t
 
˘l˝uoff£t
;

188 
uöt32_t
 *
¸am
;

189 
i
;

190 
˝unum
;

192 
˝umask
 = 
	`ªad_˘l_ªgi°î
(
œmebus
, 
CTLREG_CPUS
);

193 
£lf
 = 
	`ªad_˘l_ªgi°î
(
œmebus
, 
CTLREG_SELF
);

196 
˝unum
 = 1;

197 
i
=0; i<32; i++) {

198 
bô
 = (
uöt32_t
)1 << 
i
;

199 i‡((
˝umask
 & 
bô
) != 0) {

200 i‡(
£lf
 & 
bô
) {

203 
˘l˝uoff£t
 = 
LB_CTLCPU_OFFSET
 + 
i
 * 
LB_CTLCPU_SIZE
;

204 
¸am
 = 
	`œmebus_m≠_¨ó
(
œmebus
,

205 
LB_CONTROLLER_SLOT
,

206 
˘l˝uoff£t
 + 
CTLCPU_CRAM
);

207 
¸am
[0] = (
uöt32_t
)
˝u_°¨t_£c⁄d¨y
;

208 
¸am
[1] = 
˝unum
++;

213 
	`wrôe_˘l_ªgi°î
(
œmebus
, 
CTLREG_CPUE
, 
˝umask
);

214 
	}
}

228 
	$œmebus_¥obe
(
œmebus_so·c
 *
sc
,

229 
uöt32_t
 
víd‹id
, uöt32_à
devi˚id
,

230 
uöt32_t
 
lowvî
, uöt32_à
highvî
)

232 
¶Ÿ
;

233 
uöt32_t
 
vÆ
;

240 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

242 
¶Ÿ
=0; slŸ<
LB_NSLOTS
; slot++) {

243 i‡(
sc
->
ls_¶Ÿsöu£
 & (1<<
¶Ÿ
)) {

248 
vÆ
 = 
	`ªad_cfg_ªgi°î
(
sc
, 
¶Ÿ
, 
CFGREG_VID
);

249 i‡(
vÆ
!=
víd‹id
) {

254 
vÆ
 = 
	`ªad_cfg_ªgi°î
(
sc
, 
¶Ÿ
, 
CFGREG_DID
);

255 i‡(
vÆ
 !
devi˚id
) {

260 
vÆ
 = 
	`ªad_cfg_ªgi°î
(
sc
, 
¶Ÿ
, 
CFGREG_DRL
);

261 i‡(
vÆ
 < 
lowvî
 || vÆ > 
highvî
) {

268 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

269  
¶Ÿ
;

274 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

276 
	}
}

284 
	$œmebus_m¨k
(
œmebus_so·c
 *
sc
, 
¶Ÿ
)

286 
uöt32_t
 
mask
 = ((uöt32_t)1Ë<< 
¶Ÿ
;

287 
	`KASSERT
(
¶Ÿ
>=0 && slŸ < 
LB_NSLOTS
);

289 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

291 i‡((
sc
->
ls_¶Ÿsöu£
 & 
mask
)!=0) {

292 
	`∑nic
("œmebus_m¨k: slŸ %dáÃódy i¿u£\n", 
¶Ÿ
);

295 
sc
->
ls_¶Ÿsöu£
 |
mask
;

297 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

298 
	}
}

304 
	$œmebus_unm¨k
(
œmebus_so·c
 *
sc
, 
¶Ÿ
)

306 
uöt32_t
 
mask
 = ((uöt32_t)1Ë<< 
¶Ÿ
;

307 
	`KASSERT
(
¶Ÿ
>=0 && slŸ < 
LB_NSLOTS
);

309 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

311 i‡((
sc
->
ls_¶Ÿsöu£
 & 
mask
)==0) {

312 
	`∑nic
("œmebus_m¨k: slŸ %dÇŸ m¨ked i¿u£\n", 
¶Ÿ
);

315 
sc
->
ls_¶Ÿsöu£
 &~
mask
;

317 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

318 
	}
}

325 
œmebus_©èch_öãºu±
(
œmebus_so·c
 *
sc
, 
¶Ÿ
,

326 *
devd©a
,

327 (*
úqfunc
)(*
devd©a
))

329 
uöt32_t
 
mask
 = ((uöt32_t)1Ë<< 
¶Ÿ
;

330 
	`KASSERT
(
¶Ÿ
>=0 && slŸ < 
LB_NSLOTS
);

332 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

334 i‡((
sc
->
ls_¶Ÿsöu£
 & 
mask
)==0) {

335 
	`∑nic
("lamebus_attach_interrupt: slot %dÇot marked in use\n",

336 
¶Ÿ
);

339 
	`KASSERT
(
sc
->
ls_devd©a
[
¶Ÿ
]==
NULL
);

340 
	`KASSERT
(
sc
->
ls_úqfuncs
[
¶Ÿ
]==
NULL
);

342 
sc
->
ls_devd©a
[
¶Ÿ
] = 
devd©a
;

343 
sc
->
ls_úqfuncs
[
¶Ÿ
] = 
úqfunc
;

345 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

346 
	}
}

353 
	$œmebus_dëach_öãºu±
(
œmebus_so·c
 *
sc
, 
¶Ÿ
)

355 
uöt32_t
 
mask
 = ((uöt32_t)1Ë<< 
¶Ÿ
;

356 
	`KASSERT
(
¶Ÿ
>=0 && slŸ < 
LB_NSLOTS
);

358 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

360 i‡((
sc
->
ls_¶Ÿsöu£
 & 
mask
)==0) {

361 
	`∑nic
("lamebus_detach_interrupt: slot %dÇot marked in use\n",

362 
¶Ÿ
);

365 
	`KASSERT
(
sc
->
ls_úqfuncs
[
¶Ÿ
]!=
NULL
);

367 
sc
->
ls_devd©a
[
¶Ÿ
] = 
NULL
;

368 
sc
->
ls_úqfuncs
[
¶Ÿ
] = 
NULL
;

370 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

371 
	}
}

377 
	$œmebus_mask_öãºu±
(
œmebus_so·c
 *
œmebus
, 
¶Ÿ
)

379 
uöt32_t
 
bôs
, 
mask
 = ((uöt32_t)1Ë<< 
¶Ÿ
;

380 
	`KASSERT
(
¶Ÿ
 >0 && slŸ < 
LB_NSLOTS
);

382 
	`•ölock_acquúe
(&
œmebus
->
ls_lock
);

383 
bôs
 = 
	`ªad_˘l_ªgi°î
(
œmebus
, 
CTLREG_IRQE
);

384 
bôs
 &~
mask
;

385 
	`wrôe_˘l_ªgi°î
(
œmebus
, 
CTLREG_IRQE
, 
bôs
);

386 
	`•ölock_ªÀa£
(&
œmebus
->
ls_lock
);

387 
	}
}

390 
	$œmebus_unmask_öãºu±
(
œmebus_so·c
 *
œmebus
, 
¶Ÿ
)

392 
uöt32_t
 
bôs
, 
mask
 = ((uöt32_t)1Ë<< 
¶Ÿ
;

393 
	`KASSERT
(
¶Ÿ
 >0 && slŸ < 
LB_NSLOTS
);

395 
	`•ölock_acquúe
(&
œmebus
->
ls_lock
);

396 
bôs
 = 
	`ªad_˘l_ªgi°î
(
œmebus
, 
CTLREG_IRQE
);

397 
bôs
 |
mask
;

398 
	`wrôe_˘l_ªgi°î
(
œmebus
, 
CTLREG_IRQE
, 
bôs
);

399 
	`•ölock_ªÀa£
(&
œmebus
->
ls_lock
);

400 
	}
}

407 
	$œmebus_öãºu±
(
œmebus_so·c
 *
œmebus
)

420 
¶Ÿ
;

421 
uöt32_t
 
mask
;

422 
uöt32_t
 
úqs
;

423 (*
h™dÀr
)(*);

424 *
d©a
;

427 
duds
 = 0;

428 
duds_this_time
 = 0;

431 
	`KASSERT
(
œmebus
 !
NULL
);

434 
	`•ölock_acquúe
(&
œmebus
->
ls_lock
);

440 
úqs
 = 
	`ªad_˘l_ªgi°î
(
œmebus
, 
CTLREG_IRQS
);

442 i‡(
úqs
 == 0) {

446 
	`k¥ötf
("lamebus: stray interrupt on cpu %u\n",

447 
cur˝u
->
c_numbî
);

448 
duds
++;

449 
duds_this_time
++;

469 
mask
=1, 
¶Ÿ
=0; slŸ<
LB_NSLOTS
; mask<<=1, slot++) {

470 i‡((
úqs
 & 
mask
) == 0) {

479 i‡((
œmebus
->
ls_¶Ÿsöu£
 & 
mask
)==0) {

483 
duds
++;

484 
duds_this_time
++;

488 i‡(
œmebus
->
ls_úqfuncs
[
¶Ÿ
]==
NULL
) {

493 
duds
++;

494 
duds_this_time
++;

503 
h™dÀr
 = 
œmebus
->
ls_úqfuncs
[
¶Ÿ
];

504 
d©a
 = 
œmebus
->
ls_devd©a
[
¶Ÿ
];

505 
	`•ölock_ªÀa£
(&
œmebus
->
ls_lock
);

507 
	`h™dÀr
(
d©a
);

509 
	`•ölock_acquúe
(&
œmebus
->
ls_lock
);

517 
úqs
 = 
	`ªad_˘l_ªgi°î
(
œmebus
, 
CTLREG_IRQS
);

539 i‡(
duds_this_time
 =0 && 
duds
 > 0) {

540 
	`k¥ötf
("œmebus: %d dud i¡îru±s\n", 
duds
);

541 
duds
 = 0;

544 i‡(
duds
 > 10000) {

545 
	`∑nic
("œmebus:Åoÿm™y (%dËdud i¡îru±s\n", 
duds
);

549 
	`•ölock_ªÀa£
(&
œmebus
->
ls_lock
);

550 
	}
}

556 
	$œmebus_powîoff
(
œmebus_so·c
 *
œmebus
)

562 
	`˝u_úqoff
();

563 
	`wrôe_˘l_ªgi°î
(
œmebus
, 
CTLREG_PWR
, 0);

566 
	`˝u_hÆt
();

567 
	}
}

572 
uöt32_t


573 
	$œmebus_ømsize
()

582  
	`ªad_˘l_ªgi°î
(
NULL
, 
CTLREG_RAMSZ
);

583 
	}
}

589 
	$œmebus_as£π_ùi
(
œmebus_so·c
 *
œmebus
, 
˝u
 *
èrgë
)

591 
	`wrôe_˘l˝u_ªgi°î
(
œmebus
, 
èrgë
->
c_h¨dw¨e_numbî
,

592 
CTLCPU_CIPI
, 1);

593 
	}
}

596 
	$œmebus_˛ór_ùi
(
œmebus_so·c
 *
œmebus
, 
˝u
 *
èrgë
)

598 
	`wrôe_˘l˝u_ªgi°î
(
œmebus
, 
èrgë
->
c_h¨dw¨e_numbî
,

599 
CTLCPU_CIPI
, 0);

600 
	}
}

606 
œmebus_so·c
 *

607 
	$œmebus_öô
()

609 
œmebus_so·c
 *
œmebus
;

610 
i
;

613 
œmebus
 = 
	`kmÆloc
((
œmebus_so·c
));

614 i‡(
œmebus
==
NULL
) {

615 
	`∑nic
("lamebus_init: Out of memory\n");

618 
	`•ölock_öô
(&
œmebus
->
ls_lock
);

623 
œmebus
->
ls_¶Ÿsöu£
 = 1 << 
LB_CONTROLLER_SLOT
;

625 
i
=0; i<
LB_NSLOTS
; i++) {

626 
œmebus
->
ls_devd©a
[
i
] = 
NULL
;

627 
œmebus
->
ls_úqfuncs
[
i
] = 
NULL
;

630  
œmebus
;

631 
	}
}

	@dev/lamebus/lamebus.h

30 #i‚de‡
_LAMEBUS_H_


31 
	#_LAMEBUS_H_


	)

33 
	~<˝u.h
>

34 
	~<•ölock.h
>

44 
	#LB_VENDOR_CS161
 1

	)

47 
	#LBCS161_BUSCTL
 1

	)

48 
	#LBCS161_TIMER
 2

	)

49 
	#LBCS161_DISK
 3

	)

50 
	#LBCS161_SERIAL
 4

	)

51 
	#LBCS161_SCREEN
 5

	)

52 
	#LBCS161_NET
 6

	)

53 
	#LBCS161_EMUFS
 7

	)

54 
	#LBCS161_TRACE
 8

	)

55 
	#LBCS161_RANDOM
 9

	)

58 
	#LB_CONTROLLER_SLOT
 31

	)

61 
	#LB_NSLOTS
 32

	)

64 
	#LB_CONFIG_SIZE
 1024

	)

67 
	#LB_CTLCPU_SIZE
 1024

	)

70 
	#LB_CTLCPU_OFFSET
 32768

	)

73 
	#LB_SLOT_SIZE
 65536

	)

76 (*
	tlb_úqfunc
)(*
	tdevd©a
);

81 
	sœmebus_so·c
 {

82 
•ölock
 
ls_lock
;

85 
uöt32_t
 
ls_¶Ÿsöu£
;

86 *
ls_devd©a
[
LB_NSLOTS
];

87 
lb_úqfunc
 
ls_úqfuncs
[
LB_NSLOTS
];

93 
œmebus_so·c
 *
	`œmebus_öô
();

98 
	`œmebus_föd_˝us
(
œmebus_so·c
 *
œmebus
);

103 
	`œmebus_°¨t_˝us
(
œmebus_so·c
 *
œmebus
);

112 
	`œmebus_¥obe
(
œmebus_so·c
 *,

113 
uöt32_t
 
víd‹id
, uöt32_à
devi˚id
,

114 
uöt32_t
 
lowvî
, uöt32_à
highvî
);

121 
	`œmebus_m¨k
(
œmebus_so·c
 *, 
¶Ÿ
);

122 
	`œmebus_unm¨k
(
œmebus_so·c
 *, 
¶Ÿ
);

127 
	`œmebus_©èch_öãºu±
(
œmebus_so·c
 *, 
¶Ÿ
,

128 *
devd©a
,

129 (*
úqfunc
)(*
devd©a
));

133 
	`œmebus_dëach_öãºu±
(
œmebus_so·c
 *, 
¶Ÿ
);

138 
	`œmebus_mask_öãºu±
(
œmebus_so·c
 *, 
¶Ÿ
);

139 
	`œmebus_unmask_öãºu±
(
œmebus_so·c
 *, 
¶Ÿ
);

144 
	`œmebus_öãºu±
(
œmebus_so·c
 *);

149 
	`œmebus_powîoff
(
œmebus_so·c
 *);

154 
size_t
 
	`œmebus_ømsize
();

159 
	`œmebus_as£π_ùi
(
œmebus_so·c
 *, 
˝u
 *
èrgë˝u
);

160 
	`œmebus_˛ór_ùi
(
œmebus_so·c
 *, 
˝u
 *
èrgë˝u
);

166 
uöt32_t
 
	`œmebus_ªad_ªgi°î
(
œmebus_so·c
 *, 
¶Ÿ
,

167 
uöt32_t
 
off£t
);

168 
	`œmebus_wrôe_ªgi°î
(
œmebus_so·c
 *, 
¶Ÿ
,

169 
uöt32_t
 
off£t
, uöt32_à
vÆ
);

174 *
	`œmebus_m≠_¨ó
(
œmebus_so·c
 *, 
¶Ÿ
,

175 
uöt32_t
 
off£t
);

	@dev/lamebus/lhd.c

34 
	~<ty≥s.h
>

35 
	~<kîn/î∫o.h
>

36 
	~<lib.h
>

37 
	~<uio.h
>

38 
	~<synch.h
>

39 
	~<∂©f‹m/bus.h
>

40 
	~<vfs.h
>

41 
	~<œmebus/lhd.h
>

42 
	~"autoc⁄f.h
"

45 
	#LHD_REG_NSECT
 0

	)

46 
	#LHD_REG_STAT
 4

	)

47 
	#LHD_REG_SECT
 8

	)

48 
	#LHD_REG_RPM
 12

	)

51 
	#LHD_IDLE
 0

	)

52 
	#LHD_WORKING
 1

	)

53 
	#LHD_OK
 4

	)

54 
	#LHD_INVSECT
 12

	)

55 
	#LHD_MEDIA
 20

	)

56 
	#LHD_ISWRITE
 2

	)

57 
	#LHD_STATEMASK
 0x1d

	)

60 
	#LHD_BUFFER
 32768

	)

66 
ölöe


67 
uöt32_t
 
	$lhd_rdªg
(
lhd_so·c
 *
lh
, 
uöt32_t
 
ªg
)

69  
	`bus_ªad_ªgi°î
(
lh
->
lh_busd©a
,Üh->
lh_bu•os
, 
ªg
);

70 
	}
}

76 
ölöe


77 
	$lhd_wªg
(
lhd_so·c
 *
lh
, 
uöt32_t
 
ªg
, uöt32_à
vÆ
)

79 
	`bus_wrôe_ªgi°î
(
lh
->
lh_busd©a
,Üh->
lh_bu•os
, 
ªg
, 
vÆ
);

80 
	}
}

86 
	$lhd_code_to_î∫o
(
lhd_so·c
 *
lh
, 
code
)

88 
code
 & 
LHD_STATEMASK
) {

89 
LHD_OK
:  0;

90 
LHD_INVSECT
:  
EINVAL
;

91 
LHD_MEDIA
:  
EIO
;

93 
	`k¥ötf
("lhd%d: Unknow¿ªsu… codê%d\n", 
lh
->
lh_unô
, 
code
);

94  
EAGAIN
;

95 
	}
}

103 
	$lhd_iod⁄e
(
lhd_so·c
 *
lh
, 
îr
)

105 
lh
->
lh_ªsu…
 = 
îr
;

106 
	`V
(
lh
->
lh_d⁄e
);

107 
	}
}

115 
	$lhd_úq
(*
vlh
)

117 
lhd_so·c
 *
lh
 = 
vlh
;

118 
uöt32_t
 
vÆ
;

120 
vÆ
 = 
	`lhd_rdªg
(
lh
, 
LHD_REG_STAT
);

122 
vÆ
 & 
LHD_STATEMASK
) {

123 
LHD_IDLE
:

124 
LHD_WORKING
:

126 
LHD_OK
:

127 
LHD_INVSECT
:

128 
LHD_MEDIA
:

129 
	`lhd_wªg
(
lh
, 
LHD_REG_STAT
, 0);

130 
	`lhd_iod⁄e
(
lh
, 
	`lhd_code_to_î∫o
÷h, 
vÆ
));

133 
	}
}

140 
	$lhd_›í
(
devi˚
 *
d
, 
›íÊags
)

145 ()
d
;

146 ()
›íÊags
;

149 
	}
}

156 
	$lhd_˛o£
(
devi˚
 *
d
)

161 ()
d
;

164 
	}
}

171 
	$lhd_io˘l
(
devi˚
 *
d
, 
›
, 
u£Ωå_t
 
d©a
)

176 ()
d
;

177 ()
›
;

178 ()
d©a
;

179  
EIOCTL
;

180 
	}
}

190 
	$lhd_ª£t
(
lhd_so·c
 *
lh
)

192 
	`lhd_wªg
(
lh
, 
LHD_REG_STAT
, 0);

193 
	}
}

201 
	$lhd_io
(
devi˚
 *
d
, 
uio
 *uio)

203 
lhd_so·c
 *
lh
 = 
d
->
d_d©a
;

205 
uöt32_t
 
£˘‹
 = 
uio
->
uio_off£t
 / 
LHD_SECTSIZE
;

206 
uöt32_t
 
£˘off
 = 
uio
->
uio_off£t
 % 
LHD_SECTSIZE
;

207 
uöt32_t
 
Àn
 = 
uio
->
uio_ªsid
 / 
LHD_SECTSIZE
;

208 
uöt32_t
 
Ànoff
 = 
uio
->
uio_ªsid
 % 
LHD_SECTSIZE
;

209 
uöt32_t
 
i
;

210 
uöt32_t
 
°©vÆ
 = 
LHD_WORKING
;

211 
ªsu…
;

214 i‡(
£˘off
 !0 || 
Ànoff
 != 0) {

215  
EINVAL
;

219 i‡(
£˘‹
+
Àn
 > 
lh
->
lh_dev
.
d_blocks
) {

220  
EINVAL
;

224 i‡(
uio
->
uio_rw
==
UIO_WRITE
) {

225 
°©vÆ
 |
LHD_ISWRITE
;

229 
i
=0; i<
Àn
; i++) {

232 
	`P
(
lh
->
lh_˛ór
);

238 i‡(
uio
->
uio_rw
 =
UIO_WRITE
) {

239 
ªsu…
 = 
	`uiomove
(
lh
->
lh_buf
, 
LHD_SECTSIZE
, 
uio
);

240 i‡(
ªsu…
) {

241 
	`V
(
lh
->
lh_˛ór
);

242  
ªsu…
;

247 
	`lhd_wªg
(
lh
, 
LHD_REG_SECT
, 
£˘‹
+
i
);

250 
	`lhd_wªg
(
lh
, 
LHD_REG_STAT
, 
°©vÆ
);

253 
	`P
(
lh
->
lh_d⁄e
);

256 
ªsu…
 = 
lh
->
lh_ªsu…
;

262 i‡(
ªsu…
==0 && 
uio
->
uio_rw
==
UIO_READ
) {

263 
ªsu…
 = 
	`uiomove
(
lh
->
lh_buf
, 
LHD_SECTSIZE
, 
uio
);

267 
	`V
(
lh
->
lh_˛ór
);

270 i‡(
ªsu…
) {

271  
ªsu…
;

276 
	}
}

282 
	$c⁄fig_lhd
(
lhd_so·c
 *
lh
, 
lhdno
)

284 
«me
[32];

287 
	`¢¥ötf
(
«me
, “ame), "lhd%d", 
lhdno
);

290 
lh
->
lh_buf
 = 
	`bus_m≠_¨ó
÷h->
lh_busd©a
,Üh->
lh_bu•os
, 
LHD_BUFFER
);

293 
lh
->
lh_˛ór
 = 
	`£m_¸óã
("lhd-clear", 1);

294 i‡(
lh
->
lh_˛ór
 =
NULL
) {

295  
ENOMEM
;

297 
lh
->
lh_d⁄e
 = 
	`£m_¸óã
("lhd-done", 0);

298 i‡(
lh
->
lh_d⁄e
 =
NULL
) {

299 
	`£m_de°roy
(
lh
->
lh_˛ór
);

300 
lh
->
lh_˛ór
 = 
NULL
;

301  
ENOMEM
;

305 
lh
->
lh_dev
.
d_›í
 = 
lhd_›í
;

306 
lh
->
lh_dev
.
d_˛o£
 = 
lhd_˛o£
;

307 
lh
->
lh_dev
.
d_io
 = 
lhd_io
;

308 
lh
->
lh_dev
.
d_io˘l
 = 
lhd_io˘l
;

309 
lh
->
lh_dev
.
d_blocks
 = 
	`bus_ªad_ªgi°î
÷h->
lh_busd©a
,Üh->
lh_bu•os
,

310 
LHD_REG_NSECT
);

311 
lh
->
lh_dev
.
d_blocksize
 = 
LHD_SECTSIZE
;

312 
lh
->
lh_dev
.
d_d©a
 =Üh;

315  
	`vfs_adddev
(
«me
, &
lh
->
lh_dev
, 1);

316 
	}
}

	@dev/lamebus/lhd.h

30 #i‚de‡
_LAMEBUS_LHD_H_


31 
	#_LAMEBUS_LHD_H_


	)

33 
	~<devi˚.h
>

38 
	#LHD_SECTSIZE
 512

	)

43 
	slhd_so·c
 {

45 *
	mlh_busd©a
;

46 
uöt32_t
 
	mlh_bu•os
;

47 
	mlh_unô
;

53 *
	mlh_buf
;

54 
	mlh_ªsu…
;

55 
£m≠h‹e
 *
	mlh_˛ór
;

56 
£m≠h‹e
 *
	mlh_d⁄e
;

58 
devi˚
 
	mlh_dev
;

62 
lhd_úq
( *);

	@dev/lamebus/lhd_att.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<œmebus/œmebus.h
>

36 
	~<œmebus/lhd.h
>

37 
	~"autoc⁄f.h
"

40 
	#LOW_VERSION
 2

	)

42 
	#HIGH_VERSION
 2

	)

44 
lhd_so·c
 *

45 
	$©èch_lhd_to_œmebus
(
lhdno
, 
œmebus_so·c
 *
sc
)

47 
lhd_so·c
 *
lh
;

48 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_DISK
,

49 
LOW_VERSION
, 
HIGH_VERSION
);

50 i‡(
¶Ÿ
 < 0) {

52  
NULL
;

55 
lh
 = 
	`kmÆloc
((
lhd_so·c
));

56 i‡(
lh
==
NULL
) {

58  
NULL
;

62 
lh
->
lh_busd©a
 = 
sc
;

63 
lh
->
lh_bu•os
 = 
¶Ÿ
;

64 
lh
->
lh_unô
 = 
lhdno
;

67 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

68 
	`œmebus_©èch_öãºu±
(
sc
, 
¶Ÿ
, 
lh
, 
lhd_úq
);

70  
lh
;

71 
	}
}

	@dev/lamebus/lnet.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<lib.h
>

34 
	~"autoc⁄f.h
"

37 
	$c⁄fig_ ë
(
 ë_so·c
 *
sc
, 
 ëno
)

39 ()
sc
;

41 
	`k¥ötf
(" ë%d: Nÿ√tw‹k suµ‹àö sy°em\n", 
 ëno
);

43  
ENODEV
;

44 
	}
}

	@dev/lamebus/lnet_att.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<œmebus/œmebus.h
>

33 
	~"autoc⁄f.h
"

36 
	#LOW_VERSION
 1

	)

38 
	#HIGH_VERSION
 1

	)

40 
 ë_so·c
 *

41 
	$©èch_ ë_to_œmebus
(
 ëno
, 
œmebus_so·c
 *
sc
)

43 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_NET
,

44 
LOW_VERSION
, 
HIGH_VERSION
);

45 i‡(
¶Ÿ
 < 0) {

46  
NULL
;

49 
	`k¥ötf
(" ë%d: Nÿ√tw‹k suµ‹àö sy°em\n", 
 ëno
);

51  
NULL
;

52 
	}
}

	@dev/lamebus/lrandom.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<uio.h
>

36 
	~<∂©f‹m/bus.h
>

37 
	~<œmebus/Ã™dom.h
>

38 
	~"autoc⁄f.h
"

41 
	#LR_REG_RAND
 0

	)

44 
	#LR_RANDMAX
 0xffffffff

	)

47 
	$c⁄fig_Ã™dom
(
Ã™dom_so·c
 *
Ã
, 
Ã™domno
)

49 ()
Ã™domno
;

50 ()
Ã
;

52 
	}
}

54 
uöt32_t


55 
	$Ã™dom_øndom
(*
devd©a
)

57 
Ã™dom_so·c
 *
Ã
 = 
devd©a
;

58  
	`bus_ªad_ªgi°î
(
Ã
->
Ã_bus
,Ür->
Ã_bu•os
, 
LR_REG_RAND
);

59 
	}
}

61 
uöt32_t


62 
	$Ã™dom_øndmax
(*
devd©a
)

64 ()
devd©a
;

65  
LR_RANDMAX
;

66 
	}
}

69 
	$Ã™dom_ªad
(*
devd©a
, 
uio
 *uio)

71 
Ã™dom_so·c
 *
Ã
 = 
devd©a
;

72 
uöt32_t
 
vÆ
;

73 
ªsu…
;

75 
uio
->
uio_ªsid
 > 0) {

76 
vÆ
 = 
	`bus_ªad_ªgi°î
(
Ã
->
Ã_bus
,Ür->
Ã_bu•os
,

77 
LR_REG_RAND
);

78 
ªsu…
 = 
	`uiomove
(&
vÆ
, (vÆ), 
uio
);

79 i‡(
ªsu…
) {

80  
ªsu…
;

85 
	}
}

	@dev/lamebus/lrandom.h

30 #i‚de‡
_LAMEBUS_LRANDOM_H_


31 
	#_LAMEBUS_LRANDOM_H_


	)

33 
	guio
;

35 
	sÃ™dom_so·c
 {

37 *
	mÃ_bus
;

38 
uöt32_t
 
	mÃ_bu•os
;

42 
uöt32_t
 
Ã™dom_øndom
–*
devd©a
);

43 
uöt32_t
 
Ã™dom_øndmax
–*
devd©a
);

44 
Ã™dom_ªad
–*, 
uio
 *);

	@dev/lamebus/lrandom_att.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<œmebus/œmebus.h
>

33 
	~<œmebus/Ã™dom.h
>

34 
	~"autoc⁄f.h
"

37 
	#LOW_VERSION
 1

	)

39 
	#HIGH_VERSION
 1

	)

41 
Ã™dom_so·c
 *

42 
	$©èch_Ã™dom_to_œmebus
(
Ã™domno
, 
œmebus_so·c
 *
sc
)

44 
Ã™dom_so·c
 *
Ã
;

45 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_RANDOM
,

46 
LOW_VERSION
, 
HIGH_VERSION
);

47 i‡(
¶Ÿ
 < 0) {

48  
NULL
;

51 
Ã
 = 
	`kmÆloc
((
Ã™dom_so·c
));

52 i‡(
Ã
==
NULL
) {

53  
NULL
;

56 ()
Ã™domno
;

58 
Ã
->
Ã_bus
 = 
sc
;

59 
Ã
->
Ã_bu•os
 = 
¶Ÿ
;

61 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

63  
Ã
;

64 
	}
}

	@dev/lamebus/lscreen.c

36 
	~<ty≥s.h
>

37 
	~<lib.h
>

38 
	~<•ölock.h
>

39 
	~<∂©f‹m/bus.h
>

40 
	~<œmebus/ls¸ìn.h
>

41 
	~"autoc⁄f.h
"

44 
	#LSCR_REG_POSN
 0

	)

45 
	#LSCR_REG_SIZE
 4

	)

46 
	#LSCR_REG_CHAR
 8

	)

47 
	#LSCR_REG_RIRQ
 12

	)

50 
	#LSCR_IRQ_ENABLE
 1

	)

51 
	#LSCR_IRQ_ACTIVE
 2

	)

54 
	#LSCR_SCREEN
 32768

	)

58 
ölöe


60 
	$•lôxy
(
uöt32_t
 
xy
, *
x
, *
y
)

62 *
x
 = 
xy
 >> 16;

63 *
y
 = 
xy
 & 0xffff;

64 
	}
}

68 
ölöe


69 
uöt32_t


70 
	$mîgexy
(
x
, 
y
)

72 
uöt32_t
 
vÆ
 = 
x
;

74  (
vÆ
 << 16Ë| 
y
;

75 
	}
}

83 
	$ls¸ìn_úq
(*
vsc
)

85 
ls¸ìn_so·c
 *
sc
 = 
vsc
;

86 
uöt32_t
 
ch
, 
x
;

88 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

90 
x
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
, 
LSCR_REG_RIRQ
);

91 i‡(
x
 & 
LSCR_IRQ_ACTIVE
) {

92 
ch
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

93 
LSCR_REG_CHAR
);

94 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

95 
LSCR_REG_RIRQ
, 
LSCR_IRQ_ENABLE
);

97 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

98 i‡(
sc
->
ls_öput
) {

99 
sc
->
	`ls_öput
(sc->
ls_devd©a
, 
ch
);

103 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

105 
	}
}

114 
	$ls¸ìn_√wlöe
(
ls¸ìn_so·c
 *
sc
)

116 i‡(
sc
->
ls_cy
 >sc->
ls_height
-1) {

121 
	`memmove
(
sc
->
ls_s¸ìn
, sc->ls_s¸ì¿+ sc->
ls_width
,

122 
sc
->
ls_width
 * (sc->
ls_height
-1));

123 
	`bzîo
(
sc
->
ls_s¸ìn
 + sc->
ls_width
 * (sc->
ls_height
-1),

124 
sc
->
ls_width
);

127 
sc
->
ls_cy
++;

129 
sc
->
ls_cx
=0;

130 
	}
}

137 
	$ls¸ìn_ch¨
(
ls¸ìn_so·c
 *
sc
, 
ch
)

139 i‡(
sc
->
ls_cx
 >sc->
ls_width
) {

140 
	`ls¸ìn_√wlöe
(
sc
);

143 
sc
->
ls_s¸ìn
[sc->
ls_cy
*sc->
ls_width
 + sc->
ls_cx
] = 
ch
;

144 
sc
->
ls_cx
++;

145 
	}
}

152 
	$ls¸ìn_wrôe
(*
vsc
, 
ch
)

154 
ls¸ìn_so·c
 *
sc
 = 
vsc
;

155 
ccx
, 
ccy
;

157 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

159 
ch
) {

160 '\n': 
	`ls¸ìn_√wlöe
(
sc
); ;

161 : 
	`ls¸ìn_ch¨
(
sc
, 
ch
); ;

169 
ccx
 = 
sc
->
ls_cx
;

170 
ccy
 = 
sc
->
ls_cy
;

171 i‡(
ccx
==
sc
->
ls_width
) {

172 
ccx
--;

176 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

177 
LSCR_REG_POSN
, 
	`mîgexy
(
ccx
, 
ccy
));

179 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

180 
	}
}

188 
	$c⁄fig_ls¸ìn
(
ls¸ìn_so·c
 *
sc
, 
ls¸ì¬o
)

190 
uöt32_t
 
vÆ
;

192 ()
ls¸ì¬o
;

194 
	`•ölock_öô
(&
sc
->
ls_lock
);

200 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

201 
LSCR_REG_RIRQ
, 
LSCR_IRQ_ENABLE
);

206 
vÆ
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

207 
LSCR_REG_SIZE
);

208 
	`•lôxy
(
vÆ
, &
sc
->
ls_width
, &sc->
ls_height
);

213 
vÆ
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

214 
LSCR_REG_POSN
);

215 
	`•lôxy
(
vÆ
, &
sc
->
ls_cx
, &sc->
ls_cy
);

220 
sc
->
ls_s¸ìn
 = 
	`bus_m≠_¨ó
(sc->
ls_busd©a
, sc->
ls_bu•os
,

221 
LSCR_SCREEN
);

224 
	}
}

	@dev/lamebus/lscreen.h

30 #i‚de‡
_LAMEBUS_LSCREEN_H_


31 
	#_LAMEBUS_LSCREEN_H_


	)

36 
	sls¸ìn_so·c
 {

38 
•ölock
 
	mls_lock
;

39 
	mls_width
, 
	mls_height
;

40 
	mls_cx
, 
	mls_cy
;

41 *
	mls_s¸ìn
;

44 *
	mls_busd©a
;

45 
uöt32_t
 
	mls_bu•os
;

48 *
	mls_devd©a
;

49 (*
	mls_°¨t
)(*
	mdevd©a
);

50 (*
	mls_öput
)(*
	mdevd©a
, 
	mch
);

54 
ls¸ìn_úq
–*
sc
);

57 
ls¸ìn_wrôe
–*
sc
, 
ch
);

	@dev/lamebus/lscreen_att.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<œmebus/œmebus.h
>

36 
	~<œmebus/ls¸ìn.h
>

37 
	~"autoc⁄f.h
"

40 
	#LOW_VERSION
 1

	)

42 
	#HIGH_VERSION
 1

	)

44 
ls¸ìn_so·c
 *

45 
	$©èch_ls¸ìn_to_œmebus
(
ls¸ì¬o
, 
œmebus_so·c
 *
sc
)

47 
ls¸ìn_so·c
 *
ls
;

48 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_SCREEN
,

49 
LOW_VERSION
, 
HIGH_VERSION
);

50 i‡(
¶Ÿ
 < 0) {

52  
NULL
;

55 
ls
 = 
	`kmÆloc
((
ls¸ìn_so·c
));

56 i‡(
ls
==
NULL
) {

58  
NULL
;

62 
ls
->
ls_busd©a
 = 
sc
;

63 
ls
->
ls_bu•os
 = 
¶Ÿ
;

66 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

67 
	`œmebus_©èch_öãºu±
(
sc
, 
¶Ÿ
, 
ls
, 
ls¸ìn_úq
);

69  
ls
;

70 
	}
}

	@dev/lamebus/lser.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<•ölock.h
>

33 
	~<∂©f‹m/bus.h
>

34 
	~<œmebus/l£r.h
>

35 
	~"autoc⁄f.h
"

38 
	#LSER_REG_CHAR
 0

	)

39 
	#LSER_REG_WIRQ
 4

	)

40 
	#LSER_REG_RIRQ
 8

	)

43 
	#LSER_IRQ_ENABLE
 1

	)

44 
	#LSER_IRQ_ACTIVE
 2

	)

47 
	$l£r_úq
(*
vsc
)

49 
l£r_so·c
 *
sc
 = 
vsc
;

50 
uöt32_t
 
x
;

51 
boﬁ
 
˛ór_to_wrôe
 = 
Ál£
;

52 
boﬁ
 
gŸ_a_ªad
 = 
Ál£
;

53 
uöt32_t
 
ch
 = 0;

55 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

57 
x
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
, 
LSER_REG_WIRQ
);

58 i‡(
x
 & 
LSER_IRQ_ACTIVE
) {

59 
x
 = 
LSER_IRQ_ENABLE
;

60 
sc
->
ls_wbusy
 = 0;

61 
˛ór_to_wrôe
 = 
åue
;

62 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

63 
LSER_REG_WIRQ
, 
x
);

66 
x
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
, 
LSER_REG_RIRQ
);

67 i‡(
x
 & 
LSER_IRQ_ACTIVE
) {

68 
x
 = 
LSER_IRQ_ENABLE
;

69 
ch
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

70 
LSER_REG_CHAR
);

71 
gŸ_a_ªad
 = 
åue
;

72 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

73 
LSER_REG_RIRQ
, 
x
);

76 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

78 i‡(
˛ór_to_wrôe
 && 
sc
->
ls_°¨t
 !
NULL
) {

79 
sc
->
	`ls_°¨t
(sc->
ls_devd©a
);

81 i‡(
gŸ_a_ªad
 && 
sc
->
ls_öput
 !
NULL
) {

82 
sc
->
	`ls_öput
(sc->
ls_devd©a
, 
ch
);

84 
	}
}

87 
	$l£r_wrôe
(*
vls
, 
ch
)

89 
l£r_so·c
 *
ls
 = 
vls
;

91 
	`•ölock_acquúe
(&
ls
->
ls_lock
);

93 i‡(
ls
->
ls_wbusy
) {

105 
	`∑nic
("lser: Not clearÅo write\n");

107 
ls
->
ls_wbusy
 = 
åue
;

109 
	`bus_wrôe_ªgi°î
(
ls
->
ls_busd©a
,Üs->
ls_bu•os
, 
LSER_REG_CHAR
, 
ch
);

111 
	`•ölock_ªÀa£
(&
ls
->
ls_lock
);

112 
	}
}

116 
	$l£r_pﬁl_u¡û_wrôe
(
l£r_so·c
 *
sc
)

118 
uöt32_t
 
vÆ
;

120 
	`KASSERT
(
	`•ölock_do_i_hﬁd
(&
sc
->
ls_lock
));

123 
vÆ
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

124 
LSER_REG_WIRQ
);

126 (
vÆ
 & 
LSER_IRQ_ACTIVE
) == 0);

127 
	}
}

130 
	$l£r_wrôïﬁÀd
(*
vsc
, 
ch
)

132 
l£r_so·c
 *
sc
 = 
vsc
;

133 
boﬁ
 
úq≥ndög
 = 
Ál£
;

135 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

137 i‡(
sc
->
ls_wbusy
) {

138 
úq≥ndög
 = 
åue
;

139 
	`l£r_pﬁl_u¡û_wrôe
(
sc
);

141 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

142 
LSER_REG_WIRQ
, 
LSER_IRQ_ENABLE
);

146 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
, 
LSER_REG_CHAR
, 
ch
);

149 
	`l£r_pﬁl_u¡û_wrôe
(
sc
);

156 i‡(!
úq≥ndög
) {

157 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

158 
LSER_REG_WIRQ
, 
LSER_IRQ_ENABLE
);

161 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

162 
	}
}

170 
	$l£r_°¨çﬁlög
(*
vsc
)

172 
l£r_so·c
 *
sc
 = 
vsc
;

173 
sc
->
	`ls_masköãºu±
(sc->
ls_busd©a
, sc->
ls_bu•os
);

174 
	}
}

177 
	$l£r_ídpﬁlög
(*
vsc
)

179 
l£r_so·c
 *
sc
 = 
vsc
;

180 
sc
->
	`ls_unmasköãºu±
(sc->
ls_busd©a
, sc->
ls_bu•os
);

181 
	}
}

184 
	$c⁄fig_l£r
(
l£r_so·c
 *
sc
, 
l£∫o
)

186 ()
l£∫o
;

192 
	`•ölock_öô
(&
sc
->
ls_lock
);

193 
sc
->
ls_wbusy
 = 
Ál£
;

195 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

196 
LSER_REG_RIRQ
, 
LSER_IRQ_ENABLE
);

197 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

198 
LSER_REG_WIRQ
, 
LSER_IRQ_ENABLE
);

201 
	}
}

	@dev/lamebus/lser.h

30 #i‚de‡
_LAMEBUS_LSER_H_


31 
	#_LAMEBUS_LSER_H_


	)

33 
	~<•ölock.h
>

35 
	sl£r_so·c
 {

37 
•ölock
 
	mls_lock
;

38 vﬁ©ûê
boﬁ
 
	mls_wbusy
;

41 *
	mls_busd©a
;

42 
uöt32_t
 
	mls_bu•os
;

43 (*
	mls_masköãºu±
)(*
	mbusd©a
, 
uöt32_t
 
	mbu•os
);

44 (*
	mls_unmasköãºu±
)(*
	mbusd©a
, 
uöt32_t
 
	mbu•os
);

47 *
	mls_devd©a
;

48 (*
	mls_°¨t
)(*
	mdevd©a
);

49 (*
	mls_öput
)(*
	mdevd©a
, 
	mch
);

53 
l£r_úq
–*
sc
);

56 
l£r_wrôe
–*
sc
, 
ch
);

57 
l£r_°¨çﬁlög
–*
sc
);

58 
l£r_wrôïﬁÀd
–*
sc
, 
ch
);

59 
l£r_ídpﬁlög
–*
sc
);

	@dev/lamebus/lser_att.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<œmebus/œmebus.h
>

33 
	~<œmebus/l£r.h
>

34 
	~"autoc⁄f.h
"

37 
	#LOW_VERSION
 1

	)

39 
	#HIGH_VERSION
 1

	)

46 
	$do_œmebus_mask_öãºu±
(*
bus
, 
uöt32_t
 
bu•os
)

48 
œmebus_so·c
 *
lb
 = 
bus
;

49 
	`œmebus_mask_öãºu±
(
lb
, 
bu•os
);

50 
	}
}

54 
	$do_œmebus_unmask_öãºu±
(*
bus
, 
uöt32_t
 
bu•os
)

56 
œmebus_so·c
 *
lb
 = 
bus
;

57 
	`œmebus_unmask_öãºu±
(
lb
, 
bu•os
);

58 
	}
}

63 
l£r_so·c
 *

64 
	$©èch_l£r_to_œmebus
(
l£∫o
, 
œmebus_so·c
 *
sc
)

66 
l£r_so·c
 *
ls
;

67 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_SERIAL
,

68 
LOW_VERSION
, 
HIGH_VERSION
);

69 i‡(
¶Ÿ
 < 0) {

70  
NULL
;

73 
ls
 = 
	`kmÆloc
((
l£r_so·c
));

74 i‡(
ls
==
NULL
) {

75  
NULL
;

78 ()
l£∫o
;

80 
ls
->
ls_busd©a
 = 
sc
;

81 
ls
->
ls_bu•os
 = 
¶Ÿ
;

82 
ls
->
ls_masköãºu±
 = 
do_œmebus_mask_öãºu±
;

83 
ls
->
ls_unmasköãºu±
 = 
do_œmebus_unmask_öãºu±
;

85 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

86 
	`œmebus_©èch_öãºu±
(
sc
, 
¶Ÿ
, 
ls
, 
l£r_úq
);

88  
ls
;

89 
	}
}

	@dev/lamebus/ltimer.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<•l.h
>

36 
	~<˛ock.h
>

37 
	~<∂©f‹m/bus.h
>

38 
	~<œmebus/…imî.h
>

39 
	~"autoc⁄f.h
"

42 
	#LT_REG_SEC
 0

	)

43 
	#LT_REG_NSEC
 4

	)

44 
	#LT_REG_ROE
 8

	)

45 
	#LT_REG_IRQ
 12

	)

46 
	#LT_REG_COUNT
 16

	)

47 
	#LT_REG_SPKR
 20

	)

50 
	#LT_GRANULARITY
 1000000

	)

52 
boﬁ
 
	ghavëimî˛ock
;

58 
	$c⁄fig_…imî
(
…imî_so·c
 *
…
, 
…imîno
)

83 ()
…imîno
;

84 
…
->
…_h¨d˛ock
 = 0;

90 i‡(!
havëimî˛ock
) {

91 
havëimî˛ock
 = 
åue
;

92 
…
->
…_timî˛ock
 = 1;

95 
	`bus_wrôe_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
, 
LT_REG_ROE
, 1);

96 
	`bus_wrôe_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
, 
LT_REG_COUNT
,

97 
LT_GRANULARITY
);

101 
	}
}

107 
	$…imî_úq
(*
v…
)

109 
…imî_so·c
 *
…
 = 
v…
;

110 
uöt32_t
 
vÆ
;

112 
vÆ
 = 
	`bus_ªad_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
, 
LT_REG_IRQ
);

113 i‡(
vÆ
) {

118 i‡(
…
->
…_h¨d˛ock
) {

119 
	`h¨d˛ock
();

124 i‡(
…
->
…_timî˛ock
) {

125 
	`timî˛ock
();

128 
	}
}

136 
	$…imî_bìp
(*
v…
)

138 
…imî_so·c
 *
…
 = 
v…
;

140 
	`bus_wrôe_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
, 
LT_REG_SPKR
, 440);

141 
	}
}

149 
	$…imî_gëtime
(*
v…
, 
time_t
 *
£cs
, 
uöt32_t
 *
n£cs
)

151 
…imî_so·c
 *
…
 = 
v…
;

152 
uöt32_t
 
£cs1
, 
£cs2
;

153 
•l
;

170 
•l
 = 
	`•lhigh
();

172 
£cs1
 = 
	`bus_ªad_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
,

173 
LT_REG_SEC
);

174 *
n£cs
 = 
	`bus_ªad_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
,

175 
LT_REG_NSEC
);

176 
£cs2
 = 
	`bus_ªad_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
,

177 
LT_REG_SEC
);

179 
	`•lx
(
•l
);

181 i‡(*
n£cs
 < 5000000) {

182 *
£cs
 = 
£cs2
;

185 *
£cs
 = 
£cs1
;

187 
	}
}

	@dev/lamebus/ltimer.h

30 #i‚de‡
_LAMEBUS_LTIMER_H_


31 
	#_LAMEBUS_LTIMER_H_


	)

36 
	s…imî_so·c
 {

38 
	m…_h¨d˛ock
;

39 
	m…_timî˛ock
;

42 *
	m…_bus
;

43 
uöt32_t
 
	m…_bu•os
;

48 
…imî_úq
–*
…
);

51 
…imî_bìp
–*
devd©a
);

52 
…imî_gëtime
–*
devd©a
,

53 
time_t
 *
£cs
, 
uöt32_t
 *
n£cs
);

	@dev/lamebus/ltimer_att.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<œmebus/œmebus.h
>

36 
	~<œmebus/…imî.h
>

37 
	~"autoc⁄f.h
"

40 
	#LOW_VERSION
 1

	)

42 
	#HIGH_VERSION
 1

	)

44 
…imî_so·c
 *

45 
	$©èch_…imî_to_œmebus
(
…imîno
, 
œmebus_so·c
 *
sc
)

47 
…imî_so·c
 *
…
;

48 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_TIMER
,

49 
LOW_VERSION
, 
HIGH_VERSION
);

50 i‡(
¶Ÿ
 < 0) {

52  
NULL
;

55 
…
 = 
	`kmÆloc
((
…imî_so·c
));

56 i‡(
…
==
NULL
) {

58  
NULL
;

61 ()
…imîno
;

64 
…
->
…_bus
 = 
sc
;

65 
…
->
…_bu•os
 = 
¶Ÿ
;

68 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

69 
	`œmebus_©èch_öãºu±
(
sc
, 
¶Ÿ
, 
…
, 
…imî_úq
);

71  
…
;

72 
	}
}

	@dev/lamebus/ltrace.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<∂©f‹m/bus.h
>

33 
	~<œmebus/…ø˚.h
>

34 
	~"autoc⁄f.h
"

37 
	#LTRACE_REG_TRON
 0

	)

38 
	#LTRACE_REG_TROFF
 4

	)

39 
	#LTRACE_REG_DEBUG
 8

	)

40 
	#LTRACE_REG_DUMP
 12

	)

42 
…ø˚_so·c
 *
	gthe_åa˚
;

45 
	$…ø˚_⁄
(
uöt32_t
 
code
)

47 i‡(
the_åa˚
 !
NULL
) {

48 
	`bus_wrôe_ªgi°î
(
the_åa˚
->
…_busd©a
,Åhe_åa˚->
…_bu•os
,

49 
LTRACE_REG_TRON
, 
code
);

51 
	}
}

54 
	$…ø˚_off
(
uöt32_t
 
code
)

56 i‡(
the_åa˚
 !
NULL
) {

57 
	`bus_wrôe_ªgi°î
(
the_åa˚
->
…_busd©a
,Åhe_åa˚->
…_bu•os
,

58 
LTRACE_REG_TROFF
, 
code
);

60 
	}
}

63 
	$…ø˚_debug
(
uöt32_t
 
code
)

65 i‡(
the_åa˚
 !
NULL
) {

66 
	`bus_wrôe_ªgi°î
(
the_åa˚
->
…_busd©a
,Åhe_åa˚->
…_bu•os
,

67 
LTRACE_REG_DEBUG
, 
code
);

69 
	}
}

72 
	$…ø˚_dump
(
uöt32_t
 
code
)

74 i‡(
the_åa˚
 !
NULL
) {

75 
	`bus_wrôe_ªgi°î
(
the_åa˚
->
…_busd©a
,Åhe_åa˚->
…_bu•os
,

76 
LTRACE_REG_DUMP
, 
code
);

78 
	}
}

81 
	$c⁄fig_…ø˚
(
…ø˚_so·c
 *
sc
, 
…ø˚no
)

83 ()
…ø˚no
;

84 
the_åa˚
 = 
sc
;

86 
	}
}

	@dev/lamebus/ltrace.h

30 #i‚de‡
_LAMEBUS_LTRACE_H_


31 
	#_LAMEBUS_LTRACE_H_


	)

33 
	s…ø˚_so·c
 {

35 *
	m…_busd©a
;

36 
uöt32_t
 
	m…_bu•os
;

62 
…ø˚_⁄
(
uöt32_t
 
code
);

63 
…ø˚_off
(
uöt32_t
 
code
);

64 
…ø˚_debug
(
uöt32_t
 
code
);

65 
…ø˚_dump
(
uöt32_t
 
code
);

	@dev/lamebus/ltrace_att.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<œmebus/œmebus.h
>

33 
	~<œmebus/…ø˚.h
>

34 
	~"autoc⁄f.h
"

37 
	#LOW_VERSION
 1

	)

39 
	#HIGH_VERSION
 1

	)

41 
…ø˚_so·c
 *

42 
	$©èch_…ø˚_to_œmebus
(
…ø˚no
, 
œmebus_so·c
 *
sc
)

44 
…ø˚_so·c
 *
…
;

45 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_TRACE
,

46 
LOW_VERSION
, 
HIGH_VERSION
);

47 i‡(
¶Ÿ
 < 0) {

48  
NULL
;

51 
…
 = 
	`kmÆloc
((
…ø˚_so·c
));

52 i‡(
…
==
NULL
) {

53  
NULL
;

56 ()
…ø˚no
;

58 
…
->
…_busd©a
 = 
sc
;

59 
…
->
…_bu•os
 = 
¶Ÿ
;

61 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

63  
…
;

64 
	}
}

	@dev/lamebus/random_lrandom.c

35 
	~<ty≥s.h
>

36 
	~<lib.h
>

37 
	~<gíîic/øndom.h
>

38 
	~<œmebus/Ã™dom.h
>

39 
	~"autoc⁄f.h
"

41 
øndom_so·c
 *

42 
	$©èch_øndom_to_Ã™dom
(
øndomno
, 
Ã™dom_so·c
 *
ls
)

44 
øndom_so·c
 *
rs
 = 
	`kmÆloc
((random_softc));

45 i‡(
rs
==
NULL
) {

46  
NULL
;

49 ()
øndomno
;

51 
rs
->
rs_devd©a
 = 
ls
;

52 
rs
->
rs_øndom
 = 
Ã™dom_øndom
;

53 
rs
->
rs_øndmax
 = 
Ã™dom_øndmax
;

54 
rs
->
rs_ªad
 = 
Ã™dom_ªad
;

56  
rs
;

57 
	}
}

	@dev/lamebus/rtclock_ltimer.c

41 
	~<ty≥s.h
>

42 
	~<lib.h
>

43 
	~<gíîic/π˛ock.h
>

44 
	~<œmebus/…imî.h
>

45 
	~"autoc⁄f.h
"

47 
π˛ock_so·c
 *

48 
	$©èch_π˛ock_to_…imî
(
π˛ockno
, 
…imî_so·c
 *
ls
)

54 
π˛ock_so·c
 *
πc
 = 
	`kmÆloc
((rtclock_softc));

55 i‡(
πc
==
NULL
) {

57  
NULL
;

60 ()
π˛ockno
;

62 
πc
->
πc_devd©a
 = 
ls
;

63 
πc
->
πc_gëtime
 = 
…imî_gëtime
;

65  
πc
;

66 
	}
}

	@fs/sfs/sfs_fs.c

36 
	~<ty≥s.h
>

37 
	~<kîn/î∫o.h
>

38 
	~<lib.h
>

39 
	~<¨øy.h
>

40 
	~<bôm≠.h
>

41 
	~<uio.h
>

42 
	~<vfs.h
>

43 
	~<devi˚.h
>

44 
	~<sfs.h
>

47 
	#SFS_FS_BITMAPSIZE
(
sfs
Ë
	`SFS_BITMAPSIZE
((sfs)->
sfs_su≥r
.
•_nblocks
)

	)

48 
	#SFS_FS_BITBLOCKS
(
sfs
Ë
	`SFS_BITBLOCKS
((sfs)->
sfs_su≥r
.
•_nblocks
)

	)

70 
	$sfs_m≠io
(
sfs_fs
 *
sfs
, 
uio_rw
 
rw
)

72 
uöt32_t
 
j
, 
m≠size
;

73 *
bôd©a
;

74 
ªsu…
;

77 
m≠size
 = 
	`SFS_FS_BITBLOCKS
(
sfs
);

80 
bôd©a
 = 
	`bôm≠_gëd©a
(
sfs
->
sfs_‰ìm≠
);

83 
j
=0; j<
m≠size
; j++) {

86 *
±r
 = 
bôd©a
 + 
j
*
SFS_BLOCKSIZE
;

89 i‡(
rw
 =
UIO_READ
) {

90 
ªsu…
 = 
	`sfs_rblock
(
sfs
, 
±r
, 
SFS_MAP_LOCATION
+
j
);

93 
ªsu…
 = 
	`sfs_wblock
(
sfs
, 
±r
, 
SFS_MAP_LOCATION
+
j
);

97 i‡(
ªsu…
) {

98  
ªsu…
;

102 
	}
}

111 
	$sfs_sync
(
fs
 *fs)

113 
sfs_fs
 *
sfs
;

114 
i
, 
num
;

115 
ªsu…
;

117 
	`vfs_biglock_acquúe
();

149 
sfs
 = 
fs
->
fs_d©a
;

152 
num
 = 
	`vnodóºay_num
(
sfs
->
sfs_vnodes
);

153 
i
=0; i<
num
; i++) {

154 
vnode
 *
v
 = 
	`vnodóºay_gë
(
sfs
->
sfs_vnodes
, 
i
);

155 
	`VOP_FSYNC
(
v
);

159 i‡(
sfs
->
sfs_‰ìm≠dúty
) {

160 
ªsu…
 = 
	`sfs_m≠io
(
sfs
, 
UIO_WRITE
);

161 i‡(
ªsu…
) {

162 
	`vfs_biglock_ªÀa£
();

163  
ªsu…
;

165 
sfs
->
sfs_‰ìm≠dúty
 = 
Ál£
;

169 i‡(
sfs
->
sfs_su≥rdúty
) {

170 
ªsu…
 = 
	`sfs_wblock
(
sfs
, &sfs->
sfs_su≥r
, 
SFS_SB_LOCATION
);

171 i‡(
ªsu…
) {

172 
	`vfs_biglock_ªÀa£
();

173  
ªsu…
;

175 
sfs
->
sfs_su≥rdúty
 = 
Ál£
;

178 
	`vfs_biglock_ªÀa£
();

180 
	}
}

189 
	$sfs_gëvﬁ«me
(
fs
 *fs)

191 
sfs_fs
 *
sfs
 = 
fs
->
fs_d©a
;

192 c⁄° *
ªt
;

194 
	`vfs_biglock_acquúe
();

195 
ªt
 = 
sfs
->
sfs_su≥r
.
•_vﬁ«me
;

196 
	`vfs_biglock_ªÀa£
();

198  
ªt
;

199 
	}
}

208 
	$sfs_unmou¡
(
fs
 *fs)

210 
sfs_fs
 *
sfs
 = 
fs
->
fs_d©a
;

212 
	`vfs_biglock_acquúe
();

215 i‡(
	`vnodóºay_num
(
sfs
->
sfs_vnodes
) > 0) {

216 
	`vfs_biglock_ªÀa£
();

217  
EBUSY
;

221 
	`KASSERT
(
sfs
->
sfs_su≥rdúty
 =
Ál£
);

222 
	`KASSERT
(
sfs
->
sfs_‰ìm≠dúty
 =
Ál£
);

225 
	`vnodóºay_de°roy
(
sfs
->
sfs_vnodes
);

226 
	`bôm≠_de°roy
(
sfs
->
sfs_‰ìm≠
);

229 ()
sfs
->
sfs_devi˚
;

232 
	`k‰ì
(
sfs
);

235 
	`vfs_biglock_ªÀa£
();

237 
	}
}

255 
	$sfs_domou¡
(*
›ti⁄s
, 
devi˚
 *
dev
, 
fs
 **
ªt
)

257 
ªsu…
;

258 
sfs_fs
 *
sfs
;

260 
	`vfs_biglock_acquúe
();

263 ()
›ti⁄s
;

268 
	`KASSERT
((
sfs_su≥r
)==
SFS_BLOCKSIZE
);

269 
	`KASSERT
((
sfs_öode
)==
SFS_BLOCKSIZE
);

270 
	`KASSERT
(
SFS_BLOCKSIZE
 % (
sfs_dú
) == 0);

280 i‡(
dev
->
d_blocksize
 !
SFS_BLOCKSIZE
) {

281 
	`vfs_biglock_ªÀa£
();

282  
ENXIO
;

286 
sfs
 = 
	`kmÆloc
((
sfs_fs
));

287 i‡(
sfs
==
NULL
) {

288 
	`vfs_biglock_ªÀa£
();

289  
ENOMEM
;

293 
sfs
->
sfs_vnodes
 = 
	`vnodóºay_¸óã
();

294 i‡(
sfs
->
sfs_vnodes
 =
NULL
) {

295 
	`k‰ì
(
sfs
);

296 
	`vfs_biglock_ªÀa£
();

297  
ENOMEM
;

301 
sfs
->
sfs_devi˚
 = 
dev
;

304 
ªsu…
 = 
	`sfs_rblock
(
sfs
, &sfs->
sfs_su≥r
, 
SFS_SB_LOCATION
);

305 i‡(
ªsu…
) {

306 
	`vnodóºay_de°roy
(
sfs
->
sfs_vnodes
);

307 
	`k‰ì
(
sfs
);

308 
	`vfs_biglock_ªÀa£
();

309  
ªsu…
;

314 i‡(
sfs
->
sfs_su≥r
.
•_magic
 !
SFS_MAGIC
) {

315 
	`k¥ötf
("sfs: Wrong magicÇumber in superblock "

317 
sfs
->
sfs_su≥r
.
•_magic
,

318 
SFS_MAGIC
);

319 
	`vnodóºay_de°roy
(
sfs
->
sfs_vnodes
);

320 
	`k‰ì
(
sfs
);

321 
	`vfs_biglock_ªÀa£
();

322  
EINVAL
;

325 i‡(
sfs
->
sfs_su≥r
.
•_nblocks
 > 
dev
->
d_blocks
) {

326 
	`k¥ötf
("sfs: warning - fs has %u blocks, device has %u\n",

327 
sfs
->
sfs_su≥r
.
•_nblocks
, 
dev
->
d_blocks
);

331 
sfs
->
sfs_su≥r
.
•_vﬁ«me
[(sfs->sfs_super.sp_volname)-1] = 0;

334 
sfs
->
sfs_‰ìm≠
 = 
	`bôm≠_¸óã
(
	`SFS_FS_BITMAPSIZE
(sfs));

335 i‡(
sfs
->
sfs_‰ìm≠
 =
NULL
) {

336 
	`vnodóºay_de°roy
(
sfs
->
sfs_vnodes
);

337 
	`k‰ì
(
sfs
);

338 
	`vfs_biglock_ªÀa£
();

339  
ENOMEM
;

341 
ªsu…
 = 
	`sfs_m≠io
(
sfs
, 
UIO_READ
);

342 i‡(
ªsu…
) {

343 
	`bôm≠_de°roy
(
sfs
->
sfs_‰ìm≠
);

344 
	`vnodóºay_de°roy
(
sfs
->
sfs_vnodes
);

345 
	`k‰ì
(
sfs
);

346 
	`vfs_biglock_ªÀa£
();

347  
ªsu…
;

351 
sfs
->
sfs_absfs
.
fs_sync
 = 
sfs_sync
;

352 
sfs
->
sfs_absfs
.
fs_gëvﬁ«me
 = 
sfs_gëvﬁ«me
;

353 
sfs
->
sfs_absfs
.
fs_gëroŸ
 = 
sfs_gëroŸ
;

354 
sfs
->
sfs_absfs
.
fs_unmou¡
 = 
sfs_unmou¡
;

355 
sfs
->
sfs_absfs
.
fs_d©a
 = sfs;

358 
sfs
->
sfs_su≥rdúty
 = 
Ál£
;

359 
sfs
->
sfs_‰ìm≠dúty
 = 
Ál£
;

362 *
ªt
 = &
sfs
->
sfs_absfs
;

364 
	`vfs_biglock_ªÀa£
();

366 
	}
}

373 
	$sfs_mou¡
(c⁄° *
devi˚
)

375  
	`vfs_mou¡
(
devi˚
, 
NULL
, 
sfs_domou¡
);

376 
	}
}

	@fs/sfs/sfs_io.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<lib.h
>

33 
	~<uio.h
>

34 
	~<vfs.h
>

35 
	~<devi˚.h
>

36 
	~<sfs.h
>

48 
	$sfs_rwblock
(
sfs_fs
 *
sfs
, 
uio
 *uio)

50 
ªsu…
;

51 
åõs
=0;

53 
	`KASSERT
(
	`vfs_biglock_do_i_hﬁd
());

55 
	`DEBUG
(
DB_SFS
, "sfs: %s %llu\n",

56 
uio
->
uio_rw
 =
UIO_READ
 ? "read" : "write",

57 
uio
->
uio_off£t
 / 
SFS_BLOCKSIZE
);

59 
ªåy
:

60 
ªsu…
 = 
sfs
->
sfs_devi˚
->
	`d_io
(sfs->sfs_devi˚, 
uio
);

61 i‡(
ªsu…
 =
EINVAL
) {

67 
	`∑nic
("sfs: d_ioÑeturned EINVAL\n");

69 i‡(
ªsu…
 =
EIO
) {

70 i‡(
åõs
 == 0) {

71 
åõs
++;

72 
	`k¥ötf
("sfs: block %llu I/OÉrror,Ñetrying\n",

73 
uio
->
uio_off£t
 / 
SFS_BLOCKSIZE
);

74 
ªåy
;

76 i‡(
åõs
 < 10) {

77 
åõs
++;

78 
ªåy
;

81 
	`k¥ötf
("sfs: block %llu I/OÉrror, giving upáfter "

83 
uio
->
uio_off£t
 / 
SFS_BLOCKSIZE
, 
åõs
);

86  
ªsu…
;

87 
	}
}

90 
	$sfs_rblock
(
sfs_fs
 *
sfs
, *
d©a
, 
uöt32_t
 
block
)

92 
iovec
 
iov
;

93 
uio
 
ku
;

95 
	`SFSUIO
(&
iov
, &
ku
, 
d©a
, 
block
, 
UIO_READ
);

96  
	`sfs_rwblock
(
sfs
, &
ku
);

97 
	}
}

100 
	$sfs_wblock
(
sfs_fs
 *
sfs
, *
d©a
, 
uöt32_t
 
block
)

102 
iovec
 
iov
;

103 
uio
 
ku
;

105 
	`SFSUIO
(&
iov
, &
ku
, 
d©a
, 
block
, 
UIO_WRITE
);

106  
	`sfs_rwblock
(
sfs
, &
ku
);

107 
	}
}

	@fs/sfs/sfs_vnode.c

35 
	~<ty≥s.h
>

36 
	~<kîn/î∫o.h
>

37 
	~<kîn/f˙é.h
>

38 
	~<°©.h
>

39 
	~<lib.h
>

40 
	~<¨øy.h
>

41 
	~<bôm≠.h
>

42 
	~<uio.h
>

43 
	~<synch.h
>

44 
	~<vfs.h
>

45 
	~<devi˚.h
>

46 
	~<sfs.h
>

49 
sfs_lﬂdvnode
(
sfs_fs
 *
sfs
, 
uöt32_t
 
öo
, 
ty≥
,

50 
sfs_vnode
 **
ªt
);

59 
	$sfs_˛órblock
(
sfs_fs
 *
sfs
, 
uöt32_t
 
block
)

62 
zîos
[
SFS_BLOCKSIZE
];

63  
	`sfs_wblock
(
sfs
, 
zîos
, 
block
);

64 
	}
}

69 
	$sfs_sync_öode
(
sfs_vnode
 *
sv
)

71 i‡(
sv
->
sv_dúty
) {

72 
sfs_fs
 *
sfs
 = 
sv
->
sv_v
.
vn_fs
->
fs_d©a
;

73 
ªsu…
 = 
	`sfs_wblock
(
sfs
, &
sv
->
sv_i
, sv->
sv_öo
);

74 i‡(
ªsu…
) {

75  
ªsu…
;

77 
sv
->
sv_dúty
 = 
Ál£
;

80 
	}
}

91 
	$sfs_bÆloc
(
sfs_fs
 *
sfs
, 
uöt32_t
 *
diskblock
)

93 
ªsu…
;

95 
ªsu…
 = 
	`bôm≠_Æloc
(
sfs
->
sfs_‰ìm≠
, 
diskblock
);

96 i‡(
ªsu…
) {

97  
ªsu…
;

99 
sfs
->
sfs_‰ìm≠dúty
 = 
åue
;

101 i‡(*
diskblock
 >
sfs
->
sfs_su≥r
.
•_nblocks
) {

102 
	`∑nic
("sfs: bÆloc: invÆid block %u\n", *
diskblock
);

106  
	`sfs_˛órblock
(
sfs
, *
diskblock
);

107 
	}
}

114 
	$sfs_b‰ì
(
sfs_fs
 *
sfs
, 
uöt32_t
 
diskblock
)

116 
	`bôm≠_unm¨k
(
sfs
->
sfs_‰ìm≠
, 
diskblock
);

117 
sfs
->
sfs_‰ìm≠dúty
 = 
åue
;

118 
	}
}

125 
	$sfs_bu£d
(
sfs_fs
 *
sfs
, 
uöt32_t
 
diskblock
)

127 i‡(
diskblock
 >
sfs
->
sfs_su≥r
.
•_nblocks
) {

128 
	`∑nic
("sfs: sfs_bused called on out ofÑange block %u\n",

129 
diskblock
);

131  
	`bôm≠_is£t
(
sfs
->
sfs_‰ìm≠
, 
diskblock
);

132 
	}
}

146 
	$sfs_bm≠
(
sfs_vnode
 *
sv
, 
uöt32_t
 
fûeblock
, 
dﬂŒoc
,

147 
uöt32_t
 *
diskblock
)

156 
uöt32_t
 
idbuf
[
SFS_DBPERIDB
];

158 
sfs_fs
 *
sfs
 = 
sv
->
sv_v
.
vn_fs
->
fs_d©a
;

159 
uöt32_t
 
block
;

160 
uöt32_t
 
idblock
;

161 
uöt32_t
 
idnum
, 
idoff
;

162 
ªsu…
;

164 
	`KASSERT
((
idbuf
)==
SFS_BLOCKSIZE
);

169 i‡(
fûeblock
 < 
SFS_NDIRECT
) {

173 
block
 = 
sv
->
sv_i
.
sfi_dúe˘
[
fûeblock
];

178 i‡(
block
==0 && 
dﬂŒoc
) {

179 
ªsu…
 = 
	`sfs_bÆloc
(
sfs
, &
block
);

180 i‡(
ªsu…
) {

181  
ªsu…
;

185 
sv
->
sv_i
.
sfi_dúe˘
[
fûeblock
] = 
block
;

186 
sv
->
sv_dúty
 = 
åue
;

192 i‡(
block
 !0 && !
	`sfs_bu£d
(
sfs
, block)) {

193 
	`∑nic
("sfs: Data block %u (block %u of file %u) "

194 "m¨ked fªe\n", 
block
, 
fûeblock
, 
sv
->
sv_öo
);

196 *
diskblock
 = 
block
;

206 
fûeblock
 -
SFS_NDIRECT
;

209 
idnum
 = 
fûeblock
 / 
SFS_DBPERIDB
;

210 
idoff
 = 
fûeblock
 % 
SFS_DBPERIDB
;

216 i‡(
idnum
 > 0) {

217  
EFBIG
;

221 
idblock
 = 
sv
->
sv_i
.
sfi_ödúe˘
;

223 i‡(
idblock
==0 && !
dﬂŒoc
) {

229 *
diskblock
 = 0;

232 i‡(
idblock
==0) {

239 
ªsu…
 = 
	`sfs_bÆloc
(
sfs
, &
idblock
);

240 i‡(
ªsu…
) {

241  
ªsu…
;

245 
sv
->
sv_i
.
sfi_ödúe˘
 = 
idblock
;

248 
sv
->
sv_dúty
 = 
åue
;

251 
	`bzîo
(
idbuf
, (idbuf));

257 
ªsu…
 = 
	`sfs_rblock
(
sfs
, 
idbuf
, 
idblock
);

258 i‡(
ªsu…
) {

259  
ªsu…
;

264 
block
 = 
idbuf
[
idoff
];

267 i‡(
block
==0 && 
dﬂŒoc
) {

268 
ªsu…
 = 
	`sfs_bÆloc
(
sfs
, &
block
);

269 i‡(
ªsu…
) {

270  
ªsu…
;

274 
idbuf
[
idoff
] = 
block
;

277 
ªsu…
 = 
	`sfs_wblock
(
sfs
, 
idbuf
, 
idblock
);

278 i‡(
ªsu…
) {

279  
ªsu…
;

284 i‡(
block
 !0 && !
	`sfs_bu£d
(
sfs
, block)) {

285 
	`∑nic
("sfs: Data block %u (block %u of file %u) marked free\n",

286 
block
, 
fûeblock
, 
sv
->
sv_öo
);

288 *
diskblock
 = 
block
;

290 
	}
}

308 
	$sfs_∑πülio
(
sfs_vnode
 *
sv
, 
uio
 *uio,

309 
uöt32_t
 
skù°¨t
, uöt32_à
Àn
)

318 
iobuf
[
SFS_BLOCKSIZE
];

320 
sfs_fs
 *
sfs
 = 
sv
->
sv_v
.
vn_fs
->
fs_d©a
;

321 
uöt32_t
 
diskblock
;

322 
uöt32_t
 
fûeblock
;

323 
ªsu…
;

326 
dﬂŒoc
 = (
uio
->
uio_rw
==
UIO_WRITE
);

328 
	`KASSERT
(
skù°¨t
 + 
Àn
 <
SFS_BLOCKSIZE
);

331 
fûeblock
 = 
uio
->
uio_off£t
 / 
SFS_BLOCKSIZE
;

334 
ªsu…
 = 
	`sfs_bm≠
(
sv
, 
fûeblock
, 
dﬂŒoc
, &
diskblock
);

335 i‡(
ªsu…
) {

336  
ªsu…
;

339 i‡(
diskblock
 == 0) {

344 
	`KASSERT
(
uio
->
uio_rw
 =
UIO_READ
);

345 
	`bzîo
(
iobuf
, (iobuf));

351 
ªsu…
 = 
	`sfs_rblock
(
sfs
, 
iobuf
, 
diskblock
);

352 i‡(
ªsu…
) {

353  
ªsu…
;

360 
ªsu…
 = 
	`uiomove
(
iobuf
+
skù°¨t
, 
Àn
, 
uio
);

361 i‡(
ªsu…
) {

362  
ªsu…
;

368 i‡(
uio
->
uio_rw
 =
UIO_WRITE
) {

369 
ªsu…
 = 
	`sfs_wblock
(
sfs
, 
iobuf
, 
diskblock
);

370 i‡(
ªsu…
) {

371  
ªsu…
;

376 
	}
}

383 
	$sfs_blockio
(
sfs_vnode
 *
sv
, 
uio
 *uio)

385 
sfs_fs
 *
sfs
 = 
sv
->
sv_v
.
vn_fs
->
fs_d©a
;

386 
uöt32_t
 
diskblock
;

387 
uöt32_t
 
fûeblock
;

388 
ªsu…
;

389 
dﬂŒoc
 = (
uio
->
uio_rw
==
UIO_WRITE
);

390 
off_t
 
ßveoff
;

391 
off_t
 
diskoff
;

392 
off_t
 
ßvîes
;

393 
off_t
 
diskªs
;

396 
fûeblock
 = 
uio
->
uio_off£t
 / 
SFS_BLOCKSIZE
;

399 
ªsu…
 = 
	`sfs_bm≠
(
sv
, 
fûeblock
, 
dﬂŒoc
, &
diskblock
);

400 i‡(
ªsu…
) {

401  
ªsu…
;

404 i‡(
diskblock
 == 0) {

411 
	`KASSERT
(
uio
->
uio_rw
 =
UIO_READ
);

412  
	`uiomovezîos
(
SFS_BLOCKSIZE
, 
uio
);

419 
ßveoff
 = 
uio
->
uio_off£t
;

420 
diskoff
 = 
diskblock
 * 
SFS_BLOCKSIZE
;

421 
uio
->
uio_off£t
 = 
diskoff
;

426 
	`KASSERT
(
uio
->
uio_ªsid
 >
SFS_BLOCKSIZE
);

427 
ßvîes
 = 
uio
->
uio_ªsid
;

428 
diskªs
 = 
SFS_BLOCKSIZE
;

429 
uio
->
uio_ªsid
 = 
diskªs
;

431 
ªsu…
 = 
	`sfs_rwblock
(
sfs
, 
uio
);

437 
uio
->
uio_off£t
 = (uio->uio_off£à- 
diskoff
Ë+ 
ßveoff
;

438 
uio
->
uio_ªsid
 = (uio->uio_ªsid - 
diskªs
Ë+ 
ßvîes
;

440  
ªsu…
;

441 
	}
}

448 
	$sfs_io
(
sfs_vnode
 *
sv
, 
uio
 *uio)

450 
uöt32_t
 
blkoff
;

451 
uöt32_t
 
nblocks
, 
i
;

452 
ªsu…
 = 0;

453 
uöt32_t
 
exå¨esid
 = 0;

460 i‡(
uio
->
uio_rw
 =
UIO_READ
) {

461 
off_t
 
size
 = 
sv
->
sv_i
.
sfi_size
;

462 
off_t
 
ídpos
 = 
uio
->
uio_off£t
 + uio->
uio_ªsid
;

464 i‡(
uio
->
uio_off£t
 >
size
) {

469 i‡(
ídpos
 > 
size
) {

470 
exå¨esid
 = 
ídpos
 - 
size
;

471 
	`KASSERT
(
uio
->
uio_ªsid
 > 
exå¨esid
);

472 
uio
->
uio_ªsid
 -
exå¨esid
;

479 
blkoff
 = 
uio
->
uio_off£t
 % 
SFS_BLOCKSIZE
;

480 i‡(
blkoff
 != 0) {

482 
uöt32_t
 
skù
 = 
blkoff
;

485 
uöt32_t
 
Àn
 = 
SFS_BLOCKSIZE
 - 
blkoff
;

488 i‡(
Àn
 > 
uio
->
uio_ªsid
) {

489 
Àn
 = 
uio
->
uio_ªsid
;

493 
ªsu…
 = 
	`sfs_∑πülio
(
sv
, 
uio
, 
skù
, 
Àn
);

494 i‡(
ªsu…
) {

495 
out
;

500 i‡(
uio
->
uio_ªsid
==0) {

501 
out
;

507 
	`KASSERT
(
uio
->
uio_off£t
 % 
SFS_BLOCKSIZE
 == 0);

508 
nblocks
 = 
uio
->
uio_ªsid
 / 
SFS_BLOCKSIZE
;

509 
i
=0; i<
nblocks
; i++) {

510 
ªsu…
 = 
	`sfs_blockio
(
sv
, 
uio
);

511 i‡(
ªsu…
) {

512 
out
;

519 
	`KASSERT
(
uio
->
uio_ªsid
 < 
SFS_BLOCKSIZE
);

521 i‡(
uio
->
uio_ªsid
 > 0) {

522 
ªsu…
 = 
	`sfs_∑πülio
(
sv
, 
uio
, 0, uio->
uio_ªsid
);

523 i‡(
ªsu…
) {

524 
out
;

528 
out
:

531 i‡(
uio
->
uio_rw
 =
UIO_WRITE
 &&

532 
uio
->
uio_off£t
 > (
off_t
)
sv
->
sv_i
.
sfi_size
) {

533 
sv
->
sv_i
.
sfi_size
 = 
uio
->
uio_off£t
;

534 
sv
->
sv_dúty
 = 
åue
;

538 
uio
->
uio_ªsid
 +
exå¨esid
;

541  
ªsu…
;

542 
	}
}

554 
	$sfs_ªaddú
(
sfs_vnode
 *
sv
, 
sfs_dú
 *
sd
, 
¶Ÿ
)

556 
iovec
 
iov
;

557 
uio
 
ku
;

558 
off_t
 
a˘uÆpos
;

559 
ªsu…
;

562 
a˘uÆpos
 = 
¶Ÿ
 * (
sfs_dú
);

565 
	`uio_köô
(&
iov
, &
ku
, 
sd
, (
sfs_dú
), 
a˘uÆpos
, 
UIO_READ
);

568 
ªsu…
 = 
	`sfs_io
(
sv
, &
ku
);

569 i‡(
ªsu…
) {

570  
ªsu…
;

574 i‡(
ku
.
uio_ªsid
 > 0) {

575 
	`∑nic
("sfs:Ñóddú: Sh‹àíåy (öodê%u)\n", 
sv
->
sv_öo
);

580 
	}
}

588 
	$sfs_wrôedú
(
sfs_vnode
 *
sv
, 
sfs_dú
 *
sd
, 
¶Ÿ
)

590 
iovec
 
iov
;

591 
uio
 
ku
;

592 
off_t
 
a˘uÆpos
;

593 
ªsu…
;

596 
	`KASSERT
(
¶Ÿ
>=0);

597 
a˘uÆpos
 = 
¶Ÿ
 * (
sfs_dú
);

600 
	`uio_köô
(&
iov
, &
ku
, 
sd
, (
sfs_dú
), 
a˘uÆpos
, 
UIO_WRITE
);

603 
ªsu…
 = 
	`sfs_io
(
sv
, &
ku
);

604 i‡(
ªsu…
) {

605  
ªsu…
;

609 i‡(
ku
.
uio_ªsid
 > 0) {

610 
	`∑nic
("sfs: wrôedú: Sh‹àwrôê(öÿ%u)\n", 
sv
->
sv_öo
);

615 
	}
}

624 
	$sfs_dú_√¡rõs
(
sfs_vnode
 *
sv
)

626 
off_t
 
size
;

628 
	`KASSERT
(
sv
->
sv_i
.
sfi_ty≥
 =
SFS_TYPE_DIR
);

630 
size
 = 
sv
->
sv_i
.
sfi_size
;

631 i‡(
size
 % (
sfs_dú
) != 0) {

632 
	`∑nic
("sfs: directory %u: Invalid size %llu\n",

633 
sv
->
sv_öo
, 
size
);

636  
size
 / (
sfs_dú
);

637 
	}
}

647 
	$sfs_dú_föd«me
(
sfs_vnode
 *
sv
, c⁄° *
«me
,

648 
uöt32_t
 *
öo
, *
¶Ÿ
, *
em±y¶Ÿ
)

650 
sfs_dú
 
tsd
;

651 
found
 = 0;

652 
√¡rõs
 = 
	`sfs_dú_√¡rõs
(
sv
);

653 
i
, 
ªsu…
;

656 
i
=0; i<
√¡rõs
; i++) {

659 
ªsu…
 = 
	`sfs_ªaddú
(
sv
, &
tsd
, 
i
);

660 i‡(
ªsu…
) {

661  
ªsu…
;

663 i‡(
tsd
.
sfd_öo
 =
SFS_NOINO
) {

665 i‡(
em±y¶Ÿ
 !
NULL
) {

666 *
em±y¶Ÿ
 = 
i
;

671 
tsd
.
sfd_«me
[(tsd.sfd_name)-1] = 0;

672 i‡(!
	`°rcmp
(
tsd
.
sfd_«me
, 
«me
)) {

675 
	`KASSERT
(
found
==0);

677 
found
 = 1;

678 i‡(
¶Ÿ
 !
NULL
) {

679 *
¶Ÿ
 = 
i
;

681 i‡(
öo
 !
NULL
) {

682 *
öo
 = 
tsd
.
sfd_öo
;

688  
found
 ? 0 : 
ENOENT
;

689 
	}
}

697 
	$sfs_dú_lök
(
sfs_vnode
 *
sv
, c⁄° *
«me
, 
uöt32_t
 
öo
, *
¶Ÿ
)

699 
em±y¶Ÿ
 = -1;

700 
ªsu…
;

701 
sfs_dú
 
sd
;

704 
ªsu…
 = 
	`sfs_dú_föd«me
(
sv
, 
«me
, 
NULL
, NULL, &
em±y¶Ÿ
);

705 i‡(
ªsu…
!=0 &&Ñesu…!=
ENOENT
) {

706  
ªsu…
;

708 i‡(
ªsu…
==0) {

709  
EEXIST
;

712 i‡(
	`°æí
(
«me
)+1 > (
sd
.
sfd_«me
)) {

713  
ENAMETOOLONG
;

717 i‡(
em±y¶Ÿ
 < 0) {

718 
em±y¶Ÿ
 = 
	`sfs_dú_√¡rõs
(
sv
);

722 
	`bzîo
(&
sd
, (sd));

723 
sd
.
sfd_öo
 = 
öo
;

724 
	`°r˝y
(
sd
.
sfd_«me
, 
«me
);

727 i‡(
¶Ÿ
) {

728 *
¶Ÿ
 = 
em±y¶Ÿ
;

732  
	`sfs_wrôedú
(
sv
, &
sd
, 
em±y¶Ÿ
);

734 
	}
}

741 
	$sfs_dú_u∆ök
(
sfs_vnode
 *
sv
, 
¶Ÿ
)

743 
sfs_dú
 
sd
;

746 
	`bzîo
(&
sd
, (sd));

747 
sd
.
sfd_öo
 = 
SFS_NOINO
;

750  
	`sfs_wrôedú
(
sv
, &
sd
, 
¶Ÿ
);

751 
	}
}

759 
	$sfs_look⁄˚
(
sfs_vnode
 *
sv
, c⁄° *
«me
,

760 
sfs_vnode
 **
ªt
,

761 *
¶Ÿ
)

763 
sfs_fs
 *
sfs
 = 
sv
->
sv_v
.
vn_fs
->
fs_d©a
;

764 
uöt32_t
 
öo
;

765 
ªsu…
;

767 
ªsu…
 = 
	`sfs_dú_föd«me
(
sv
, 
«me
, &
öo
, 
¶Ÿ
, 
NULL
);

768 i‡(
ªsu…
) {

769  
ªsu…
;

772 
ªsu…
 = 
	`sfs_lﬂdvnode
(
sfs
, 
öo
, 
SFS_TYPE_INVAL
, 
ªt
);

773 i‡(
ªsu…
) {

774  
ªsu…
;

777 i‡((*
ªt
)->
sv_i
.
sfi_lökcou¡
 == 0) {

778 
	`∑nic
("sfs: Link count of file %u found in dir %u is 0\n",

779 (*
ªt
)->
sv_öo
, 
sv
->sv_ino);

783 
	}
}

794 
	$sfs_makeobj
(
sfs_fs
 *
sfs
, 
ty≥
, 
sfs_vnode
 **
ªt
)

796 
uöt32_t
 
öo
;

797 
ªsu…
;

804 
ªsu…
 = 
	`sfs_bÆloc
(
sfs
, &
öo
);

805 i‡(
ªsu…
) {

806  
ªsu…
;

813  
	`sfs_lﬂdvnode
(
sfs
, 
öo
, 
ty≥
, 
ªt
);

814 
	}
}

825 
	$sfs_›í
(
vnode
 *
v
, 
›íÊags
)

835 i‡(
›íÊags
 & 
O_APPEND
) {

836  
EUNIMP
;

839 ()
v
;

842 
	}
}

850 
	$sfs_›ídú
(
vnode
 *
v
, 
›íÊags
)

852 
›íÊags
 & 
O_ACCMODE
) {

853 
O_RDONLY
:

855 
O_WRONLY
:

856 
O_RDWR
:

858  
EISDIR
;

860 i‡(
›íÊags
 & 
O_APPEND
) {

861  
EISDIR
;

864 ()
v
;

866 
	}
}

876 
	$sfs_˛o£
(
vnode
 *
v
)

879  
	`VOP_FSYNC
(
v
);

880 
	}
}

889 
	$sfs_ª˛aim
(
vnode
 *
v
)

891 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

892 
sfs_fs
 *
sfs
 = 
v
->
vn_fs
->
fs_d©a
;

893 
ix
, 
i
, 
num
;

894 
ªsu…
;

896 
	`vfs_biglock_acquúe
();

903 i‡(
v
->
vn_ªfcou¡
 != 1) {

906 
	`KASSERT
(
v
->
vn_ªfcou¡
>1);

907 
v
->
vn_ªfcou¡
--;

909 
	`vfs_biglock_ªÀa£
();

910  
EBUSY
;

914 i‡(
sv
->
sv_i
.
sfi_lökcou¡
==0) {

915 
ªsu…
 = 
	`VOP_TRUNCATE
(&
sv
->
sv_v
, 0);

916 i‡(
ªsu…
) {

917 
	`vfs_biglock_ªÀa£
();

918  
ªsu…
;

923 
ªsu…
 = 
	`sfs_sync_öode
(
sv
);

924 i‡(
ªsu…
) {

925 
	`vfs_biglock_ªÀa£
();

926  
ªsu…
;

930 i‡(
sv
->
sv_i
.
sfi_lökcou¡
==0) {

931 
	`sfs_b‰ì
(
sfs
, 
sv
->
sv_öo
);

935 
num
 = 
	`vnodóºay_num
(
sfs
->
sfs_vnodes
);

936 
ix
 = 
num
;

937 
i
=0; i<
num
; i++) {

938 
vnode
 *
v2
 = 
	`vnodóºay_gë
(
sfs
->
sfs_vnodes
, 
i
);

939 
sfs_vnode
 *
sv2
 = 
v2
->
vn_d©a
;

940 i‡(
sv2
 =
sv
) {

941 
ix
 = 
i
;

945 i‡(
ix
 =
num
) {

946 
	`∑nic
("sfs:Ñeclaim vnode %uÇot in vnodeÖool\n",

947 
sv
->
sv_öo
);

949 
	`vnodóºay_ªmove
(
sfs
->
sfs_vnodes
, 
ix
);

951 
	`VOP_CLEANUP
(&
sv
->
sv_v
);

953 
	`vfs_biglock_ªÀa£
();

956 
	`k‰ì
(
sv
);

960 
	}
}

967 
	$sfs_ªad
(
vnode
 *
v
, 
uio
 *uio)

969 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

970 
ªsu…
;

972 
	`KASSERT
(
uio
->
uio_rw
==
UIO_READ
);

974 
	`vfs_biglock_acquúe
();

975 
ªsu…
 = 
	`sfs_io
(
sv
, 
uio
);

976 
	`vfs_biglock_ªÀa£
();

978  
ªsu…
;

979 
	}
}

986 
	$sfs_wrôe
(
vnode
 *
v
, 
uio
 *uio)

988 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

989 
ªsu…
;

991 
	`KASSERT
(
uio
->
uio_rw
==
UIO_WRITE
);

993 
	`vfs_biglock_acquúe
();

994 
ªsu…
 = 
	`sfs_io
(
sv
, 
uio
);

995 
	`vfs_biglock_ªÀa£
();

997  
ªsu…
;

998 
	}
}

1005 
	$sfs_io˘l
(
vnode
 *
v
, 
›
, 
u£Ωå_t
 
d©a
)

1011 ()
v
;

1012 ()
›
;

1013 ()
d©a
;

1015  
EINVAL
;

1016 
	}
}

1023 
	$sfs_°©
(
vnode
 *
v
, 
°©
 *
°©buf
)

1025 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

1026 
ªsu…
;

1029 
	`bzîo
(
°©buf
, (
°©
));

1031 
ªsu…
 = 
	`VOP_GETTYPE
(
v
, &
°©buf
->
°_mode
);

1032 i‡(
ªsu…
) {

1033  
ªsu…
;

1036 
°©buf
->
°_size
 = 
sv
->
sv_i
.
sfi_size
;

1039 
°©buf
->
°_∆ök
 = 0;

1040 
°©buf
->
°_blocks
 = 0;

1045 
	}
}

1052 
	$sfs_gëty≥
(
vnode
 *
v
, 
uöt32_t
 *
ªt
)

1054 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

1056 
	`vfs_biglock_acquúe
();

1058 
sv
->
sv_i
.
sfi_ty≥
) {

1059 
SFS_TYPE_FILE
:

1060 *
ªt
 = 
S_IFREG
;

1061 
	`vfs_biglock_ªÀa£
();

1063 
SFS_TYPE_DIR
:

1064 *
ªt
 = 
S_IFDIR
;

1065 
	`vfs_biglock_ªÀa£
();

1068 
	`∑nic
("sfs: gettype: Invalid inodeÅype (inode %u,Åype %u)\n",

1069 
sv
->
sv_öo
, sv->
sv_i
.
sfi_ty≥
);

1070  
EINVAL
;

1071 
	}
}

1082 
	$sfs_åy£ek
(
vnode
 *
v
, 
off_t
 
pos
)

1084 i‡(
pos
<0) {

1085  
EINVAL
;

1089 ()
v
;

1092 
	}
}

1100 
	$sfs_fsync
(
vnode
 *
v
)

1102 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

1103 
ªsu…
;

1105 
	`vfs_biglock_acquúe
();

1106 
ªsu…
 = 
	`sfs_sync_öode
(
sv
);

1107 
	`vfs_biglock_ªÀa£
();

1109  
ªsu…
;

1110 
	}
}

1117 
	$sfs_mm≠
(
vnode
 *
v
 )

1119 ()
v
;

1120  
EUNIMP
;

1121 
	}
}

1128 
	$sfs_åunˇã
(
vnode
 *
v
, 
off_t
 
Àn
)

1137 
uöt32_t
 
idbuf
[
SFS_DBPERIDB
];

1139 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

1140 
sfs_fs
 *
sfs
 = 
sv
->
sv_v
.
vn_fs
->
fs_d©a
;

1143 
uöt32_t
 
blockÀn
 = 
	`DIVROUNDUP
(
Àn
, 
SFS_BLOCKSIZE
);

1145 
uöt32_t
 
i
, 
j
, 
block
;

1146 
uöt32_t
 
idblock
, 
ba£block
, 
highblock
;

1147 
ªsu…
;

1148 
ha¢⁄zîo
, 
iddúty
;

1150 
	`KASSERT
((
idbuf
)==
SFS_BLOCKSIZE
);

1152 
	`vfs_biglock_acquúe
();

1158 
i
=0; i<
SFS_NDIRECT
; i++) {

1159 
block
 = 
sv
->
sv_i
.
sfi_dúe˘
[
i
];

1160 i‡(
i
 >
blockÀn
 && 
block
 != 0) {

1161 
	`sfs_b‰ì
(
sfs
, 
block
);

1162 
sv
->
sv_i
.
sfi_dúe˘
[
i
] = 0;

1163 
sv
->
sv_dúty
 = 
åue
;

1168 
idblock
 = 
sv
->
sv_i
.
sfi_ödúe˘
;

1171 
ba£block
 = 
SFS_NDIRECT
;

1174 
highblock
 = 
ba£block
 + 
SFS_DBPERIDB
 - 1;

1176 i‡(
blockÀn
 < 
highblock
 && 
idblock
 != 0) {

1180 
ªsu…
 = 
	`sfs_rblock
(
sfs
, 
idbuf
, 
idblock
);

1181 i‡(
ªsu…
) {

1182 
	`vfs_biglock_ªÀa£
();

1183  
ªsu…
;

1186 
ha¢⁄zîo
 = 0;

1187 
iddúty
 = 0;

1188 
j
=0; j<
SFS_DBPERIDB
; j++) {

1190 i‡(
blockÀn
 < 
ba£block
+
j
 && 
idbuf
[j] != 0) {

1191 
	`sfs_b‰ì
(
sfs
, 
idbuf
[
j
]);

1192 
idbuf
[
j
] = 0;

1193 
iddúty
 = 1;

1196 i‡(
idbuf
[
j
]!=0) {

1197 
ha¢⁄zîo
=1;

1201 i‡(!
ha¢⁄zîo
) {

1203 
	`sfs_b‰ì
(
sfs
, 
idblock
);

1204 
sv
->
sv_i
.
sfi_ödúe˘
 = 0;

1205 
sv
->
sv_dúty
 = 
åue
;

1207 i‡(
iddúty
) {

1209 
ªsu…
 = 
	`sfs_wblock
(
sfs
, 
idbuf
, 
idblock
);

1210 i‡(
ªsu…
) {

1211 
	`vfs_biglock_ªÀa£
();

1212  
ªsu…
;

1218 
sv
->
sv_i
.
sfi_size
 = 
Àn
;

1221 
sv
->
sv_dúty
 = 
åue
;

1223 
	`vfs_biglock_ªÀa£
();

1225 
	}
}

1235 
	$sfs_«mefûe
(
vnode
 *
vv
, 
uio
 *uio)

1237 
sfs_vnode
 *
sv
 = 
vv
->
vn_d©a
;

1238 
	`KASSERT
(
sv
->
sv_öo
 =
SFS_ROOT_LOCATION
);

1242 ()
uio
;

1245 
	}
}

1253 
	$sfs_¸ót
(
vnode
 *
v
, c⁄° *
«me
, 
boﬁ
 
ex˛
, 
mode_t
 
mode
,

1254 
vnode
 **
ªt
)

1256 
sfs_fs
 *
sfs
 = 
v
->
vn_fs
->
fs_d©a
;

1257 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

1258 
sfs_vnode
 *
√wguy
;

1259 
uöt32_t
 
öo
;

1260 
ªsu…
;

1262 
	`vfs_biglock_acquúe
();

1265 
ªsu…
 = 
	`sfs_dú_föd«me
(
sv
, 
«me
, &
öo
, 
NULL
, NULL);

1266 i‡(
ªsu…
!=0 &&Ñesu…!=
ENOENT
) {

1267 
	`vfs_biglock_ªÀa£
();

1268  
ªsu…
;

1272 i‡(
ªsu…
==0 && 
ex˛
) {

1273 
	`vfs_biglock_ªÀa£
();

1274  
EEXIST
;

1277 i‡(
ªsu…
==0) {

1279 
ªsu…
 = 
	`sfs_lﬂdvnode
(
sfs
, 
öo
, 
SFS_TYPE_INVAL
, &
√wguy
);

1280 i‡(
ªsu…
) {

1281 
	`vfs_biglock_ªÀa£
();

1282  
ªsu…
;

1284 *
ªt
 = &
√wguy
->
sv_v
;

1285 
	`vfs_biglock_ªÀa£
();

1290 
ªsu…
 = 
	`sfs_makeobj
(
sfs
, 
SFS_TYPE_FILE
, &
√wguy
);

1291 i‡(
ªsu…
) {

1292 
	`vfs_biglock_ªÀa£
();

1293  
ªsu…
;

1297 ()
mode
;

1300 
ªsu…
 = 
	`sfs_dú_lök
(
sv
, 
«me
, 
√wguy
->
sv_öo
, 
NULL
);

1301 i‡(
ªsu…
) {

1302 
	`VOP_DECREF
(&
√wguy
->
sv_v
);

1303 
	`vfs_biglock_ªÀa£
();

1304  
ªsu…
;

1308 
√wguy
->
sv_i
.
sfi_lökcou¡
++;

1311 
√wguy
->
sv_dúty
 = 
åue
;

1313 *
ªt
 = &
√wguy
->
sv_v
;

1315 
	`vfs_biglock_ªÀa£
();

1317 
	}
}

1326 
	$sfs_lök
(
vnode
 *
dú
, c⁄° *
«me
, vnodê*
fûe
)

1328 
sfs_vnode
 *
sv
 = 
dú
->
vn_d©a
;

1329 
sfs_vnode
 *
f
 = 
fûe
->
vn_d©a
;

1330 
ªsu…
;

1332 
	`KASSERT
(
fûe
->
vn_fs
 =
dú
->vn_fs);

1334 
	`vfs_biglock_acquúe
();

1337 
ªsu…
 = 
	`sfs_dú_lök
(
sv
, 
«me
, 
f
->
sv_öo
, 
NULL
);

1338 i‡(
ªsu…
) {

1339 
	`vfs_biglock_ªÀa£
();

1340  
ªsu…
;

1344 
f
->
sv_i
.
sfi_lökcou¡
++;

1345 
f
->
sv_dúty
 = 
åue
;

1347 
	`vfs_biglock_ªÀa£
();

1349 
	}
}

1356 
	$sfs_ªmove
(
vnode
 *
dú
, c⁄° *
«me
)

1358 
sfs_vnode
 *
sv
 = 
dú
->
vn_d©a
;

1359 
sfs_vnode
 *
vi˘im
;

1360 
¶Ÿ
;

1361 
ªsu…
;

1363 
	`vfs_biglock_acquúe
();

1366 
ªsu…
 = 
	`sfs_look⁄˚
(
sv
, 
«me
, &
vi˘im
, &
¶Ÿ
);

1367 i‡(
ªsu…
) {

1368 
	`vfs_biglock_ªÀa£
();

1369  
ªsu…
;

1373 
ªsu…
 = 
	`sfs_dú_u∆ök
(
sv
, 
¶Ÿ
);

1374 i‡(
ªsu…
==0) {

1376 
	`KASSERT
(
vi˘im
->
sv_i
.
sfi_lökcou¡
 > 0);

1377 
vi˘im
->
sv_i
.
sfi_lökcou¡
--;

1378 
vi˘im
->
sv_dúty
 = 
åue
;

1382 
	`VOP_DECREF
(&
vi˘im
->
sv_v
);

1384 
	`vfs_biglock_ªÀa£
();

1385  
ªsu…
;

1386 
	}
}

1396 
	$sfs_ª«me
(
vnode
 *
d1
, c⁄° *
n1
,

1397 
vnode
 *
d2
, c⁄° *
n2
)

1399 
sfs_vnode
 *
sv
 = 
d1
->
vn_d©a
;

1400 
sfs_vnode
 *
g1
;

1401 
¶Ÿ1
, 
¶Ÿ2
;

1402 
ªsu…
, 
ªsu…2
;

1404 
	`vfs_biglock_acquúe
();

1406 
	`KASSERT
(
d1
==
d2
);

1407 
	`KASSERT
(
sv
->
sv_öo
 =
SFS_ROOT_LOCATION
);

1410 
ªsu…
 = 
	`sfs_look⁄˚
(
sv
, 
n1
, &
g1
, &
¶Ÿ1
);

1411 i‡(
ªsu…
) {

1412 
	`vfs_biglock_ªÀa£
();

1413  
ªsu…
;

1417 
	`KASSERT
(
g1
->
sv_i
.
sfi_ty≥
 =
SFS_TYPE_FILE
);

1427 
ªsu…
 = 
	`sfs_dú_lök
(
sv
, 
n2
, 
g1
->
sv_öo
, &
¶Ÿ2
);

1428 i‡(
ªsu…
) {

1429 
puke
;

1433 
g1
->
sv_i
.
sfi_lökcou¡
++;

1434 
g1
->
sv_dúty
 = 
åue
;

1437 
ªsu…
 = 
	`sfs_dú_u∆ök
(
sv
, 
¶Ÿ1
);

1438 i‡(
ªsu…
) {

1439 
puke_h¨dî
;

1446 
	`KASSERT
(
g1
->
sv_i
.
sfi_lökcou¡
>0);

1447 
g1
->
sv_i
.
sfi_lökcou¡
--;

1448 
g1
->
sv_dúty
 = 
åue
;

1451 
	`VOP_DECREF
(&
g1
->
sv_v
);

1453 
	`vfs_biglock_ªÀa£
();

1456 
puke_h¨dî
:

1460 
ªsu…2
 = 
	`sfs_dú_u∆ök
(
sv
, 
¶Ÿ2
);

1461 i‡(
ªsu…2
) {

1462 
	`k¥ötf
("sfs:Ñíame: %s\n", 
	`°ªº‹
(
ªsu…
));

1463 
	`k¥ötf
("sfs:Ñename: while cleaning up: %s\n",

1464 
	`°ªº‹
(
ªsu…2
));

1465 
	`∑nic
("sfs:Ñename: CannotÑecover\n");

1467 
g1
->
sv_i
.
sfi_lökcou¡
--;

1468 
puke
:

1470 
	`VOP_DECREF
(&
g1
->
sv_v
);

1471 
	`vfs_biglock_ªÀa£
();

1472  
ªsu…
;

1473 
	}
}

1484 
	$sfs_look∑ª¡
(
vnode
 *
v
, *
∑th
, vnodê**
ªt
,

1485 *
buf
, 
size_t
 
buÊí
)

1487 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

1489 
	`vfs_biglock_acquúe
();

1491 i‡(
sv
->
sv_i
.
sfi_ty≥
 !
SFS_TYPE_DIR
) {

1492 
	`vfs_biglock_ªÀa£
();

1493  
ENOTDIR
;

1496 i‡(
	`°æí
(
∑th
)+1 > 
buÊí
) {

1497 
	`vfs_biglock_ªÀa£
();

1498  
ENAMETOOLONG
;

1500 
	`°r˝y
(
buf
, 
∑th
);

1502 
	`VOP_INCREF
(&
sv
->
sv_v
);

1503 *
ªt
 = &
sv
->
sv_v
;

1505 
	`vfs_biglock_ªÀa£
();

1507 
	}
}

1517 
	$sfs_lookup
(
vnode
 *
v
, *
∑th
, vnodê**
ªt
)

1519 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

1520 
sfs_vnode
 *
föÆ
;

1521 
ªsu…
;

1523 
	`vfs_biglock_acquúe
();

1525 i‡(
sv
->
sv_i
.
sfi_ty≥
 !
SFS_TYPE_DIR
) {

1526 
	`vfs_biglock_ªÀa£
();

1527  
ENOTDIR
;

1530 
ªsu…
 = 
	`sfs_look⁄˚
(
sv
, 
∑th
, &
föÆ
, 
NULL
);

1531 i‡(
ªsu…
) {

1532 
	`vfs_biglock_ªÀa£
();

1533  
ªsu…
;

1536 *
ªt
 = &
föÆ
->
sv_v
;

1538 
	`vfs_biglock_ªÀa£
();

1540 
	}
}

1546 
	$sfs_nŸdú
()

1548  
ENOTDIR
;

1549 
	}
}

1553 
	$sfs_isdú
()

1555  
EISDIR
;

1556 
	}
}

1560 
	$sfs_unimp
()

1562  
EUNIMP
;

1563 
	}
}

1571 
	#ISDIR
 ((*)
sfs_isdú
)

	)

1572 
	#NOTDIR
 ((*)
sfs_nŸdú
)

	)

1573 
	#UNIMP
 ((*)
sfs_unimp
)

	)

1578 c⁄° 
vnode_›s
 
	gsfs_fûe›s
 = {

1579 
VOP_MAGIC
,

1581 
sfs_›í
,

1582 
sfs_˛o£
,

1583 
sfs_ª˛aim
,

1585 
sfs_ªad
,

1586 
NOTDIR
,

1587 
NOTDIR
,

1588 
sfs_wrôe
,

1589 
sfs_io˘l
,

1590 
sfs_°©
,

1591 
sfs_gëty≥
,

1592 
sfs_åy£ek
,

1593 
sfs_fsync
,

1594 
sfs_mm≠
,

1595 
sfs_åunˇã
,

1596 
NOTDIR
,

1598 
NOTDIR
,

1599 
NOTDIR
,

1600 
NOTDIR
,

1601 
NOTDIR
,

1602 
NOTDIR
,

1603 
NOTDIR
,

1604 
NOTDIR
,

1606 
NOTDIR
,

1607 
NOTDIR
,

1613 c⁄° 
vnode_›s
 
	gsfs_dú›s
 = {

1614 
VOP_MAGIC
,

1616 
sfs_›ídú
,

1617 
sfs_˛o£
,

1618 
sfs_ª˛aim
,

1620 
ISDIR
,

1621 
ISDIR
,

1622 
UNIMP
,

1623 
ISDIR
,

1624 
sfs_io˘l
,

1625 
sfs_°©
,

1626 
sfs_gëty≥
,

1627 
UNIMP
,

1628 
sfs_fsync
,

1629 
ISDIR
,

1630 
ISDIR
,

1631 
sfs_«mefûe
,

1633 
sfs_¸ót
,

1634 
UNIMP
,

1635 
UNIMP
,

1636 
sfs_lök
,

1637 
sfs_ªmove
,

1638 
UNIMP
,

1639 
sfs_ª«me
,

1641 
sfs_lookup
,

1642 
sfs_look∑ª¡
,

1651 
	$sfs_lﬂdvnode
(
sfs_fs
 *
sfs
, 
uöt32_t
 
öo
, 
f‹˚ty≥
,

1652 
sfs_vnode
 **
ªt
)

1654 
vnode
 *
v
;

1655 
sfs_vnode
 *
sv
;

1656 c⁄° 
vnode_›s
 *
›s
 = 
NULL
;

1657 
i
, 
num
;

1658 
ªsu…
;

1661 
num
 = 
	`vnodóºay_num
(
sfs
->
sfs_vnodes
);

1664 
i
=0; i<
num
; i++) {

1665 
v
 = 
	`vnodóºay_gë
(
sfs
->
sfs_vnodes
, 
i
);

1666 
sv
 = 
v
->
vn_d©a
;

1669 i‡(!
	`sfs_bu£d
(
sfs
, 
sv
->
sv_öo
)) {

1670 
	`∑nic
("sfs: Found inode %u in unallocated block\n",

1671 
sv
->
sv_öo
);

1674 i‡(
sv
->
sv_öo
==
öo
) {

1678 
	`KASSERT
(
f‹˚ty≥
==
SFS_TYPE_INVAL
);

1680 
	`VOP_INCREF
(&
sv
->
sv_v
);

1681 *
ªt
 = 
sv
;

1688 
sv
 = 
	`kmÆloc
((
sfs_vnode
));

1689 i‡(
sv
==
NULL
) {

1690  
ENOMEM
;

1694 i‡(!
	`sfs_bu£d
(
sfs
, 
öo
)) {

1695 
	`∑nic
("sfs: TriedÅoÜoad inode %u from unallocated block\n",

1696 
öo
);

1700 
ªsu…
 = 
	`sfs_rblock
(
sfs
, &
sv
->
sv_i
, 
öo
);

1701 i‡(
ªsu…
) {

1702 
	`k‰ì
(
sv
);

1703  
ªsu…
;

1707 
sv
->
sv_dúty
 = 
Ál£
;

1714 i‡(
f‹˚ty≥
 !
SFS_TYPE_INVAL
) {

1715 
	`KASSERT
(
sv
->
sv_i
.
sfi_ty≥
 =
SFS_TYPE_INVAL
);

1716 
sv
->
sv_i
.
sfi_ty≥
 = 
f‹˚ty≥
;

1717 
sv
->
sv_dúty
 = 
åue
;

1723 
sv
->
sv_i
.
sfi_ty≥
) {

1724 
SFS_TYPE_FILE
:

1725 
›s
 = &
sfs_fûe›s
;

1727 
SFS_TYPE_DIR
:

1728 
›s
 = &
sfs_dú›s
;

1731 
	`∑nic
("sfs:Üoadvnode: Invalid inodeÅype "

1733 
öo
, 
sv
->
sv_i
.
sfi_ty≥
);

1737 
ªsu…
 = 
	`VOP_INIT
(&
sv
->
sv_v
, 
›s
, &
sfs
->
sfs_absfs
, sv);

1738 i‡(
ªsu…
) {

1739 
	`k‰ì
(
sv
);

1740  
ªsu…
;

1744 
sv
->
sv_öo
 = 
öo
;

1747 
ªsu…
 = 
	`vnodóºay_add
(
sfs
->
sfs_vnodes
, &
sv
->
sv_v
, 
NULL
);

1748 i‡(
ªsu…
) {

1749 
	`VOP_CLEANUP
(&
sv
->
sv_v
);

1750 
	`k‰ì
(
sv
);

1751  
ªsu…
;

1755 *
ªt
 = 
sv
;

1757 
	}
}

1763 
vnode
 *

1764 
	$sfs_gëroŸ
(
fs
 *fs)

1766 
sfs_fs
 *
sfs
 = 
fs
->
fs_d©a
;

1767 
sfs_vnode
 *
sv
;

1768 
ªsu…
;

1770 
	`vfs_biglock_acquúe
();

1772 
ªsu…
 = 
	`sfs_lﬂdvnode
(
sfs
, 
SFS_ROOT_LOCATION
, 
SFS_TYPE_INVAL
, &
sv
);

1773 i‡(
ªsu…
) {

1774 
	`∑nic
("sfs: getroot: CannotÜoadÑoot vnode\n");

1777 
	`vfs_biglock_ªÀa£
();

1779  &
sv
->
sv_v
;

1780 
	}
}

	@include/addrspace.h

30 #i‚de‡
_ADDRSPACE_H_


31 
	#_ADDRSPACE_H_


	)

38 
	~<vm.h
>

39 
	~<›t-A3.h
>

41 
	gvnode
;

51 
	saddr•a˚
 {

52 
vaddr_t
 
	mas_vba£1
;

53 
∑ddr_t
 
	mas_pba£1
;

54 
size_t
 
	mas_≈ages1
;

55 
vaddr_t
 
	mas_vba£2
;

56 
∑ddr_t
 
	mas_pba£2
;

57 
size_t
 
	mas_≈ages2
;

58 
∑ddr_t
 
	mas_°ackpba£
;

60 #i‡
OPT_A3


61 
boﬁ
 
	mas_lﬂd
;

62 
boﬁ
 
	mas_ªad
;

63 
boﬁ
 
	mas_wrôe
;

64 
boﬁ
 
	mas_execuã
;

104 
addr•a˚
 *
as_¸óã
();

105 
as_c›y
(
addr•a˚
 *
§c
, addr•a˚ **
ªt
);

106 
as_a˘iv©e
();

107 
as_dó˘iv©e
();

108 
as_de°roy
(
addr•a˚
 *);

110 
as_deföe_ªgi⁄
(
addr•a˚
 *
as
,

111 
vaddr_t
 
vaddr
, 
size_t
 
sz
,

112 
ªadabÀ
,

113 
wrôóbÀ
,

114 
execuèbÀ
);

115 
as_¥ï¨e_lﬂd
(
addr•a˚
 *
as
);

116 
as_com∂ëe_lﬂd
(
addr•a˚
 *
as
);

117 
as_deföe_°ack
(
addr•a˚
 *
as
, 
vaddr_t
 *
öô°ack±r
);

127 
lﬂd_ñf
(
vnode
 *
v
, 
vaddr_t
 *
íåypoöt
);

	@include/array.h

30 #i‚de‡
_ARRAY_H_


31 
	#_ARRAY_H_


	)

33 #ifde‡
UW


34 
	~<lib.h
>

37 
	#ARRAYS_CHECKED


	)

39 #ifde‡
ARRAYS_CHECKED


40 
	#ARRAYASSERT
 
KASSERT


	)

42 
	#ARRAYASSERT
(
x
Ë(()(x))

	)

65 
	s¨øy
 {

66 **
	mv
;

67 
	mnum
, 
	mmax
;

70 
¨øy
 *
¨øy_¸óã
();

71 
¨øy_de°roy
(
¨øy
 *);

72 
¨øy_öô
(
¨øy
 *);

73 
¨øy_˛ónup
(
¨øy
 *);

74 
¨øy_num
(c⁄° 
¨øy
 *);

75 *
¨øy_gë
(c⁄° 
¨øy
 *, 
ödex
);

76 
¨øy_£t
(c⁄° 
¨øy
 *, 
ödex
, *
vÆ
);

77 
¨øy_£tsize
(
¨øy
 *, 
num
);

78 
¨øy_add
(
¨øy
 *, *
vÆ
, *
ödex_ªt
);

79 
¨øy_ªmove
(
¨øy
 *, 
ödex
);

85 #i‚de‡
ARRAYINLINE


86 
	#ARRAYINLINE
 
INLINE


	)

89 
ARRAYINLINE
 

90 
	$¨øy_num
(c⁄° 
¨øy
 *
a
)

92  
a
->
num
;

93 
	}
}

95 
ARRAYINLINE
 *

96 
	$¨øy_gë
(c⁄° 
¨øy
 *
a
, 
ödex
)

98 
	`ARRAYASSERT
(
ödex
 < 
a
->
num
);

99  
a
->
v
[
ödex
];

100 
	}
}

102 
ARRAYINLINE
 

103 
	$¨øy_£t
(c⁄° 
¨øy
 *
a
, 
ödex
, *
vÆ
)

105 
	`ARRAYASSERT
(
ödex
 < 
a
->
num
);

106 
a
->
v
[
ödex
] = 
vÆ
;

107 
	}
}

109 
ARRAYINLINE
 

110 
	$¨øy_add
(
¨øy
 *
a
, *
vÆ
, *
ödex_ªt
)

112 
ödex
;

113 
ªt
;

115 
ödex
 = 
a
->
num
;

116 
ªt
 = 
	`¨øy_£tsize
(
a
, 
ödex
+1);

117 i‡(
ªt
) {

118  
ªt
;

120 
a
->
v
[
ödex
] = 
vÆ
;

121 i‡(
ödex_ªt
 !
NULL
) {

122 *
ödex_ªt
 = 
ödex
;

125 
	}
}

166 
	#DECLARRAY_BYTYPE
(
ARRAY
, 
T
) \

167 
	sARRAY
 { \

168 
¨øy
 
¨r
; \

171 
ARRAY
 *ARRAY##
	`_¸óã
(); \

172 
ARRAY
##
	`_de°roy
(ARRAY *
a
); \

173 
ARRAY
##
	`_öô
(ARRAY *
a
); \

174 
ARRAY
##
	`_˛ónup
(ARRAY *
a
); \

175 
ARRAY
##
	`_num
(c⁄° ARRAY *
a
); \

176 
T
 *
ARRAY
##
	`_gë
(c⁄° ARRAY *
a
, 
ödex
); \

177 
ARRAY
##
	`_£t
(ARRAY *
a
, 
ödex
, 
T
 *
vÆ
); \

178 
ARRAY
##
	`_£tsize
(ARRAY *
a
, 
num
); \

179 
ARRAY
##
	`_add
(ARRAY *
a
, 
T
 *
vÆ
, *
ödex_ªt
); \

180 
ARRAY
##
	`_ªmove
(ARRAY *
a
, 
ödex
)

	)

182 
	#DEFARRAY_BYTYPE
(
ARRAY
, 
T
, 
INLINE
) \

183 
INLINE
 
ARRAY
 * \

184 
ARRAY
##
	`_¸óã
() \

186 
ARRAY
 *
a
 = 
	`kmÆloc
((*a)); \

187 i‡(
a
 =
NULL
) { \

188  
NULL
; \

190 
	`¨øy_öô
(&
a
->
¨r
); \

191  
a
; \

194 
INLINE
 \

195 
ARRAY
##
	`_de°roy
(ARRAY *
a
) \

197 
	`¨øy_˛ónup
(&
a
->
¨r
); \

198 
	`k‰ì
(
a
); \

201 
INLINE
 \

202 
ARRAY
##
	`_öô
(ARRAY *
a
) \

204 
	`¨øy_öô
(&
a
->
¨r
); \

207 
INLINE
 \

208 
ARRAY
##
	`_˛ónup
(ARRAY *
a
) \

210 
	`¨øy_˛ónup
(&
a
->
¨r
); \

213 
INLINE
 \

214 
ARRAY
##
	`_num
(c⁄° ARRAY *
a
) \

216  
	`¨øy_num
(&
a
->
¨r
); \

219 
INLINE
 
T
 * \

220 
ARRAY
##
	`_gë
(c⁄° ARRAY *
a
, 
ödex
) \

222  (
T
 *)
	`¨øy_gë
(&
a
->
¨r
, 
ödex
); \

225 
INLINE
 \

226 
ARRAY
##
	`_£t
(ARRAY *
a
, 
ödex
, 
T
 *
vÆ
) \

228 
	`¨øy_£t
(&
a
->
¨r
, 
ödex
, (*)
vÆ
); \

231 
INLINE
 \

232 
ARRAY
##
	`_£tsize
(ARRAY *
a
, 
num
) \

234  
	`¨øy_£tsize
(&
a
->
¨r
, 
num
); \

237 
INLINE
 \

238 
ARRAY
##
	`_add
(ARRAY *
a
, 
T
 *
vÆ
, *
ödex_ªt
) \

240  
	`¨øy_add
(&
a
->
¨r
, (*)
vÆ
, 
ödex_ªt
); \

243 
INLINE
 \

244 
ARRAY
##
	`_ªmove
(ARRAY *
a
, 
ödex
) \

246  
	`¨øy_ªmove
(&
a
->
¨r
, 
ödex
); \

247 }

	)

249 
	#DECLARRAY
(
T
Ë
	`DECLARRAY_BYTYPE
(T##
¨øy
, T)

	)

250 
	#DEFARRAY
(
T
, 
INLINE
Ë
	`DEFARRAY_BYTYPE
(T##
¨øy
, T, INLINE)

	)

256 
DECLARRAY_BYTYPE
(
°rög¨øy
, );

257 
DEFARRAY_BYTYPE
(
°rög¨øy
, , 
ARRAYINLINE
);

	@include/bitmap.h

30 #i‚de‡
_BITMAP_H_


31 
	#_BITMAP_H_


	)

48 
	gbôm≠
;

50 
bôm≠
 *
bôm≠_¸óã
(
nbôs
);

51 *
bôm≠_gëd©a
(
bôm≠
 *);

52 
bôm≠_Æloc
(
bôm≠
 *, *
ödex
);

53 
bôm≠_m¨k
(
bôm≠
 *, 
ödex
);

54 
bôm≠_unm¨k
(
bôm≠
 *, 
ödex
);

55 
bôm≠_is£t
(
bôm≠
 *, 
ödex
);

56 
bôm≠_de°roy
(
bôm≠
 *);

	@include/cdefs.h

30 #i‚de‡
_CDEFS_H_


31 
	#_CDEFS_H_


	)

42 
	#COMPILE_ASSERT
(
x
Ë(()(°ru˘ { : ((x)?1:-1); }))

	)

48 #ifde‡
__GNUC__


49 
	#__PF
(
a
,
b
Ë
	`__©åibuã__
((
	`__f‹m©__
(
__¥ötf__
,á, b)))

	)

51 
	#__PF
(
a
,
b
)

	)

114 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
__GNUC_STDC_INLINE__
)

116 
	#INLINE
 
ölöe


	)

118 #ñi‡
deföed
(
__STDC__
Ë&& 
__STDC_VERSION__
 >= 199901L

120 
	#INLINE
 
ölöe


	)

124 
	#INLINE
 
ölöe


	)

	@include/clock.h

30 #i‚de‡
_CLOCK_H_


31 
	#_CLOCK_H_


	)

33 
	~"›t-synch¥obs.h
"

51 #i‡
OPT_SYNCHPROBS


53 
	#HZ
 10000

	)

56 
	#HZ
 100

	)

59 
h¨d˛ock_boŸ°øp
();

61 
h¨d˛ock
();

62 
timî˛ock
();

64 
gëtime
(
time_t
 *
£c⁄ds
, 
uöt32_t
 *
«no£c⁄ds
);

66 
gëöãrvÆ
(
time_t
 
£cs1
, 
uöt32_t
 
n£cs
,

67 
time_t
 
£cs2
, 
uöt32_t
 
n£cs2
,

68 
time_t
 *
r£cs
, 
uöt32_t
 *
∫£cs
);

74 
˛ock¶ìp
(
£c⁄ds
);

	@include/copyinout.h

30 #i‚de‡
_COPYINOUT_H_


31 
	#_COPYINOUT_H_


	)

67 
c›yö
(
c⁄°_u£Ωå_t
 
u£r§c
, *
de°
, 
size_t
 
Àn
);

68 
c›yout
(c⁄° *
§c
, 
u£Ωå_t
 
u£rde°
, 
size_t
 
Àn
);

69 
c›yö°r
(
c⁄°_u£Ωå_t
 
u£r§c
, *
de°
, 
size_t
 
Àn
, size_à*
gŸ
);

70 
c›yout°r
(c⁄° *
§c
, 
u£Ωå_t
 
u£rde°
, 
size_t
 
Àn
, size_à*
gŸ
);

	@include/cpu.h

30 #i‚de‡
_CPU_H_


31 
	#_CPU_H_


	)

34 
	~<•ölock.h
>

35 
	~<thªadli°.h
>

36 
	~<machöe/vm.h
>

49 
	s˝u
 {

53 
˝u
 *
	mc_£lf
;

54 
	mc_numbî
;

55 
	mc_h¨dw¨e_numbî
;

60 
thªad
 *
	mc_cuπhªad
;

61 
thªadli°
 
	mc_zombõs
;

62 
	mc_h¨d˛ocks
;

68 
boﬁ
 
	mc_isidÀ
;

69 
thªadli°
 
	mc_runqueue
;

70 
•ölock
 
	mc_runqueue_lock
;

86 
uöt32_t
 
	mc_ùi_≥ndög
;

87 
ébshoŸdown
 
	mc_shoŸdown
[
TLBSHOOTDOWN_MAX
];

88 
	mc_numshoŸdown
;

89 
•ölock
 
	mc_ùi_lock
;

92 
	#TLBSHOOTDOWN_ALL
 (-1)

	)

107 
˝u
 *
˝u_¸óã
(
h¨dw¨e_numbî
);

108 
˝u_machdï_öô
(
˝u
 *);

109  
˝u_°¨t_£c⁄d¨y
();

110 
˝u_h©ch
(
so·w¨e_numbî
);

115 c⁄° *
˝u_idítify
();

122 
˝u_úqoff
();

123 
˝u_úq⁄
();

139 
˝u_idÀ
();

140 
˝u_hÆt
();

161 
	#IPI_PANIC
 0

	)

162 
	#IPI_OFFLINE
 1

	)

163 
	#IPI_UNIDLE
 2

	)

164 
	#IPI_TLBSHOOTDOWN
 3

	)

166 
ùi_£nd
(
˝u
 *
èrgë
, 
code
);

167 
ùi_brﬂdˇ°
(
code
);

168 
ùi_ébshoŸdown
(
˝u
 *
èrgë
, c⁄° 
ébshoŸdown
 *
m≠pög
);

170 
öãΩro˚ss‹_öãºu±
();

	@include/current.h

30 #i‚de‡
_CURRENT_H_


31 
	#_CURRENT_H_


	)

42 
	~<machöe/cuºít.h
>

44 #i‡
deföed
(
__NEED_CURTHREAD
)

46 
	~<˝u.h
>

47 
	#cuπhªad
 
cur˝u
->
c_cuπhªad


	)

48 
	#CURCPU_EXISTS
(Ë(
cur˝u
 !
NULL
)

	)

52 #i‡
deföed
(
__NEED_CURCPU
)

54 
	~<thªad.h
>

55 
	#cur˝u
 
cuπhªad
->
t_˝u


	)

56 
	#CURCPU_EXISTS
(Ë(
cuπhªad
 !
NULL
)

	)

66 
	#cuΩroc
 (
cuπhªad
->
t_¥oc
)

	)

	@include/device.h

30 #i‚de‡
_DEVICE_H_


31 
	#_DEVICE_H_


	)

38 
	guio
;

44 
	sdevi˚
 {

45 (*
	md_›í
)(
	mdevi˚
 *, 
	mÊags_‰om_›í
);

46 (*
	md_˛o£
)(
	mdevi˚
 *);

47 (*
	md_io
)(
	mdevi˚
 *, 
	muio
 *);

48 (*
	md_io˘l
)(
	mdevi˚
 *, 
	m›
, 
u£Ωå_t
 
	md©a
);

50 
blk˙t_t
 
	md_blocks
;

51 
blksize_t
 
	md_blocksize
;

53 
dev_t
 
	md_devnumbî
;

55 *
	md_d©a
;

59 
vnode
 *
dev_¸óã_vnode
(
devi˚
 *
dev
);

63 
devnuŒ_¸óã
();

66 
dev_boŸ°øp
();

	@include/elf.h

30 #i‚de‡
_ELF_H_


31 
	#_ELF_H_


	)

44 
	~<machöe/ñf.h
>

50 
	#ELF_NIDENT
 16

	)

52 
	me_idít
[
ELF_NIDENT
];

53 
uöt16_t
 
	me_ty≥
;

54 
uöt16_t
 
	me_machöe
;

55 
uöt32_t
 
	me_vîsi⁄
;

56 
uöt32_t
 
	me_íåy
;

57 
uöt32_t
 
	me_phoff
;

58 
uöt32_t
 
	me_shoff
;

59 
uöt32_t
 
	me_Êags
;

60 
uöt16_t
 
	me_ehsize
;

61 
uöt16_t
 
	me_phítsize
;

62 
uöt16_t
 
	me_phnum
;

63 
uöt16_t
 
	me_shítsize
;

64 
uöt16_t
 
	me_shnum
;

65 
uöt16_t
 
	me_sh°∫dx
;

66 } 
	tElf32_Ehdr
;

69 
	#EI_MAG0
 0

	)

70 
	#EI_MAG1
 1

	)

71 
	#EI_MAG2
 2

	)

72 
	#EI_MAG3
 3

	)

73 
	#EI_CLASS
 4

	)

74 
	#EI_DATA
 5

	)

75 
	#EI_VERSION
 6

	)

76 
	#EI_OSABI
 7

	)

77 
	#EI_ABIVERSION
 8

	)

78 
	#EI_PAD
 9

	)

83 
	#ELFMAG0
 0x7f

	)

84 
	#ELFMAG1
 'E'

	)

85 
	#ELFMAG2
 'L'

	)

86 
	#ELFMAG3
 'F'

	)

89 
	#ELFCLASSNONE
 0

	)

90 
	#ELFCLASS32
 1

	)

91 
	#ELFCLASS64
 2

	)

94 
	#ELFDATANONE
 0

	)

95 
	#ELFDATA2LSB
 1

	)

96 
	#ELFDATA2MSB
 2

	)

99 
	#EV_NONE
 0

	)

100 
	#EV_CURRENT
 1

	)

103 
	#ELFOSABI_SYSV
 0

	)

104 
	#ELFOSABI_HPUX
 1

	)

105 
	#ELFOSABI_STANDALONE
 255

	)

111 
	#ET_NONE
 0

	)

112 
	#ET_REL
 1

	)

113 
	#ET_EXEC
 2

	)

114 
	#ET_DYN
 3

	)

115 
	#ET_CORE
 4

	)

116 
	#ET_NUM
 5

	)

121 
	#EM_NONE
 0

	)

122 
	#EM_M32
 1

	)

123 
	#EM_SPARC
 2

	)

124 
	#EM_386
 3

	)

125 
	#EM_68K
 4

	)

126 
	#EM_88K
 5

	)

127 
	#EM_486
 6

	)

128 
	#EM_860
 7

	)

129 
	#EM_MIPS
 8

	)

130 
	#EM_S370
 9

	)

131 
	#EM_MIPS_RS3_LE
 10

	)

132 
	#EM_RS6000
 11

	)

133 
	#EM_PARISC
 15

	)

134 
	#EM_NCUBE
 16

	)

135 
	#EM_VPP500
 17

	)

136 
	#EM_SPARC32PLUS
 18

	)

137 
	#EM_960
 19

	)

138 
	#EM_PPC
 20

	)

139 
	#EM_V800
 36

	)

140 
	#EM_FR20
 37

	)

141 
	#EM_RH32
 38

	)

142 
	#EM_RCE
 39

	)

143 
	#EM_ARM
 40

	)

144 
	#EM_ALPHA
 41

	)

145 
	#EM_SH
 42

	)

146 
	#EM_SPARCV9
 43

	)

147 
	#EM_TRICORE
 44

	)

148 
	#EM_ARC
 45

	)

149 
	#EM_H8_300
 46

	)

150 
	#EM_H8_300H
 47

	)

151 
	#EM_H8S
 48

	)

152 
	#EM_H8_500
 49

	)

153 
	#EM_IA_64
 50

	)

154 
	#EM_MIPS_X
 51

	)

155 
	#EM_COLDFIRE
 52

	)

156 
	#EM_68HC12
 53

	)

157 
	#EM_VAX
 75

	)

158 
	#EM_ALPHA_EXP
 36902

	)

159 
	#EM_NUM
 36903

	)

169 
uöt32_t
 
	mp_ty≥
;

170 
uöt32_t
 
	mp_off£t
;

171 
uöt32_t
 
	mp_vaddr
;

172 
uöt32_t
 
	mp_∑ddr
;

173 
uöt32_t
 
	mp_fûesz
;

174 
uöt32_t
 
	mp_memsz
;

175 
uöt32_t
 
	mp_Êags
;

176 
uöt32_t
 
	mp_Æign
;

177 } 
	tElf32_Phdr
;

180 
	#PT_NULL
 0

	)

181 
	#PT_LOAD
 1

	)

182 
	#PT_DYNAMIC
 2

	)

183 
	#PT_INTERP
 3

	)

184 
	#PT_NOTE
 4

	)

185 
	#PT_SHLIB
 5

	)

186 
	#PT_PHDR
 6

	)

187 
	#PT_NUM
 7

	)

188 
	#PT_MIPS_REGINFO
 0x70000000

	)

191 
	#PF_R
 0x4

	)

192 
	#PF_W
 0x2

	)

193 
	#PF_X
 0x1

	)

196 
Elf32_Ehdr
 
	tElf_Ehdr
;

197 
Elf32_Phdr
 
	tElf_Phdr
;

	@include/emufs.h

30 #i‚de‡
_EMUFS_H_


31 
	#_EMUFS_H_


	)

37 
	~<fs.h
>

38 
	~<vnode.h
>

44 
	semufs_vnode
 {

45 
vnode
 
	mev_v
;

46 
emu_so·c
 *
	mev_emu
;

47 
uöt32_t
 
	mev_h™dÀ
;

50 
	semufs_fs
 {

51 
fs
 
	mef_fs
;

52 
emu_so·c
 *
	mef_emu
;

53 
emufs_vnode
 *
	mef_roŸ
;

54 
vnodóºay
 *
	mef_vnodes
;

	@include/endian.h

30 #i‚de‡
_ENDIAN_H_


31 
	#_ENDIAN_H_


	)

33 
	~<kîn/ídün.h
>

39 
uöt16_t
 
bsw≠16
(uint16_t);

40 
uöt32_t
 
bsw≠32
(uint32_t);

41 
uöt64_t
 
bsw≠64
(uint64_t);

43 
uöt16_t
 
¡ohs
(uint16_t);

44 
uöt16_t
 
ht⁄s
(uint16_t);

45 
uöt32_t
 
¡ohl
(uint32_t);

46 
uöt32_t
 
ht⁄l
(uint32_t);

47 
uöt64_t
 
¡ohŒ
(uint64_t);

48 
uöt64_t
 
ht⁄Œ
(uint64_t);

51 
joö32to64
(
uöt32_t
 
x1
, uöt32_à
x2
, 
uöt64_t
 *
y2
);

52 
•lô64to32
(
uöt64_t
 
x
, 
uöt32_t
 *
y1
, uöt32_à*
y2
);

	@include/fs.h

30 #i‚de‡
_FS_H_


31 
	#_FS_H_


	)

64 
	sfs
 {

65 (*
	mfs_sync
)(
	mfs
 *);

66 c⁄° *(*
	mfs_gëvﬁ«me
)(
	mfs
 *);

67 
	mvnode
 *(*
	mfs_gëroŸ
)(
	mfs
 *);

68 (*
	mfs_unmou¡
)(
	mfs
 *);

70 *
	mfs_d©a
;

76 
	#FSOP_SYNC
(
fs
Ë((fs)->
	`fs_sync
(fs))

	)

77 
	#FSOP_GETVOLNAME
(
fs
Ë((fs)->
	`fs_gëvﬁ«me
(fs))

	)

78 
	#FSOP_GETROOT
(
fs
Ë((fs)->
	`fs_gëroŸ
(fs))

	)

79 
	#FSOP_UNMOUNT
(
fs
Ë((fs)->
	`fs_unmou¡
(fs))

	)

	@include/kern/endian.h

30 #i‚de‡
_KERN_ENDIAN_H_


31 
	#_KERN_ENDIAN_H_


	)

42 
	#_LITTLE_ENDIAN
 1234

	)

43 
	#_BIG_ENDIAN
 4321

	)

44 
	#_PDP_ENDIAN
 3412

	)

47 
	~<kîn/machöe/ídün.h
>

	@include/kern/errmsg.h

30 #i‚de‡
_KERN_ERRMSG_H_


31 
	#_KERN_ERRMSG_H_


	)

41 c⁄° *c⁄° 
	gsys_îæi°
[] = {

112 c⁄° 
	gsys_√º
 = (
sys_îæi°
)/(const *);

	@include/kern/errno.h

30 #i‚de‡
_KERN_ERRNO_H_


31 
	#_KERN_ERRNO_H_


	)

45 
	#ENOSYS
 1

	)

46 
	#EUNIMP
 2

	)

47 
	#ENOMEM
 3

	)

48 
	#EAGAIN
 4

	)

49 
	#EINTR
 5

	)

50 
	#EFAULT
 6

	)

51 
	#ENAMETOOLONG
 7

	)

52 
	#EINVAL
 8

	)

53 
	#EPERM
 9

	)

54 
	#EACCES
 10

	)

55 
	#EMPROC
 11

	)

56 
	#ENPROC
 12

	)

57 
	#ENOEXEC
 13

	)

58 
	#E2BIG
 14

	)

59 
	#ESRCH
 15

	)

60 
	#ECHILD
 16

	)

61 
	#ENOTDIR
 17

	)

62 
	#EISDIR
 18

	)

63 
	#ENOENT
 19

	)

64 
	#ELOOP
 20

	)

65 
	#ENOTEMPTY
 21

	)

66 
	#EEXIST
 22

	)

67 
	#EMLINK
 23

	)

68 
	#EXDEV
 24

	)

69 
	#ENODEV
 25

	)

70 
	#ENXIO
 26

	)

71 
	#EBUSY
 27

	)

72 
	#EMFILE
 28

	)

73 
	#ENFILE
 29

	)

74 
	#EBADF
 30

	)

75 
	#EIOCTL
 31

	)

76 
	#EIO
 32

	)

77 
	#ESPIPE
 33

	)

78 
	#EPIPE
 34

	)

79 
	#EROFS
 35

	)

80 
	#ENOSPC
 36

	)

81 
	#EDQUOT
 37

	)

82 
	#EFBIG
 38

	)

83 
	#EFTYPE
 39

	)

84 
	#EDOM
 40

	)

85 
	#ERANGE
 41

	)

86 
	#EILSEQ
 42

	)

87 
	#ENOTSOCK
 43

	)

88 
	#EISSOCK
 44

	)

89 
	#EISCONN
 45

	)

90 
	#ENOTCONN
 46

	)

91 
	#ESHUTDOWN
 47

	)

92 
	#EPFNOSUPPORT
 48

	)

93 
	#ESOCKTNOSUPPORT
 49

	)

94 
	#EPROTONOSUPPORT
 50

	)

95 
	#EPROTOTYPE
 51

	)

96 
	#EAFNOSUPPORT
 52

	)

97 
	#ENOPROTOOPT
 53

	)

98 
	#EADDRINUSE
 54

	)

99 
	#EADDRNOTAVAIL
 55

	)

100 
	#ENETDOWN
 56

	)

101 
	#ENETUNREACH
 57

	)

102 
	#EHOSTDOWN
 58

	)

103 
	#EHOSTUNREACH
 59

	)

104 
	#ECONNREFUSED
 60

	)

105 
	#ETIMEDOUT
 61

	)

106 
	#ECONNRESET
 62

	)

107 
	#EMSGSIZE
 63

	)

108 
	#ENOTSUP
 64

	)

	@include/kern/fcntl.h

30 #i‚de‡
_KERN_FCNTL_H_


31 
	#_KERN_FCNTL_H_


	)

43 
	#O_RDONLY
 0

	)

44 
	#O_WRONLY
 1

	)

45 
	#O_RDWR
 2

	)

47 
	#O_CREAT
 4

	)

48 
	#O_EXCL
 8

	)

49 
	#O_TRUNC
 16

	)

50 
	#O_APPEND
 32

	)

51 
	#O_NOCTTY
 64

	)

54 
	#O_ACCMODE
 3

	)

61 
	#LOCK_SH
 1

	)

62 
	#LOCK_EX
 2

	)

63 
	#LOCK_UN
 3

	)

64 
	#LOCK_NB
 4

	)

71 
	#F_DUPFD
 0

	)

72 
	#F_GETFD
 1

	)

73 
	#F_SETFD
 2

	)

74 
	#F_GETFL
 3

	)

75 
	#F_SETFL
 4

	)

76 
	#F_GETOWN
 5

	)

77 
	#F_SETOWN
 6

	)

78 
	#F_GETLK
 7

	)

79 
	#F_SETLK
 8

	)

80 
	#F_SETLKW
 9

	)

83 
	#FD_CLOEXEC
 1

	)

86 
	#F_RDLCK
 0

	)

87 
	#F_WRLCK
 1

	)

88 
	#F_UNLCK
 2

	)

91 
	sÊock
 {

92 
off_t
 
	ml_°¨t
;

93 
	ml_whí˚
;

94 
	ml_ty≥
;

95 
off_t
 
	ml_Àn
;

96 
pid_t
 
	ml_pid
;

	@include/kern/ioctl.h

30 #i‚de‡
_KERN_IOCTL_H_


31 
	#_KERN_IOCTL_H_


	)

	@include/kern/iovec.h

30 #i‚de‡
_KERN_IOVEC_H_


31 
	#_KERN_IOVEC_H_


	)

38 
	siovec
 {

57 #ifde‡
_KERNEL


59 
u£Ωå_t
 
	miov_uba£
;

60 *
	miov_kba£
;

63 *
	miov_ba£
;

65 
size_t
 
	miov_Àn
;

	@include/kern/limits.h

30 #i‚de‡
_KERN_LIMITS_H_


31 
	#_KERN_LIMITS_H_


	)

52 
	#__NAME_MAX
 255

	)

55 
	#__PATH_MAX
 1024

	)

58 
	#__ARG_MAX
 (64 * 1024)

	)

66 
	#__PID_MIN
 2

	)

69 
	#__PID_MAX
 32767

	)

72 
	#__PIPE_BUF
 512

	)

80 
	#__NGROUPS_MAX
 32

	)

83 
	#__LOGIN_NAME_MAX
 17

	)

94 
	#__OPEN_MAX
 128

	)

97 
	#__IOV_MAX
 1024

	)

	@include/kern/reboot.h

30 #i‚de‡
_KERN_REBOOT_H_


31 
	#_KERN_REBOOT_H_


	)

40 
	#RB_REBOOT
 0

	)

41 
	#RB_HALT
 1

	)

42 
	#RB_POWEROFF
 2

	)

	@include/kern/resource.h

30 #i‚de‡
_KERN_RESOURCE_H_


31 
	#_KERN_RESOURCE_H_


	)

41 
	#PRIO_MIN
 (-20)

	)

42 
	#PRIO_MAX
 20

	)

45 
	#PRIO_PROCESS
 0

	)

46 
	#PRIO_PGRP
 1

	)

47 
	#PRIO_USER
 2

	)

50 
	#RUSAGE_SELF
 0

	)

51 
	#RUSAGE_CHILDREN
 (-1)

	)

53 
	srußge
 {

54 
timevÆ
 
	mru_utime
;

55 
timevÆ
 
	mru_°ime
;

56 
__size_t
 
	mru_maxrss
;

57 
__cou¡î_t
 
	mru_ixrss
;

58 
__cou¡î_t
 
	mru_idrss
;

59 
__cou¡î_t
 
	mru_i§ss
;

60 
__cou¡î_t
 
	mru_möÊt
;

61 
__cou¡î_t
 
	mru_majÊt
;

62 
__cou¡î_t
 
	mru_nsw≠
;

63 
__cou¡î_t
 
	mru_öblock
;

64 
__cou¡î_t
 
	mru_oublock
;

65 
__cou¡î_t
 
	mru_msgrcv
;

66 
__cou¡î_t
 
	mru_msg¢d
;

67 
__cou¡î_t
 
	mru_nsig«ls
;

68 
__cou¡î_t
 
	mru_nvcsw
;

69 
__cou¡î_t
 
	mru_nivcsw
;

74 
	#RLIMIT_NPROC
 0

	)

75 
	#RLIMIT_NOFILE
 1

	)

76 
	#RLIMIT_CPU
 2

	)

77 
	#RLIMIT_DATA
 3

	)

78 
	#RLIMIT_STACK
 4

	)

79 
	#RLIMIT_MEMLOCK
 5

	)

80 
	#RLIMIT_RSS
 6

	)

81 
	#RLIMIT_CORE
 7

	)

82 
	#RLIMIT_FSIZE
 8

	)

83 
	#__RLIMIT_NUM
 9

	)

85 
	sæimô
 {

86 
__æim_t
 
	mæim_cur
;

87 
__æim_t
 
	mæim_max
;

90 
	#RLIM_INFINITY
 (~(
__æim_t
)0)

	)

	@include/kern/seek.h

30 #i‚de‡
_KERN_SEEK_H_


31 
	#_KERN_SEEK_H_


	)

42 
	#SEEK_SET
 0

	)

43 
	#SEEK_CUR
 1

	)

44 
	#SEEK_END
 2

	)

	@include/kern/sfs.h

30 #i‚de‡
_KERN_SFS_H_


31 
	#_KERN_SFS_H_


	)

39 
	#SFS_MAGIC
 0xabadf001

	)

40 
	#SFS_BLOCKSIZE
 512

	)

41 
	#SFS_VOLNAME_SIZE
 32

	)

42 
	#SFS_NDIRECT
 15

	)

43 
	#SFS_DBPERIDB
 128

	)

44 
	#SFS_NAMELEN
 60

	)

45 
	#SFS_SB_LOCATION
 0

	)

46 
	#SFS_ROOT_LOCATION
 1

	)

47 
	#SFS_MAP_LOCATION
 2

	)

48 
	#SFS_NOINO
 0

	)

51 
	#SFS_BLOCKBITS
 (
SFS_BLOCKSIZE
 * 
CHAR_BIT
)

	)

54 
	#SFS_ROUNDUP
(
a
,
b
Ë(((◊)+(b)-1)/(b))*b)

	)

57 
	#SFS_BITMAPSIZE
(
nblocks
Ë
	`SFS_ROUNDUP
“blocks, 
SFS_BLOCKBITS
)

	)

60 
	#SFS_BITBLOCKS
(
nblocks
Ë(
	`SFS_BITMAPSIZE
“blocks)/
SFS_BLOCKBITS
)

	)

63 
	#SFS_TYPE_INVAL
 0

	)

64 
	#SFS_TYPE_FILE
 1

	)

65 
	#SFS_TYPE_DIR
 2

	)

70 
	ssfs_su≥r
 {

71 
uöt32_t
 
	m•_magic
;

72 
uöt32_t
 
	m•_nblocks
;

73 
	m•_vﬁ«me
[
SFS_VOLNAME_SIZE
];

74 
uöt32_t
 
	mª£rved
[118];

80 
	ssfs_öode
 {

81 
uöt32_t
 
	msfi_size
;

82 
uöt16_t
 
	msfi_ty≥
;

83 
uöt16_t
 
	msfi_lökcou¡
;

84 
uöt32_t
 
	msfi_dúe˘
[
SFS_NDIRECT
];

85 
uöt32_t
 
	msfi_ödúe˘
;

86 
uöt32_t
 
	msfi_wa°e
[128-3-
SFS_NDIRECT
];

92 
	ssfs_dú
 {

93 
uöt32_t
 
	msfd_öo
;

94 
	msfd_«me
[
SFS_NAMELEN
];

	@include/kern/signal.h

37 #i‚de‡
_KERN_SIGNAL_H_


38 
	#_KERN_SIGNAL_H_


	)

56 
	#SIGHUP
 1

	)

57 
	#SIGINT
 2

	)

58 
	#SIGQUIT
 3

	)

59 
	#SIGILL
 4

	)

60 
	#SIGTRAP
 5

	)

61 
	#SIGABRT
 6

	)

62 
	#SIGEMT
 7

	)

63 
	#SIGFPE
 8

	)

64 
	#SIGKILL
 9

	)

65 
	#SIGBUS
 10

	)

66 
	#SIGSEGV
 11

	)

67 
	#SIGSYS
 12

	)

68 
	#SIGPIPE
 13

	)

69 
	#SIGALRM
 14

	)

70 
	#SIGTERM
 15

	)

71 
	#SIGURG
 16

	)

72 
	#SIGSTOP
 17

	)

73 
	#SIGTSTP
 18

	)

74 
	#SIGCONT
 19

	)

75 
	#SIGCHLD
 20

	)

76 
	#SIGTTIN
 21

	)

77 
	#SIGTTOU
 22

	)

78 
	#SIGIO
 23

	)

79 
	#SIGXCPU
 24

	)

80 
	#SIGXFSZ
 25

	)

81 
	#SIGVTALRM
 26

	)

82 
	#SIGPROF
 27

	)

83 
	#SIGWINCH
 28

	)

84 
	#SIGINFO
 29

	)

85 
	#SIGUSR1
 20

	)

86 
	#SIGUSR2
 31

	)

87 
	#SIGPWR
 32

	)

88 
	#_NSIG
 32

	)

92 
__u32
 
	tsig£t_t
;

95 
	#SA_ONSTACK
 1

	)

96 
	#SA_RESTART
 2

	)

97 
	#SA_RESETHAND
 4

	)

100 
	#SIG_BLOCK
 1

	)

101 
	#SIG_UNBLOCK
 2

	)

102 
	#SIG_SETMASK
 3

	)

105 (*
	t__sigfunc
)();

108 
	#SIG_DFL
 ((
__sigfunc
Ë0Ë

	)

109 
	#SIG_IGN
 ((
__sigfunc
Ë1Ë

	)

114 
	ssiga˘i⁄
 {

115 
__sigfunc
 
ß_h™dÀr
;

116 
sig£t_t
 
ß_mask
;

117 
ß_Êags
;

124 
	ssigÆt°ack
 {

125 *
ss_•
;

126 
size_t
 
ss_size
;

127 
ss_Êags
;

	@include/kern/socket.h

30 #i‚de‡
_KERN_SOCKET_H_


31 
	#_KERN_SOCKET_H_


	)

43 
	#SOCK_STREAM
 1

	)

44 
	#SOCK_DGRAM
 2

	)

45 
	#SOCK_RAW
 3

	)

48 
	#AF_UNSPEC
 0

	)

49 
	#AF_UNIX
 1

	)

50 
	#AF_INET
 2

	)

51 
	#AF_INET6
 3

	)

54 
	#PF_UNSPEC
 
AF_UNSPEC


	)

55 
	#PF_UNIX
 
AF_UNIX


	)

56 
	#PF_INET
 
AF_INET


	)

57 
	#PF_INET6
 
AF_INET6


	)

73 
	ssockaddr
 {

74 
__u8
 
	mß_Àn
;

75 
__u8
 
	mß_Ámûy
;

78 
	#_SS_SIZE
 128

	)

79 
	ssockaddr_°‹age
 {

80 
__u8
 
	mss_Àn
;

81 
__u8
 
	mss_Ámûy
;

82 
__u8
 
	m__ss_∑d1
;

83 
__u8
 
	m__ss_∑d2
;

84 
__u32
 
	m__ss_∑d3
;

85 
__u64
 
	m__ss_∑d4
;

86 
	m__ss_∑d5
[
_SS_SIZE
 - (
__u64
Ë- (
__u32
Ë- 4*(
__u8
)];

98 
	smsghdr
 {

99 *
	mmsg_«me
;

100 
sockÀn_t
 
	mmsg_«mñí
;

101 
iovec
 *
	mmsg_iov
;

102 
	mmsg_iovÀn
;

103 *
	mmsg_c⁄åﬁ
;

104 
sockÀn_t
 
	mmsg_c⁄åﬁÀn
;

105 
	mmsg_Êags
;

108 
	scmsghdr
 {

109 
sockÀn_t
 
	mcmsg_Àn
;

110 
	mcmsg_Àvñ
;

111 
	mcmsg_ty≥
;

	@include/kern/stat.h

30 #i‚de‡
_KERN_STAT_H_


31 
	#_KERN_STAT_H_


	)

42 
	s°©
 {

44 
off_t
 
	m°_size
;

45 
mode_t
 
	m°_mode
;

46 
∆ök_t
 
	m°_∆ök
;

47 
blk˙t_t
 
	m°_blocks
;

50 
dev_t
 
	m°_dev
;

51 
öo_t
 
	m°_öo
;

52 
dev_t
 
	m°_rdev
;

55 
time_t
 
	m°_©ime
;

56 
time_t
 
	m°_˘ime
;

57 
time_t
 
	m°_mtime
;

58 
__u32
 
	m°_©imí£c
;

59 
__u32
 
	m°_˘imí£c
;

60 
__u32
 
	m°_mtimí£c
;

63 
uid_t
 
	m°_uid
;

64 
gid_t
 
	m°_gid
;

67 
__u32
 
	m°_gí
;

68 
blksize_t
 
	m°_blksize
;

	@include/kern/stattypes.h

30 #i‚de‡
_KERN_STATTYPES_H_


31 
	#_KERN_STATTYPES_H_


	)

45 
	#_S_IFMT
 070000

	)

46 
	#_S_IFREG
 010000

	)

47 
	#_S_IFDIR
 020000

	)

48 
	#_S_IFLNK
 030000

	)

49 
	#_S_IFIFO
 040000

	)

50 
	#_S_IFSOCK
 050000

	)

51 
	#_S_IFCHR
 060000

	)

52 
	#_S_IFBLK
 070000

	)

	@include/kern/syscall.h

30 #i‚de‡
_KERN_SYSCALL_H_


31 
	#_KERN_SYSCALL_H_


	)

50 
	#SYS_f‹k
 0

	)

51 
	#SYS_vf‹k
 1

	)

52 
	#SYS_execv
 2

	)

53 
	#SYS__exô
 3

	)

54 
	#SYS_waôpid
 4

	)

55 
	#SYS_gëpid
 5

	)

56 
	#SYS_gëµid
 6

	)

58 
	#SYS_sbrk
 7

	)

59 
	#SYS_mm≠
 8

	)

60 
	#SYS_munm≠
 9

	)

61 
	#SYS_m¥Ÿe˘
 10

	)

69 
	#SYS_umask
 17

	)

70 
	#SYS_is£tugid
 18

	)

71 
	#SYS_gëªsuid
 19

	)

72 
	#SYS_£åesuid
 20

	)

73 
	#SYS_gëªsgid
 21

	)

74 
	#SYS_£åesgid
 22

	)

75 
	#SYS_gëgroups
 23

	)

76 
	#SYS_£tgroups
 24

	)

77 
	#SYS___gëlogö
 25

	)

78 
	#SYS___£éogö
 26

	)

80 
	#SYS_kûl
 27

	)

81 
	#SYS_siga˘i⁄
 28

	)

82 
	#SYS_sig≥ndög
 29

	)

83 
	#SYS_sig¥ocmask
 30

	)

84 
	#SYS_sigsu•íd
 31

	)

85 
	#SYS_sigªtu∫
 32

	)

105 
	#SYS_›í
 45

	)

106 
	#SYS_pùe
 46

	)

107 
	#SYS_dup
 47

	)

108 
	#SYS_dup2
 48

	)

109 
	#SYS_˛o£
 49

	)

110 
	#SYS_ªad
 50

	)

111 
	#SYS_¥ód
 51

	)

114 
	#SYS_gëdúíåy
 54

	)

115 
	#SYS_wrôe
 55

	)

116 
	#SYS_pwrôe
 56

	)

119 
	#SYS_l£ek
 59

	)

120 
	#SYS_Êock
 60

	)

121 
	#SYS_·runˇã
 61

	)

122 
	#SYS_fsync
 62

	)

123 
	#SYS_f˙é
 63

	)

124 
	#SYS_io˘l
 64

	)

125 
	#SYS_£À˘
 65

	)

126 
	#SYS_pﬁl
 66

	)

129 
	#SYS_lök
 67

	)

130 
	#SYS_ªmove
 68

	)

131 
	#SYS_mkdú
 69

	)

132 
	#SYS_rmdú
 70

	)

133 
	#SYS_mkfifo
 71

	)

134 
	#SYS_ª«me
 72

	)

135 
	#SYS_ac˚ss
 73

	)

137 
	#SYS_chdú
 74

	)

138 
	#SYS_fchdú
 75

	)

139 
	#SYS___gëcwd
 76

	)

141 
	#SYS_symlök
 77

	)

142 
	#SYS_ªadlök
 78

	)

144 
	#SYS_mou¡
 79

	)

145 
	#SYS_unmou¡
 80

	)

149 
	#SYS_°©
 81

	)

150 
	#SYS_f°©
 82

	)

151 
	#SYS_l°©
 83

	)

153 
	#SYS_utimes
 84

	)

154 
	#SYS_futimes
 85

	)

155 
	#SYS_lutimes
 86

	)

157 
	#SYS_chmod
 87

	)

158 
	#SYS_chown
 88

	)

159 
	#SYS_fchmod
 89

	)

160 
	#SYS_fchown
 90

	)

161 
	#SYS_lchmod
 91

	)

162 
	#SYS_lchown
 92

	)

172 
	#SYS_sockë
 98

	)

173 
	#SYS_böd
 99

	)

174 
	#SYS_c⁄√˘
 100

	)

175 
	#SYS_li°í
 101

	)

176 
	#SYS_ac˚±
 102

	)

178 
	#SYS_shutdown
 104

	)

179 
	#SYS_gësock«me
 105

	)

180 
	#SYS_gë≥î«me
 106

	)

181 
	#SYS_gësock›t
 107

	)

182 
	#SYS_£tsock›t
 108

	)

189 
	#SYS___time
 113

	)

190 
	#SYS___£âime
 114

	)

191 
	#SYS_«no¶ìp
 115

	)

196 
	#SYS_sync
 118

	)

197 
	#SYS_ªboŸ
 119

	)

	@include/kern/time.h

30 #i‚de‡
_KERN_TIME_H_


31 
	#_KERN_TIME_H_


	)

43 
	stimevÆ
 {

44 
__time_t
 
	mtv_£c
;

45 
__i32
 
	mtv_u£c
;

48 
	stime•ec
 {

49 
__time_t
 
	mtv_£c
;

50 
__i32
 
	mtv_n£c
;

59 
	#ITIMER_REAL
 0

	)

60 
	#ITIMER_VIRTUAL
 1

	)

61 
	#ITIMER_PROF
 2

	)

64 
	sôimîvÆ
 {

65 
timevÆ
 
	mô_öãrvÆ
;

66 
timevÆ
 
	mô_vÆue
;

	@include/kern/types.h

30 #i‚de‡
_KERN_TYPES_H_


31 
	#_KERN_TYPES_H_


	)

34 
	~<kîn/machöe/ty≥s.h
>

64 
__u32
 
	t__blk˙t_t
;

65 
__u32
 
	t__blksize_t
;

66 
__u64
 
	t__cou¡î_t
;

67 
__u32
 
	t__daddr_t
;

68 
__u32
 
	t__dev_t
;

69 
__u32
 
	t__fsid_t
;

70 
__i32
 
	t__gid_t
;

71 
__u32
 
	t__ö_addr_t
;

72 
__u32
 
	t__ö_p‹t_t
;

73 
__u32
 
	t__öo_t
;

74 
__u32
 
	t__mode_t
;

75 
__u16
 
	t__∆ök_t
;

76 
__i64
 
	t__off_t
;

77 
__i32
 
	t__pid_t
;

78 
__u64
 
	t__æim_t
;

79 
__u8
 
	t__ß_Ámûy_t
;

80 
__i64
 
	t__time_t
;

81 
__i32
 
	t__uid_t
;

83 
	t__nfds_t
;

84 
	t__sockÀn_t
;

87 #ifde‡
__GNUC__


88 
__buûtö_va_li°
 
	t__va_li°
;

	@include/kern/unistd.h

30 #i‚de‡
_KERN_UNISTD_H_


31 
	#_KERN_UNISTD_H_


	)

34 
	#STDIN_FILENO
 0

	)

35 
	#STDOUT_FILENO
 1

	)

36 
	#STDERR_FILENO
 2

	)

	@include/kern/wait.h

30 #i‚de‡
_KERN_WAIT_H_


31 
	#_KERN_WAIT_H_


	)

39 
	#WNOHANG
 1

	)

40 
	#WUNTRACED
 2

	)

43 
	#WAIT_ANY
 (-1Ë

	)

44 
	#WAIT_MYPGRP
 0

	)

54 
	#_WWHAT
(
x
Ë((x)&3Ë

	)

55 
	#_WVAL
(
x
Ë((x)>>2Ë

	)

56 
	#_MKWVAL
(
x
Ë((x)<<2Ë

	)

59 
	#__WEXITED
 0

	)

60 
	#__WSIGNALED
 1

	)

61 
	#__WCORED
 2

	)

62 
	#__WSTOPPED
 3

	)

65 
	#WIFEXITED
(
x
Ë(
	`_WWHAT
(x)==
__WEXITED
)

	)

66 
	#WIFSIGNALED
(
x
Ë(
	`_WWHAT
(x)==
__WSIGNALED
 || _WWHAT(x)==
__WCORED
)

	)

67 
	#WIFSTOPPED
(
x
Ë(
	`_WWHAT
(x)==
__WSTOPPED
)

	)

68 
	#WEXITSTATUS
(
x
Ë(
	`_WVAL
(x))

	)

69 
	#WTERMSIG
(
x
Ë(
	`_WVAL
(x))

	)

70 
	#WSTOPSIG
(
x
Ë(
	`_WVAL
(x))

	)

71 
	#WCOREDUMP
(
x
Ë(
	`_WWHAT
(x)==
__WCORED
)

	)

74 
	#_MKWAIT_EXIT
(
x
Ë(
	`_MKWVAL
(x)|
__WEXITED
)

	)

75 
	#_MKWAIT_SIG
(
x
Ë(
	`_MKWVAL
(x)|
__WSIGNALED
)

	)

76 
	#_MKWAIT_CORE
(
x
Ë(
	`_MKWVAL
(x)|
__WCORED
)

	)

77 
	#_MKWAIT_STOP
(
x
Ë(
	`_MKWVAL
(x)|
__WSTOPPED
)

	)

	@include/lib.h

30 #i‚de‡
_LIB_H_


31 
	#_LIB_H_


	)

41 
	~<cdefs.h
>

60 
	~"›t-nﬂs£πs.h
"

62 #i‡
OPT_NOASSERTS


63 
	#KASSERT
(
ex¥
Ë(()”x¥))

	)

65 
	#KASSERT
(
ex¥
) \

66 ((
ex¥
Ë? ()0 : 
	`badas£π
(#ex¥, 
__FILE__
, 
__LINE__
, 
__func__
))

	)

70 
	#DEBUGASSERT
(
ex¥
Ë(()”x¥))

	)

72 
	#DEBUGASSERT
(
ex¥
) \

73 ((
ex¥
Ë? ()0 : 
	`badas£π
(#ex¥, 
__FILE__
, 
__LINE__
, 
__func__
))

	)

79 
	#DB_LOCORE
 0x0001

	)

80 
	#DB_SYSCALL
 0x0002

	)

81 
	#DB_INTERRUPT
 0x0004

	)

82 
	#DB_DEVICE
 0x0008

	)

83 
	#DB_THREADS
 0x0010

	)

84 
	#DB_VM
 0x0020

	)

85 
	#DB_EXEC
 0x0040

	)

86 
	#DB_VFS
 0x0080

	)

87 
	#DB_SFS
 0x0100

	)

88 
	#DB_NET
 0x0200

	)

89 
	#DB_NETFS
 0x0400

	)

90 
	#DB_KMALLOC
 0x0800

	)

91 
	#DB_SYNCPROB
 0x1000

	)

93 
uöt32_t
 
dbÊags
;

111 
	#DEBUG
(
d
, ...Ë((
dbÊags
 & (d)Ë? 
	`k¥ötf
(
__VA_ARGS__
Ë: 0)

	)

118 
	#RANDOM_MAX
 (
	`øndmax
())

	)

119 
uöt32_t
 
øndmax
();

120 
uöt32_t
 
øndom
();

126 *
kmÆloc
(
size_t
 
size
);

127 
k‰ì
(*
±r
);

128 
khóp_¥öt°©s
();

136 
size_t
 
°æí
(c⁄° *
°r
);

137 
°rcmp
(c⁄° *
°r1
, c⁄° *
°r2
);

138 *
°r˝y
(*
de°
, c⁄° *
§c
);

139 *
°rˇt
(*
de°
, c⁄° *
§c
);

140 *
k°rdup
(c⁄° *
°r
);

141 *
°rchr
(c⁄° *
£¨ched
, 
£¨chf‹
);

142 *
°ºchr
(c⁄° *
£¨ched
, 
£¨chf‹
);

143 *
°πok_r
(*
buf
, c⁄° *
£ps
, **
c⁄ãxt
);

145 *
mem˝y
(*
de°
, c⁄° *
§c
, 
size_t
 
Àn
);

146 *
memmove
(*
de°
, c⁄° *
§c
, 
size_t
 
Àn
);

147 
bzîo
(*
±r
, 
size_t
 
Àn
);

148 
©oi
(c⁄° *
°r
);

150 
	$¢¥ötf
(*
buf
, 
size_t
 
maxÀn
, c⁄° *
fmt
, ...Ë
	`__PF
(3,4);

152 c⁄° *
	`°ªº‹
(
îrcode
);

161 
	`putch
(
ch
);

162 
	`putch_¥ï¨e
();

163 
	`putch_com∂ëe
();

164 
	`gëch
();

165 
	`bìp
();

180 
	$k¥ötf
(c⁄° *
f‹m©
, ...Ë
	`__PF
(1,2);

181 
	$∑nic
(c⁄° *
f‹m©
, ...Ë
	`__PF
(1,2);

182 
	`badas£π
(c⁄° *
ex¥
, c⁄° *
fûe
, 
löe
, c⁄° *
func
);

184 
	`kgës
(*
buf
, 
size_t
 
maxbuÊí
);

186 
	`k¥ötf_boŸ°øp
();

192 
	#DIVROUNDUP
(
a
,
b
Ë((◊)+(b)-1)/(b))

	)

193 
	#ROUNDUP
(
a
,
b
Ë(
	`DIVROUNDUP
◊,b)*b)

	)

	@include/limits.h

30 #i‚de‡
_LIMITS_H_


31 
	#_LIMITS_H_


	)

38 
	~<kîn/limôs.h
>

41 
	#NAME_MAX
 
__NAME_MAX


	)

42 
	#PATH_MAX
 
__PATH_MAX


	)

43 
	#ARG_MAX
 
__ARG_MAX


	)

44 
	#PID_MIN
 
__PID_MIN


	)

45 
	#PID_MAX
 
__PID_MAX


	)

46 
	#PIPE_BUF
 
__PIPE_BUF


	)

47 
	#NGROUPS_MAX
 
__NGROUPS_MAX


	)

48 
	#LOGIN_NAME_MAX
 
__LOGIN_NAME_MAX


	)

49 
	#OPEN_MAX
 
__OPEN_MAX


	)

50 
	#IOV_MAX
 
__IOV_MAX


	)

	@include/mainbus.h

30 #i‚de‡
_MAINBUS_H_


31 
	#_MAINBUS_H_


	)

38 
	g˝u
;

39 
	gå≠‰ame
;

43 
maöbus_boŸ°øp
();

46 
maöbus_°¨t_˝us
();

49 
maöbus_öãºu±
(
å≠‰ame
 *);

53 
size_t
 
maöbus_ømsize
();

56 
maöbus_£nd_ùi
(
˝u
 *
èrgë
);

64 
maöbus_hÆt
();

65 
maöbus_powîoff
();

66 
maöbus_ªboŸ
();

67 
maöbus_∑nic
();

	@include/proc.h

29 
	~"›t-A2.h
"

31 #i‚de‡
_PROC_H_


32 
	#_PROC_H_


	)

40 
	~<•ölock.h
>

41 
	~<thªad.h
>

43 
	~<ty≥s.h
>

44 
	~<¨øy.h
>

45 
	~<synch.h
>

47 
	gaddr•a˚
;

48 
	gvnode
;

49 #ifde‡
UW


50 
	g£m≠h‹e
;

62 #i‡
OPT_A2


63 
	gcuΩid
;

64 
¨øy
* 
	g¥o˘abÀ
;

65 
¨øy
 *
	gªcy˛ëabÀ
;

66 
cv
 *
	gwaô_cv
;

67 
lock
* 
	g¥o˘abÀ_lock
;

73 
	s¥oc
 {

74 *
	mp_«me
;

75 
•ölock
 
	mp_lock
;

76 
thªad¨øy
 
	mp_thªads
;

79 
addr•a˚
 *
	mp_addr•a˚
;

82 
vnode
 *
	mp_cwd
;

84 #ifde‡
UW


90 
vnode
 *
	mc⁄sﬁe
;

94 #i‡
OPT_A2


95 
pid_t
 
	mpid
;

100 
	snode
 {

102 
pid_t
 
	mpid
;

103 
pid_t
 
	m∑ª¡
;

104 
	m°©us
;

107 
	mexôcode
;

111 
¥oc
 *
k¥oc
;

113 #i‡
OPT_A2


114 
gë_node
(
pid_t
 
pid
);

118 #ifde‡
UW


119 
£m≠h‹e
 *
no_¥oc_£m
;

123 
¥oc_boŸ°øp
();

126 
¥oc
 *
¥oc_¸óã_ru≈rogøm
(c⁄° *
«me
);

129 
¥oc_de°roy
(
¥oc
 *proc);

132 
¥oc_addthªad
(
¥oc
 *¥oc, 
thªad
 *
t
);

135 
¥oc_ªmthªad
(
thªad
 *
t
);

138 
addr•a˚
 *
cuΩroc_gëas
();

141 
addr•a˚
 *
cuΩroc_£ès
(addrspace *);

	@include/queue.h

1 #i‚de‡
_QUEUE_H_


2 
	#_QUEUE_H_


	)

26 
	gqueue
;

28 
queue
 *
q_¸óã
(
size
);

29 
q_¥óŒoˇã
(
queue
 *, 
size
);

30 
q_em±y
(
queue
 *);

31 
q_addèû
(
queue
 *, *
±r
);

32 *
q_ªmhód
(
queue
 *);

33 
q_de°roy
(
queue
 *);

34 *
q_≥ek
(
queue
 *
q
);

35 
q_Àn
(
queue
 *
theq
);

57 
q_gë°¨t
(
queue
 *);

58 
q_gëíd
(
queue
 *);

59 
q_gësize
(
queue
 *);

60 *
q_gëguy
(
queue
 *, 
ödex
);

	@include/setjmp.h

30 #i‚de‡
_SETJMP_H_


31 
	#_SETJMP_H_


	)

38 
	~<kîn/machöe/£tjmp.h
>

40 
£tjmp
(
jmp_buf
 
jb
);

41 
l⁄gjmp
(
jmp_buf
 
jb
, 
ªtvÆ
);

	@include/sfs.h

30 #i‚de‡
_SFS_H_


31 
	#_SFS_H_


	)

42 
	~<fs.h
>

43 
	~<vnode.h
>

49 
	~<kîn/sfs.h
>

51 
	ssfs_vnode
 {

52 
vnode
 
	msv_v
;

53 
sfs_öode
 
	msv_i
;

54 
uöt32_t
 
	msv_öo
;

55 
boﬁ
 
	msv_dúty
;

58 
	ssfs_fs
 {

59 
fs
 
	msfs_absfs
;

60 
sfs_su≥r
 
	msfs_su≥r
;

61 
boﬁ
 
	msfs_su≥rdúty
;

62 
devi˚
 *
	msfs_devi˚
;

63 
vnodóºay
 *
	msfs_vnodes
;

64 
bôm≠
 *
	msfs_‰ìm≠
;

65 
boﬁ
 
	msfs_‰ìm≠dúty
;

71 
sfs_mou¡
(c⁄° *
devi˚
);

79 
	#SFSUIO
(
iov
, 
uio
, 
±r
, 
block
, 
rw
) \

80 
	`uio_köô
(
iov
, 
uio
, 
±r
, 
SFS_BLOCKSIZE
, ((
off_t
)(
block
))*SFS_BLOCKSIZE, 
rw
)

	)

83 
sfs_rwblock
(
sfs_fs
 *
sfs
, 
uio
 *uio);

84 
sfs_rblock
(
sfs_fs
 *
sfs
, *
d©a
, 
uöt32_t
 
block
);

85 
sfs_wblock
(
sfs_fs
 *
sfs
, *
d©a
, 
uöt32_t
 
block
);

88 
vnode
 *
sfs_gëroŸ
(
fs
 *fs);

	@include/signal.h

30 #i‚de‡
_SIGNAL_H_


31 
	#_SIGNAL_H_


	)

35 
	~<kîn/machöe/sig«l.h
>

36 
	~<kîn/sig«l.h
>

	@include/spinlock.h

30 #i‚de‡
_SPINLOCK_H_


31 
	#_SPINLOCK_H_


	)

38 
	~<cdefs.h
>

41 #i‚de‡
SPINLOCK_INLINE


42 
	#SPINLOCK_INLINE
 
INLINE


	)

46 
	~<machöe/•ölock.h
>

57 
	s•ölock
 {

58 vﬁ©ûê
•ölock_d©a_t
 
	mlk_lock
;

59 
˝u
 *
	mlk_hﬁdî
;

65 
	#SPINLOCK_INITIALIZER
 { 
SPINLOCK_DATA_INITIALIZER
, 
NULL
 }

	)

79 
•ölock_öô
(
•ölock
 *
lk
);

80 
•ölock_˛ónup
(
•ölock
 *
lk
);

82 
•ölock_acquúe
(
•ölock
 *
lk
);

83 
•ölock_ªÀa£
(
•ölock
 *
lk
);

85 
boﬁ
 
•ölock_do_i_hﬁd
(
•ölock
 *
lk
);

	@include/spl.h

30 #i‚de‡
_SPL_H_


31 
	#_SPL_H_


	)

33 
	~<cdefs.h
>

65 
•l0
();

66 
•lhigh
();

67 
•lx
();

72 
	#IPL_NONE
 0

	)

73 
	#IPL_HIGH
 1

	)

84 
•Ãai£
(
ﬁdùl
, 
√wùl
);

85 
•Œowî
(
ﬁdùl
, 
√wùl
);

90 #i‚de‡
SPL_INLINE


91 
	#SPL_INLINE
 
INLINE


	)

94 
SPL_INLINE


96 
	$•l0
()

98  
	`•lx
(
IPL_NONE
);

99 
	}
}

101 
SPL_INLINE


103 
	$•lhigh
()

105  
	`•lx
(
IPL_HIGH
);

106 
	}
}

	@include/stat.h

30 #i‚de‡
_STAT_H_


31 
	#_STAT_H_


	)

34 
	~<kîn/°©.h
>

37 
	~<kîn/°©ty≥s.h
>

40 
	#S_IFMT
 
_S_IFMT


	)

41 
	#S_IFREG
 
_S_IFREG


	)

42 
	#S_IFDIR
 
_S_IFDIR


	)

43 
	#S_IFLNK
 
_S_IFLNK


	)

44 
	#S_IFIFO
 
_S_IFIFO


	)

45 
	#S_IFSOCK
 
_S_IFSOCK


	)

46 
	#S_IFCHR
 
_S_IFCHR


	)

47 
	#S_IFBLK
 
_S_IFBLK


	)

	@include/stdarg.h

30 #i‚de‡
_STDARG_H_


31 
	#_STDARG_H_


	)

35 
	~<cdefs.h
>

43 #ifde‡
__GNUC__


44 
__va_li°
 
	tva_li°
;

46 
	#va_°¨t
(
≠
, 
fmt
Ë
	`__buûtö_°d¨g_°¨t
◊p, fmt)

	)

47 
	#va_¨g
(
≠
,
t
Ë
	`__buûtö_va_¨g
◊p,Å)

	)

48 
	#va_c›y
(
≠1
, 
≠2
Ë
	`__buûtö_va_c›y
◊p1,áp2)

	)

49 
	#va_íd
(
≠
Ë
	`__buûtö_va_íd
◊p)

	)

59 
	$vk¥ötf
(c⁄° *
fmt
, 
va_li°
 
≠
Ë
	`__PF
(1,0);

60 
	$v¢¥ötf
(*
buf
, 
size_t
 
maxÀn
, c⁄° *
fmt
, 
va_li°
 
≠
Ë
	`__PF
(3,0);

69 
	`__v¥ötf
((*
func
)(*
˛õ¡d©a
, c⁄° *
°r
, 
size_t
 
Àn
),

70 *
˛õ¡d©a
, c⁄° *
f‹m©
, 
va_li°
 
≠
Ë
	`__PF
(3,0);

	@include/synch.h

30 #i‚de‡
_SYNCH_H_


31 
	#_SYNCH_H_


	)

38 
	~<•ölock.h
>

46 
	s£m≠h‹e
 {

47 *
	m£m_«me
;

48 
wch™
 *
	m£m_wch™
;

49 
•ölock
 
	m£m_lock
;

50 vﬁ©ûê
	m£m_cou¡
;

53 
£m≠h‹e
 *
£m_¸óã
(c⁄° *
«me
, 
öôül_cou¡
);

54 
£m_de°roy
(
£m≠h‹e
 *);

62 
P
(
£m≠h‹e
 *);

63 
V
(
£m≠h‹e
 *);

75 
	slock
 {

76 *
	mlk_«me
;

77 
wch™
 *
	mlk_wch™
;

78 
•ölock
 
	mlk_lock
;

79 
thªad
 *
	mlk_thªad
;

80 vﬁ©ûê
	mlk_cou¡
;

85 
lock
 *
lock_¸óã
(c⁄° *
«me
);

86 
lock_acquúe
(
lock
 *);

99 
lock_ªÀa£
(
lock
 *);

100 
boﬁ
 
lock_do_i_hﬁd
(
lock
 *);

101 
lock_de°roy
(
lock
 *);

118 
	scv
 {

119 *
	mcv_«me
;

121 
wch™
 *
	mcv_wch™
;

125 
cv
 *
cv_¸óã
(c⁄° *
«me
);

126 
cv_de°roy
(
cv
 *);

141 
cv_waô
(
cv
 *cv, 
lock
 *lock);

142 
cv_sig«l
(
cv
 *cv, 
lock
 *lock);

143 
cv_brﬂdˇ°
(
cv
 *cv, 
lock
 *lock);

	@include/synchprobs.h

1 #i‚de‡
_SYNCHPROBS_H_


2 
	#_SYNCHPROBS_H_


	)

5 
	eDúe˘i⁄s


7 
	mn‹th
 = 0,

8 
	mó°
 = 1,

9 
	msouth
 = 2,

10 
	mwe°
 = 3

12 
Dúe˘i⁄s
 
	tDúe˘i⁄
;

16 
öãr£˘i⁄_sync_öô
();

17 
öãr£˘i⁄_sync_˛ónup
();

20 
öãr£˘i⁄_bef‹e_íåy
(
Dúe˘i⁄
 
‹igö
, Dúe˘i⁄ 
de°ö©i⁄
);

21 
öãr£˘i⁄_a·î_exô
(
Dúe˘i⁄
 
‹igö
, Dúe˘i⁄ 
de°ö©i⁄
);

25 
ˇt_bef‹e_ótög
(
bowl
);

26 
ˇt_a·î_ótög
(
bowl
);

27 
mou£_bef‹e_ótög
(
bowl
);

28 
mou£_a·î_ótög
(
bowl
);

29 
ˇtmou£_sync_öô
(
bowls
);

30 
ˇtmou£_sync_˛ónup
(
bowls
);

31 
¥öt_°©e_⁄
();

32 
¥öt_°©e_off
();

	@include/syscall.h

30 #i‚de‡
_SYSCALL_H_


31 
	#_SYSCALL_H_


	)

33 
	~"›t-A2.h
"

35 
	gå≠‰ame
;

41 
sysˇŒ
(
å≠‰ame
 *
tf
);

48 
íãr_f‹ked_¥o˚ss
(*
tf
, 
¨g
);

51 
íãr_√w_¥o˚ss
(
¨gc
, 
u£Ωå_t
 
¨gv
, 
vaddr_t
 
°ack±r
,

52 
vaddr_t
 
íåypoöt
);

59 
sys_ªboŸ
(
code
);

60 
sys___time
(
u£Ωå_t
 
u£r_£c⁄ds
, u£Ωå_à
u£r_«no£c⁄ds
);

62 #ifde‡
UW


63 
sys_wrôe
(
fdesc
,
u£Ωå_t
 
ubuf
,
nbyãs
,*
ªtvÆ
);

64 
sys__exô
(
exôcode
);

65 
sys_gëpid
(
pid_t
 *
ªtvÆ
);

66 
sys_waôpid
(
pid_t
 
pid
, 
u£Ωå_t
 
°©us
, 
›ti⁄s
,Öid_à*
ªtvÆ
);

70 #i‡
OPT_A2


71 
sys_f‹k
(
å≠‰ame
 *
tf
, 
pid_t
* 
ªtvÆ
);

72 
sys_execv
(
u£Ωå_t
 
¥og«me
, u£Ωå_à
¨gs
);

	@include/test.h

30 #i‚de‡
_TEST_H_


31 
	#_TEST_H_


	)

34 
	~"›t-A2.h
"

42 
whÆem©ög
(, **);

44 #ifde‡
UW


45 
ˇtmou£
(, **);

46 
åaffic_simuœti⁄
(, **);

54 
¨øyã°
(, **);

55 
bôm≠ã°
(, **);

56 
queuëe°
(, **);

59 
thªadã°
(, **);

60 
thªadã°2
(, **);

61 
thªadã°3
(, **);

62 
£mã°
(, **);

63 
lockã°
(, **);

64 
cvã°
(, **);

66 #ifde‡
UW


68 
uwlockã°1
(, **);

70 
uwvm°©°e°
(, **);

74 
f°e°
(, **);

75 
ªad°ªss
(, **);

76 
wrôe°ªss
(, **);

77 
wrôe°ªss2
(, **);

78 
¸óã°ªss
(, **);

79 
¥ötfûe
(, **);

82 
mÆlo˘e°
(, **);

83 
mÆloc°ªss
(, **);

84 
√âe°
(, **);

87 #i‡
OPT_A2


88 
ru≈rogøm
(*
¥og«me
, ** 
¨gs
, 
«rgs
);

90 
ru≈rogøm
(*
¥og«me
);

93 
míu
(*
¨g°r
);

96 
kmaö
(*
boŸ°rög
);

	@include/thread.h

30 #i‚de‡
_THREAD_H_


31 
	#_THREAD_H_


	)

39 
	~<¨øy.h
>

40 
	~<•ölock.h
>

41 
	~<thªadli°.h
>

43 
	g˝u
;

46 
	~<machöe/thªad.h
>

50 
	#STACK_SIZE
 4096

	)

53 
	#STACK_MASK
 (~(
vaddr_t
)(
STACK_SIZE
-1))

	)

56 
	#SAME_STACK
(
p1
, 
p2
Ë((’1Ë& 
STACK_MASK
Ë=(’2Ë& STACK_MASK))

	)

61 
	mS_RUN
,

62 
	mS_READY
,

63 
	mS_SLEEP
,

64 
	mS_ZOMBIE
,

65 } 
	tthªad°©e_t
;

68 
	sthªad
 {

73 *
	mt_«me
;

74 c⁄° *
	mt_wch™_«me
;

75 
thªad°©e_t
 
	mt_°©e
;

80 
thªad_machdï
 
	mt_machdï
;

81 
thªadli°node
 
	mt_li°node
;

82 *
	mt_°ack
;

83 
swôch‰ame
 *
	mt_c⁄ãxt
;

84 
˝u
 *
	mt_˝u
;

85 
¥oc
 *
	mt_¥oc
;

100 
boﬁ
 
	mt_ö_öãºu±
;

101 
	mt_cur•l
;

102 
	mt_ùlhigh_cou¡
;

114 #i‚de‡
THREADINLINE


115 
	#THREADINLINE
 
INLINE


	)

118 
DECLARRAY
(
thªad
);

119 
DEFARRAY
(
thªad
, 
THREADINLINE
);

122 
thªad_boŸ°øp
();

125 
thªad_°¨t_˝us
();

128 
thªad_∑nic
();

131 
thªad_shutdown
();

143 
thªad_f‹k
(c⁄° *
«me
, 
¥oc
 *proc,

144 (*
func
)(*, ),

145 *
d©a1
, 
d©a2
);

151 
	`thªad_exô
();

158 
	`thªad_yõld
();

163 
	`scheduÀ
();

169 
	`thªad_c⁄sidî_migøti⁄
();

	@include/threadlist.h

30 #i‚de‡
_THREADLIST_H_


31 
	#_THREADLIST_H_


	)

34 
	gthªad
;

53 
	sthªadli°node
 {

54 
thªadli°node
 *
	mén_¥ev
;

55 
thªadli°node
 *
	mén_√xt
;

56 
thªad
 *
	mén_£lf
;

59 
	sthªadli°
 {

60 
thªadli°node
 
	mé_hód
;

61 
thªadli°node
 
	mé_èû
;

62 
	mé_cou¡
;

66 
thªadli°node_öô
(
thªadli°node
 *
én
, 
thªad
 *
£lf
);

67 
thªadli°node_˛ónup
(
thªadli°node
 *
én
);

70 
thªadli°_öô
(
thªadli°
 *
é
);

71 
thªadli°_˛ónup
(
thªadli°
 *
é
);

74 
boﬁ
 
thªadli°_i£m±y
(
thªadli°
 *
é
);

77 
thªadli°_addhód
(
thªadli°
 *
é
, 
thªad
 *
t
);

78 
thªadli°_addèû
(
thªadli°
 *
é
, 
thªad
 *
t
);

79 
thªad
 *
thªadli°_ªmhód
(
thªadli°
 *
é
);

80 
thªad
 *
thªadli°_ªmèû
(
thªadli°
 *
é
);

83 
thªadli°_ö£πa·î
(
thªadli°
 *
é
,

84 
thªad
 *
⁄li°
, thªad *
addì
);

85 
thªadli°_ö£πbef‹e
(
thªadli°
 *
é
,

86 
thªad
 *
addì
, thªad *
⁄li°
);

87 
thªadli°_ªmove
(
thªadli°
 *
é
, 
thªad
 *
t
);

90 
	#THREADLIST_FORALL
(
ôîv¨
, 
é
) \

91 (
ôîv¨
Ë(
é
).
é_hód
.
én_√xt
->
én_£lf
; \

92 (
ôîv¨
)->
t_li°node
.
én_√xt
 !
NULL
; \

93 (
ôîv¨
Ë(ôîv¨)->
t_li°node
.
én_√xt
->
én_£lf
)

	)

95 
	#THREADLIST_FORALL_REV
(
ôîv¨
, 
é
) \

96 (
ôîv¨
Ë(
é
).
é_èû
.
én_¥ev
->
én_£lf
; \

97 (
ôîv¨
)->
t_li°node
.
én_¥ev
 !
NULL
; \

98 (
ôîv¨
Ë(ôîv¨)->
t_li°node
.
én_¥ev
->
én_£lf
)

	)

	@include/threadprivate.h

30 #i‚de‡
_THREADPRIVATE_H_


31 
	#_THREADPRIVATE_H_


	)

33 
	gthªad
;

34 
	gthªad_machdï
;

35 
	gswôch‰ame
;

55 
thªad_°¨tup
((*
íåypoöt
)(*
d©a1
, 
d©a2
),

56 *
d©a1
, 
d©a2
);

59 
	`thªad_machdï_öô
(
thªad_machdï
 *
tm
);

60 
	`thªad_machdï_˛ónup
(
thªad_machdï
 *
tm
);

70 
	`swôch‰ame_swôch
(
swôch‰ame
 **
¥ev
, swôch‰amê**
√xt
);

73 
	`swôch‰ame_öô
(
thªad
 *,

74 (*
íåypoöt
)(*
d©a1
, 
d©a2
),

75 *
d©a1
, 
d©a2
);

	@include/types.h

30 #i‚de‡
_TYPES_H_


31 
	#_TYPES_H_


	)

80 
	~<kîn/ty≥s.h
>

83 
	~<machöe/ty≥s.h
>

90 
	s__u£Ωå
 { 
	m_dummy
; };

91 
__u£Ωå
 *
	tu£Ωå_t
;

92 c⁄° 
	t__u£Ωå
 *
	tc⁄°_u£Ωå_t
;

100 
__i8
 
	töt8_t
;

101 
__i16
 
	töt16_t
;

102 
__i32
 
	töt32_t
;

103 
__i64
 
	töt64_t
;

104 
__u8
 
	tuöt8_t
;

105 
__u16
 
	tuöt16_t
;

106 
__u32
 
	tuöt32_t
;

107 
__u64
 
	tuöt64_t
;

108 
__size_t
 
	tsize_t
;

109 
__ssize_t
 
	tssize_t
;

110 
__öçå_t
 
	töçå_t
;

111 
__uöçå_t
 
	tuöçå_t
;

112 
__±rdiff_t
 
	t±rdiff_t
;

115 
__blk˙t_t
 
	tblk˙t_t
;

116 
__blksize_t
 
	tblksize_t
;

117 
__daddr_t
 
	tdaddr_t
;

118 
__dev_t
 
	tdev_t
;

119 
__fsid_t
 
	tfsid_t
;

120 
__gid_t
 
	tgid_t
;

121 
__ö_addr_t
 
	tö_addr_t
;

122 
__ö_p‹t_t
 
	tö_p‹t_t
;

123 
__öo_t
 
	töo_t
;

124 
__mode_t
 
	tmode_t
;

125 
__∆ök_t
 
	t∆ök_t
;

126 
__off_t
 
	toff_t
;

127 
__pid_t
 
	tpid_t
;

128 
__æim_t
 
	tæim_t
;

129 
__ß_Ámûy_t
 
	tß_Ámûy_t
;

130 
__time_t
 
	ttime_t
;

131 
__uid_t
 
	tuid_t
;

133 
__nfds_t
 
	tnfds_t
;

134 
__sockÀn_t
 
	tsockÀn_t
;

140 
	#CHAR_BIT
 
__CHAR_BIT


	)

146 
	#NULL
 ((*)0)

	)

151 
_Boﬁ
 
	tboﬁ
;

152 
	#åue
 1

	)

153 
	#Ál£
 0

	)

	@include/uio.h

30 #i‚de‡
_UIO_H_


31 
	#_UIO_H_


	)

40 
	~<kîn/iovec.h
>

43 
	euio_rw
 {

44 
	mUIO_READ
,

45 
	mUIO_WRITE
,

49 
	euio_£g
 {

50 
	mUIO_USERISPACE
,

51 
	mUIO_USERSPACE
,

52 
	mUIO_SYSSPACE
,

55 
	suio
 {

56 
iovec
 *
	muio_iov
;

57 
	muio_iov˙t
;

58 
off_t
 
	muio_off£t
;

59 
size_t
 
	muio_ªsid
;

60 
uio_£g
 
	muio_£gÊg
;

61 
uio_rw
 
	muio_rw
;

62 
addr•a˚
 *
	muio_•a˚
;

100 
uiomove
(*
kbuf„r
, 
size_t
 
Àn
, 
uio
 *uio);

105 
uiomovezîos
(
size_t
 
Àn
, 
uio
 *uio);

119 
uio_köô
(
iovec
 *, 
uio
 *,

120 *
kbuf
, 
size_t
 
Àn
, 
off_t
 
pos
, 
uio_rw
 
rw
);

	@include/uw-vmstats.h

1 #i‚de‡
VM_STATS_H


2 
	#VM_STATS_H


	)

29 
	#VMSTAT_TLB_FAULT
 (0)

	)

30 
	#VMSTAT_TLB_FAULT_FREE
 (1)

	)

31 
	#VMSTAT_TLB_FAULT_REPLACE
 (2)

	)

32 
	#VMSTAT_TLB_INVALIDATE
 (3)

	)

33 
	#VMSTAT_TLB_RELOAD
 (4)

	)

34 
	#VMSTAT_PAGE_FAULT_ZERO
 (5)

	)

35 
	#VMSTAT_PAGE_FAULT_DISK
 (6)

	)

36 
	#VMSTAT_ELF_FILE_READ
 (7)

	)

37 
	#VMSTAT_SWAP_FILE_READ
 (8)

	)

38 
	#VMSTAT_SWAP_FILE_WRITE
 (9)

	)

39 
	#VMSTAT_COUNT
 (10)

	)

44 
vm°©s_öô
();

45 
_vm°©s_öô
();

52 
vm°©s_öc
(
ödex
);

53 
_vm°©s_öc
(
ödex
);

56 
vm°©s_¥öt
();

	@include/version.h

30 #i‚de‡
_VERSION_H_


31 
	#_VERSION_H_


	)

37 
	#BASE_VERSION
 "1.99.05"

	)

42 
	#GROUP_VERSION
 "0"

	)

	@include/vfs.h

30 #i‚de‡
_VFS_H_


31 
	#_VFS_H_


	)

34 
	~<¨øy.h
>

44 
	guio
;

45 
	gdevi˚
;

46 
	gfs
;

47 
	gvnode
;

62 
vfs_£tcurdú
(
vnode
 *
dú
);

63 
vfs_˛órcurdú
();

64 
vfs_gëcurdú
(
vnode
 **
ªtdú
);

65 
vfs_sync
();

66 
vfs_gëroŸ
(c⁄° *
dev«me
, 
vnode
 **
ªsu…
);

67 c⁄° *
vfs_gëdev«me
(
fs
 *fs);

80 
vfs_lookup
(*
∑th
, 
vnode
 **
ªsu…
);

81 
vfs_look∑ª¡
(*
∑th
, 
vnode
 **
ªsu…
,

82 *
buf
, 
size_t
 
buÊí
);

104 
vfs_›í
(*
∑th
, 
›íÊags
, 
mode_t
 
mode
, 
vnode
 **
ªt
);

105 
vfs_˛o£
(
vnode
 *
vn
);

106 
vfs_ªadlök
(*
∑th
, 
uio
 *
d©a
);

107 
vfs_symlök
(c⁄° *
c⁄ã¡s
, *
∑th
);

108 
vfs_mkdú
(*
∑th
, 
mode_t
 
mode
);

109 
vfs_lök
(*
ﬁd∑th
, *
√w∑th
);

110 
vfs_ªmove
(*
∑th
);

111 
vfs_rmdú
(*
∑th
);

112 
vfs_ª«me
(*
ﬁd∑th
, *
√w∑th
);

114 
vfs_chdú
(*
∑th
);

115 
vfs_gëcwd
(
uio
 *
buf
);

162 
vfs_boŸ°øp
();

164 
vfs_£tboŸfs
(c⁄° *
f¢ame
);

165 
vfs_˛órboŸfs
();

167 
vfs_adddev
(c⁄° *
dev«me
, 
devi˚
 *
dev
, 
mou¡abÀ
);

168 
vfs_addfs
(c⁄° *
dev«me
, 
fs
 *fs);

170 
vfs_mou¡
(c⁄° *
dev«me
, *
d©a
,

171 (*
mou¡func
)(*
d©a
,

172 
devi˚
 *
dev
,

173 
fs
 **
ªsu…
));

174 
	`vfs_unmou¡
(c⁄° *
dev«me
);

175 
	`vfs_unmou¡Æl
();

180 #i‚de‡
VFSINLINE


181 
	#VFSINLINE
 
INLINE


	)

184 
	`DECLARRAY
(
vnode
);

185 
	`DEFARRAY
(
vnode
, 
VFSINLINE
);

191 
	`vfs_biglock_acquúe
();

192 
	`vfs_biglock_ªÀa£
();

193 
boﬁ
 
	`vfs_biglock_do_i_hﬁd
();

	@include/vm.h

30 #i‚de‡
_VM_H_


31 
	#_VM_H_


	)

40 
	~<machöe/vm.h
>

43 
	#VM_FAULT_READ
 0

	)

44 
	#VM_FAULT_WRITE
 1

	)

45 
	#VM_FAULT_READONLY
 2

	)

49 
vm_boŸ°øp
();

52 
vm_Áu…
(
Áu…ty≥
, 
vaddr_t
 
Áu…addªss
);

55 
vaddr_t
 
Æloc_k∑ges
(
≈ages
);

56 
‰ì_k∑ges
(
vaddr_t
 
addr
);

59 
vm_ébshoŸdown_Æl
();

60 
vm_ébshoŸdown
(c⁄° 
ébshoŸdown
 *);

	@include/vnode.h

30 #i‚de‡
_VNODE_H_


31 
	#_VNODE_H_


	)

34 
	guio
;

35 
	g°©
;

54 
	svnode
 {

55 
	mvn_ªfcou¡
;

56 
	mvn_›ícou¡
;

58 
fs
 *
	mvn_fs
;

60 *
	mvn_d©a
;

62 c⁄° 
vnode_›s
 *
	mvn_›s
;

193 
	#VOP_MAGIC
 0xa2b3c4d5

	)

195 
	svnode_›s
 {

196 
	mv›_magic
;

198 (*
	mv›_›í
)(
vnode
 *
	mobje˘
, 
	mÊags_‰om_›í
);

199 (*
	mv›_˛o£
)(
vnode
 *
	mobje˘
);

200 (*
	mv›_ª˛aim
)(
vnode
 *
	mvnode
);

203 (*
	mv›_ªad
)(
vnode
 *
	mfûe
, 
uio
 *
	muio
);

204 (*
	mv›_ªadlök
)(
vnode
 *
	mlök
, 
uio
 *
	muio
);

205 (*
	mv›_gëdúíåy
)(
vnode
 *
	mdú
, 
uio
 *
	muio
);

206 (*
	mv›_wrôe
)(
vnode
 *
	mfûe
, 
uio
 *
	muio
);

207 (*
	mv›_io˘l
)(
vnode
 *
	mobje˘
, 
	m›
, 
u£Ωå_t
 
	md©a
);

208 (*
	mv›_°©
)(
vnode
 *
	mobje˘
, 
°©
 *
	m°©buf
);

209 (*
	mv›_gëty≥
)(
vnode
 *
	mobje˘
, 
mode_t
 *
	mªsu…
);

210 (*
	mv›_åy£ek
)(
vnode
 *
	mobje˘
, 
off_t
 
	mpos
);

211 (*
	mv›_fsync
)(
vnode
 *
	mobje˘
);

212 (*
	mv›_mm≠
)(
vnode
 *
	mfûe
 );

213 (*
	mv›_åunˇã
)(
vnode
 *
	mfûe
, 
off_t
 
	mÀn
);

214 (*
	mv›_«mefûe
)(
vnode
 *
	mfûe
, 
uio
 *
	muio
);

217 (*
	mv›_¸ót
)(
vnode
 *
	mdú
,

218 c⁄° *
	m«me
, 
boﬁ
 
	mex˛
, 
mode_t
 
	mmode
,

219 
vnode
 **
	mªsu…
);

220 (*
	mv›_symlök
)(
vnode
 *
	mdú
,

221 c⁄° *
	mc⁄ã¡s
, c⁄° *
	m«me
);

222 (*
	mv›_mkdú
)(
vnode
 *
	m∑ª¡dú
,

223 c⁄° *
	m«me
, 
mode_t
 
	mmode
);

224 (*
	mv›_lök
)(
vnode
 *
	mdú
,

225 c⁄° *
	m«me
, 
vnode
 *
	mfûe
);

226 (*
	mv›_ªmove
)(
vnode
 *
	mdú
,

227 c⁄° *
	m«me
);

228 (*
	mv›_rmdú
)(
vnode
 *
	mdú
,

229 c⁄° *
	m«me
);

231 (*
	mv›_ª«me
)(
vnode
 *
	mvn1
, c⁄° *
	m«me1
,

232 
vnode
 *
	mvn2
, c⁄° *
	m«me2
);

235 (*
	mv›_lookup
)(
vnode
 *
	mdú
,

236 *
	m∑th«me
, 
vnode
 **
	mªsu…
);

237 (*
	mv›_look∑ª¡
)(
vnode
 *
	mdú
,

238 *
	m∑th«me
, 
vnode
 **
	mªsu…
,

239 *
	mbuf
, 
size_t
 
	mÀn
);

242 
	#__VOP
(
vn
, 
sym
Ë(
	`vnode_check
(vn, #sym), (vn)->
vn_›s
->
v›_
##sym)

	)

244 
	#VOP_OPEN
(
vn
, 
Êags
Ë(
	`__VOP
(vn, 
›í
)(vn, fœgs))

	)

245 
	#VOP_CLOSE
(
vn
Ë(
	`__VOP
(vn, 
˛o£
)(vn))

	)

246 
	#VOP_RECLAIM
(
vn
Ë(
	`__VOP
(vn, 
ª˛aim
)(vn))

	)

248 
	#VOP_READ
(
vn
, 
uio
Ë(
	`__VOP
(vn, 
ªad
)(vn, uio))

	)

249 
	#VOP_READLINK
(
vn
, 
uio
Ë(
	`__VOP
(vn, 
ªadlök
)(vn, uio))

	)

250 
	#VOP_GETDIRENTRY
(
vn
, 
uio
Ë(
	`__VOP
(vn,
gëdúíåy
)(vn, uio))

	)

251 
	#VOP_WRITE
(
vn
, 
uio
Ë(
	`__VOP
(vn, 
wrôe
)(vn, uio))

	)

252 
	#VOP_IOCTL
(
vn
, 
code
, 
buf
Ë(
	`__VOP
(vn, 
io˘l
)(vn,code,buf))

	)

253 
	#VOP_STAT
(
vn
, 
±r
Ë(
	`__VOP
(vn, 
°©
)(vn,Öå))

	)

254 
	#VOP_GETTYPE
(
vn
, 
ªsu…
Ë(
	`__VOP
(vn, 
gëty≥
)(vn,Ñesu…))

	)

255 
	#VOP_TRYSEEK
(
vn
, 
pos
Ë(
	`__VOP
(vn, 
åy£ek
)(vn,Öos))

	)

256 
	#VOP_FSYNC
(
vn
Ë(
	`__VOP
(vn, 
fsync
)(vn))

	)

257 
	#VOP_MMAP
(
vn
 ) (
	`__VOP
(vn, 
mm≠
)(v¿ ))

	)

258 
	#VOP_TRUNCATE
(
vn
, 
pos
Ë(
	`__VOP
(vn, 
åunˇã
)(vn,Öos))

	)

259 
	#VOP_NAMEFILE
(
vn
, 
uio
Ë(
	`__VOP
(vn, 
«mefûe
)(vn, uio))

	)

261 
	#VOP_CREAT
(
vn
,
nm
,
ex˛
,
mode
,
ªs
Ë(
	`__VOP
(vn, 
¸ót
)(vn,nm,ex˛,mode,ªs))

	)

262 
	#VOP_SYMLINK
(
vn
, 
«me
, 
c⁄ã¡
Ë(
	`__VOP
(vn, 
symlök
)(vn,Çame, c⁄ã¡))

	)

263 
	#VOP_MKDIR
(
vn
, 
«me
, 
mode
Ë(
	`__VOP
(vn, 
mkdú
)(vn,Çame, mode))

	)

264 
	#VOP_LINK
(
vn
, 
«me
, 
vn2
Ë(
	`__VOP
(vn, 
lök
)(vn,Çame, vn2))

	)

265 
	#VOP_REMOVE
(
vn
, 
«me
Ë(
	`__VOP
(vn, 
ªmove
)(vn,Çame))

	)

266 
	#VOP_RMDIR
(
vn
, 
«me
Ë(
	`__VOP
(vn, 
rmdú
)(vn,Çame))

	)

267 
	#VOP_RENAME
(
vn1
,
«me1
,
vn2
,
«me2
)(
	`__VOP
(vn1,
ª«me
)(vn1,«me1,vn2,«me2))

	)

269 
	#VOP_LOOKUP
(
vn
, 
«me
, 
ªs
Ë(
	`__VOP
(vn, 
lookup
)(vn,Çame,Ñes))

	)

270 
	#VOP_LOOKPARENT
(
vn
,
nm
,
ªs
,
bf
,
 
Ë(
	`__VOP
(vn,
look∑ª¡
)(vn,nm,ªs,bf, ))

	)

275 
vnode_check
(
vnode
 *, c⁄° *
›
);

280 
vnode_ö¸ef
(
vnode
 *);

281 
vnode_de¸ef
(
vnode
 *);

283 
	#VOP_INCREF
(
vn
Ë
	`vnode_ö¸ef
(vn)

	)

284 
	#VOP_DECREF
(
vn
Ë
	`vnode_de¸ef
(vn)

	)

292 
vnode_öc›í
(
vnode
 *);

293 
vnode_dec›í
(
vnode
 *);

295 
	#VOP_INCOPEN
(
vn
Ë
	`vnode_öc›í
(vn)

	)

296 
	#VOP_DECOPEN
(
vn
Ë
	`vnode_dec›í
(vn)

	)

302 
vnode_öô
(
vnode
 *, c⁄° 
vnode_›s
 *
›s
,

303 
fs
 *fs, *
fsd©a
);

305 
	#VOP_INIT
(
vn
, 
›s
, 
fs
, 
d©a
Ë
	`vnode_öô
(vn, ops, fs, d©a)

	)

311 
vnode_˛ónup
(
vnode
 *);

313 
	#VOP_CLEANUP
(
vn
Ë
	`vnode_˛ónup
(vn)

	)

	@include/wchan.h

30 #i‚de‡
_WCHAN_H_


31 
	#_WCHAN_H_


	)

38 
	gwch™
;

45 
wch™
 *
wch™_¸óã
(c⁄° *
«me
);

50 
wch™_de°roy
(
wch™
 *
wc
);

56 
boﬁ
 
wch™_i£m±y
(
wch™
 *
wc
);

61 
wch™_lock
(
wch™
 *
wc
);

62 
wch™_u∆ock
(
wch™
 *
wc
);

72 
wch™_¶ìp
(
wch™
 *
wc
);

81 
wch™_wake⁄e
(
wch™
 *
wc
);

82 
wch™_wakóŒ
(
wch™
 *
wc
);

	@lib/array.c

30 
	#ARRAYINLINE


	)

32 
	~<ty≥s.h
>

33 
	~<kîn/î∫o.h
>

34 
	~<lib.h
>

35 
	~<¨øy.h
>

37 
¨øy
 *

38 
	$¨øy_¸óã
()

40 
¨øy
 *
a
;

42 
a
 = 
	`kmÆloc
((*a));

43 i‡(
a
 !
NULL
) {

44 
	`¨øy_öô
(
a
);

46  
a
;

47 
	}
}

50 
	$¨øy_de°roy
(
¨øy
 *
a
)

52 
	`¨øy_˛ónup
(
a
);

53 
	`k‰ì
(
a
);

54 
	}
}

57 
	$¨øy_öô
(
¨øy
 *
a
)

59 
a
->
num
 =á->
max
 = 0;

60 
a
->
v
 = 
NULL
;

61 
	}
}

64 
	$¨øy_˛ónup
(
¨øy
 *
a
)

71 
	`ARRAYASSERT
(
a
->
num
 == 0);

72 
	`k‰ì
(
a
->
v
);

73 #ifde‡
ARRAYS_CHECKED


74 
a
->
v
 = 
NULL
;

76 
	}
}

79 
	$¨øy_£tsize
(
¨øy
 *
a
, 
num
)

81 **
√w±r
;

82 
√wmax
;

84 i‡(
num
 > 
a
->
max
) {

86 
√wmax
 = 
a
->
max
;

87 
num
 > 
√wmax
) {

88 
√wmax
 =Çewmax ?Çewmax*2 : 4;

98 
√w±r
 = 
	`kmÆloc
(
√wmax
*(*
a
->
v
));

99 i‡(
√w±r
 =
NULL
) {

100  
ENOMEM
;

102 
	`mem˝y
(
√w±r
, 
a
->
v
,á->
num
*(*a->v));

103 
	`k‰ì
(
a
->
v
);

104 
a
->
v
 = 
√w±r
;

105 
a
->
max
 = 
√wmax
;

107 
a
->
num
 =Çum;

110 
	}
}

113 
	$¨øy_ªmove
(
¨øy
 *
a
, 
ödex
)

115 
num_to_move
;

117 
	`ARRAYASSERT
(
a
->
num
 <a->
max
);

118 
	`ARRAYASSERT
(
ödex
 < 
a
->
num
);

120 
num_to_move
 = 
a
->
num
 - (
ödex
 + 1);

121 
	`memmove
(
a
->
v
 + 
ödex
,á->v + index+1, 
num_to_move
*(*));

122 
a
->
num
--;

123 
	}
}

	@lib/bitmap.c

34 
	~<ty≥s.h
>

35 
	~<kîn/î∫o.h
>

36 
	~<lib.h
>

37 
	~<bôm≠.h
>

46 
	#BITS_PER_WORD
 (
CHAR_BIT
)

	)

47 
	#WORD_TYPE
 

	)

48 
	#WORD_ALLBITS
 (0xff)

	)

50 
	sbôm≠
 {

51 
	mnbôs
;

52 
WORD_TYPE
 *
	mv
;

56 
bôm≠
 *

57 
	$bôm≠_¸óã
(
nbôs
)

59 
bôm≠
 *
b
;

60 
w‹ds
;

62 
w‹ds
 = 
	`DIVROUNDUP
(
nbôs
, 
BITS_PER_WORD
);

63 
b
 = 
	`kmÆloc
((
bôm≠
));

64 i‡(
b
 =
NULL
) {

65  
NULL
;

67 
b
->
v
 = 
	`kmÆloc
(
w‹ds
*(
WORD_TYPE
));

68 i‡(
b
->
v
 =
NULL
) {

69 
	`k‰ì
(
b
);

70  
NULL
;

73 
	`bzîo
(
b
->
v
, 
w‹ds
*(
WORD_TYPE
));

74 
b
->
nbôs
 =Çbits;

77 i‡(
w‹ds
 > 
nbôs
 / 
BITS_PER_WORD
) {

78 
j
, 
ix
 = 
w‹ds
-1;

79 
ovîbôs
 = 
nbôs
 - 
ix
*
BITS_PER_WORD
;

81 
	`KASSERT
(
nbôs
 / 
BITS_PER_WORD
 =
w‹ds
-1);

82 
	`KASSERT
(
ovîbôs
 > 0 && ovîbô†< 
BITS_PER_WORD
);

84 
j
=
ovîbôs
; j<
BITS_PER_WORD
; j++) {

85 
b
->
v
[
ix
] |((
WORD_TYPE
)1 << 
j
);

89  
b
;

90 
	}
}

93 
	$bôm≠_gëd©a
(
bôm≠
 *
b
)

95  
b
->
v
;

96 
	}
}

99 
	$bôm≠_Æloc
(
bôm≠
 *
b
, *
ödex
)

101 
ix
;

102 
maxix
 = 
	`DIVROUNDUP
(
b
->
nbôs
, 
BITS_PER_WORD
);

103 
off£t
;

105 
ix
=0; ix<
maxix
; ix++) {

106 i‡(
b
->
v
[
ix
]!=
WORD_ALLBITS
) {

107 
off£t
 = 0; off£à< 
BITS_PER_WORD
; offset++) {

108 
WORD_TYPE
 
mask
 = ((WORD_TYPE)1Ë<< 
off£t
;

110 i‡((
b
->
v
[
ix
] & 
mask
)==0) {

111 
b
->
v
[
ix
] |
mask
;

112 *
ödex
 = (
ix
*
BITS_PER_WORD
)+
off£t
;

113 
	`KASSERT
(*
ödex
 < 
b
->
nbôs
);

117 
	`KASSERT
(0);

120  
ENOSPC
;

121 
	}
}

124 
ölöe


126 
	$bôm≠_å™¶©e
(
bôno
, *
ix
, 
WORD_TYPE
 *
mask
)

128 
off£t
;

129 *
ix
 = 
bôno
 / 
BITS_PER_WORD
;

130 
off£t
 = 
bôno
 % 
BITS_PER_WORD
;

131 *
mask
 = ((
WORD_TYPE
)1Ë<< 
off£t
;

132 
	}
}

135 
	$bôm≠_m¨k
(
bôm≠
 *
b
, 
ödex
)

137 
ix
;

138 
WORD_TYPE
 
mask
;

140 
	`KASSERT
(
ödex
 < 
b
->
nbôs
);

141 
	`bôm≠_å™¶©e
(
ödex
, &
ix
, &
mask
);

143 
	`KASSERT
((
b
->
v
[
ix
] & 
mask
)==0);

144 
b
->
v
[
ix
] |
mask
;

145 
	}
}

148 
	$bôm≠_unm¨k
(
bôm≠
 *
b
, 
ödex
)

150 
ix
;

151 
WORD_TYPE
 
mask
;

153 
	`KASSERT
(
ödex
 < 
b
->
nbôs
);

154 
	`bôm≠_å™¶©e
(
ödex
, &
ix
, &
mask
);

156 
	`KASSERT
((
b
->
v
[
ix
] & 
mask
)!=0);

157 
b
->
v
[
ix
] &~
mask
;

158 
	}
}

162 
	$bôm≠_is£t
(
bôm≠
 *
b
, 
ödex
)

164 
ix
;

165 
WORD_TYPE
 
mask
;

167 
	`bôm≠_å™¶©e
(
ödex
, &
ix
, &
mask
);

168  (
b
->
v
[
ix
] & 
mask
);

169 
	}
}

172 
	$bôm≠_de°roy
(
bôm≠
 *
b
)

174 
	`k‰ì
(
b
->
v
);

175 
	`k‰ì
(
b
);

176 
	}
}

	@lib/bswap.c

30 
	~<ty≥s.h
>

31 
	~<ídün.h
>

46 
uöt16_t


47 
	$bsw≠16
(
uöt16_t
 
vÆ
)

49  ((
vÆ
 & 0x00ff) << 8)

50 | ((
vÆ
 & 0xff00) >> 8);

51 
	}
}

53 
uöt32_t


54 
	$bsw≠32
(
uöt32_t
 
vÆ
)

56  ((
vÆ
 & 0x000000ff) << 24)

57 | ((
vÆ
 & 0x0000ff00) << 8)

58 | ((
vÆ
 & 0x00ff0000) >> 8)

59 | ((
vÆ
 & 0xff000000) >> 24);

60 
	}
}

62 
uöt64_t


63 
	$bsw≠64
(
uöt64_t
 
vÆ
)

65  ((
vÆ
 & 0x00000000000000ff) << 56)

66 | ((
vÆ
 & 0x000000000000ff00) << 40)

67 | ((
vÆ
 & 0x0000000000ff0000) << 24)

68 | ((
vÆ
 & 0x00000000ff000000) << 8)

69 | ((
vÆ
 & 0x000000ff00000000) << 8)

70 | ((
vÆ
 & 0x0000ff0000000000) << 24)

71 | ((
vÆ
 & 0x00ff000000000000) >> 40)

72 | ((
vÆ
 & 0xff00000000000000) >> 56);

73 
	}
}

94 #i‡
_BYTE_ORDER
 =
_LITTLE_ENDIAN


95 
	#TO
(
èg
, 
bôs
, 
ty≥
) \

96 
ty≥
 
¡oh
##
	`èg
—y≥ 
vÆ
Ë{  
bsw≠
##
	`bôs
(val); } \

97 
ty≥
 
ht⁄
##
	`èg
—y≥ 
vÆ
Ë{  
bsw≠
##
	`bôs
(vÆ); }

	)

105 #i‡
_BYTE_ORDER
 =
_BIG_ENDIAN


106 
	#TO
(
èg
, 
bôs
, 
ty≥
) \

107 
ty≥
 
¡oh
##
	`èg
—y≥ 
vÆ
) {  val; } \

108 
ty≥
 
ht⁄
##
	`èg
—y≥ 
vÆ
Ë{  vÆ; }

	)

111 #i‡
_BYTE_ORDER
 =
_PDP_ENDIAN


115 #i‚de‡
TO


119 
	$TO
(
s
, 16, 
uöt16_t
)

120 
	$TO
(
l
, 32, 
uöt32_t
)

121 
	$TO
(
Œ
, 64, 
uöt64_t
)

138 
	$joö32to64
(
uöt32_t
 
x1
, uöt32_à
x2
, 
uöt64_t
 *
y2
)

140 #i‡
_BYTE_ORDER
 =
_BIG_ENDIAN


141 *
y2
 = ((
uöt64_t
)
x1
 << 32Ë| (uöt64_t)
x2
;

142 #ñi‡
_BYTE_ORDER
 =
_LITTLE_ENDIAN


143 *
y2
 = (
uöt64_t
)
x1
 | ((uöt64_t)
x2
 << 32);

147 
	}
}

150 
	$•lô64to32
(
uöt64_t
 
x
, 
uöt32_t
 *
y1
, uöt32_à*
y2
)

152 #i‡
_BYTE_ORDER
 =
_BIG_ENDIAN


153 *
y1
 = 
x
 >> 32;

154 *
y2
 = 
x
 & 0xffffffff;

155 #ñi‡
_BYTE_ORDER
 =
_LITTLE_ENDIAN


156 *
y1
 = 
x
 & 0xffffffff;

157 *
y2
 = 
x
 >> 32;

161 
	}
}

	@lib/kgets.c

31 
	~<ty≥s.h
>

32 
	~<lib.h
>

41 
	$back•
()

43 
	`putch
('\b');

44 
	`putch
(' ');

45 
	`putch
('\b');

46 
	}
}

54 
	$kgës
(*
buf
, 
size_t
 
maxÀn
)

56 
size_t
 
pos
 = 0;

57 
ch
;

60 
ch
 = 
	`gëch
();

61 i‡(
ch
=='\n' || ch=='\r') {

62 
	`putch
('\n');

67 i‡(
ch
>=32 && ch<127 && 
pos
 < 
maxÀn
-1) {

68 
	`putch
(
ch
);

69 
buf
[
pos
++] = 
ch
;

71 i‡((
ch
=='\b' || ch==127Ë&& 
pos
>0) {

73 
	`back•
();

74 
pos
--;

76 i‡(
ch
==3) {

78 
	`putch
('^');

79 
	`putch
('C');

80 
	`putch
('\n');

81 
pos
 = 0;

84 i‡(
ch
==18) {

86 
buf
[
pos
] = 0;

87 
	`k¥ötf
("^R\n%s", 
buf
);

89 i‡(
ch
==21) {

91 
pos
 > 0) {

92 
	`back•
();

93 
pos
--;

96 i‡(
ch
==23) {

98 
pos
 > 0 && 
buf
[pos-1]==' ') {

99 
	`back•
();

100 
pos
--;

102 
pos
 > 0 && 
buf
[pos-1]!=' ') {

103 
	`back•
();

104 
pos
--;

108 
	`bìp
();

112 
buf
[
pos
] = 0;

113 
	}
}

	@lib/kprintf.c

30 
	~<ty≥s.h
>

31 
	~<kîn/uni°d.h
>

32 
	~<°d¨g.h
>

33 
	~<lib.h
>

34 
	~<•l.h
>

35 
	~<thªad.h
>

36 
	~<cuºít.h
>

37 
	~<synch.h
>

38 
	~<maöbus.h
>

39 
	~<vfs.h
>

43 
uöt32_t
 
	gdbÊags
 = 0;

46 
lock
 *
	gk¥ötf_lock
;

49 
•ölock
 
	gk¥ötf_•ölock
;

63 
	$k¥ötf_boŸ°øp
()

65 
	`KASSERT
(
k¥ötf_lock
 =
NULL
);

67 
k¥ötf_lock
 = 
	`lock_¸óã
("kprintf_lock");

68 i‡(
k¥ötf_lock
 =
NULL
) {

69 
	`∑nic
("CouldÇot create kprintf_lock\n");

71 
	`•ölock_öô
(&
k¥ötf_•ölock
);

72 
	}
}

79 
	$c⁄sﬁe_£nd
(*
junk
, c⁄° *
d©a
, 
size_t
 
Àn
)

81 
size_t
 
i
;

83 ()
junk
;

85 
i
=0; i<
Àn
; i++) {

86 
	`putch
(
d©a
[
i
]);

88 
	}
}

94 
	$k¥ötf
(c⁄° *
fmt
, ...)

96 
ch¨s
;

97 
va_li°
 
≠
;

98 
boﬁ
 
dﬁock
;

100 
dﬁock
 = 
k¥ötf_lock
 !
NULL


101 && 
cuπhªad
->
t_ö_öãºu±
 =
Ál£


102 && 
cuπhªad
->
t_ùlhigh_cou¡
 == 0;

104 i‡(
dﬁock
) {

105 
	`lock_acquúe
(
k¥ötf_lock
);

108 
	`•ölock_acquúe
(&
k¥ötf_•ölock
);

110 
	`putch_¥ï¨e
();

112 
	`va_°¨t
(
≠
, 
fmt
);

113 
ch¨s
 = 
	`__v¥ötf
(
c⁄sﬁe_£nd
, 
NULL
, 
fmt
, 
≠
);

114 
	`va_íd
(
≠
);

116 
	`putch_com∂ëe
();

117 i‡(
dﬁock
) {

118 
	`lock_ªÀa£
(
k¥ötf_lock
);

121 
	`•ölock_ªÀa£
(&
k¥ötf_•ölock
);

124  
ch¨s
;

125 
	}
}

133 
	$∑nic
(c⁄° *
fmt
, ...)

135 
va_li°
 
≠
;

148 vﬁ©ûê
evû
;

150 i‡(
evû
 == 0) {

151 
evû
 = 1;

159 
	`•lhigh
();

162 i‡(
evû
 == 1) {

163 
evû
 = 2;

166 
	`thªad_∑nic
();

169 i‡(
evû
 == 2) {

170 
evû
 = 3;

173 
	`k¥ötf
("panic: ");

174 
	`putch_¥ï¨e
();

175 
	`va_°¨t
(
≠
, 
fmt
);

176 
	`__v¥ötf
(
c⁄sﬁe_£nd
, 
NULL
, 
fmt
, 
≠
);

177 
	`va_íd
(
≠
);

178 
	`putch_com∂ëe
();

181 i‡(
evû
 == 3) {

182 
evû
 = 4;

185 
	`vfs_sync
();

188 i‡(
evû
 == 4) {

189 
evû
 = 5;

192 
	`maöbus_∑nic
();

200 
	}
}

206 
	$badas£π
(c⁄° *
ex¥
, c⁄° *
fûe
, 
löe
, c⁄° *
func
)

208 
	`∑nic
("Assertion failed: %s,át %s:%d (%s)\n",

209 
ex¥
, 
fûe
, 
löe
, 
func
);

210 
	}
}

	@lib/misc.c

30 
	~<ty≥s.h
>

31 
	~<kîn/îrmsg.h
>

32 
	~<lib.h
>

38 
	$k°rdup
(c⁄° *
s
)

40 *
z
;

42 
z
 = 
	`kmÆloc
(
	`°æí
(
s
)+1);

43 i‡(
z
 =
NULL
) {

44  
NULL
;

46 
	`°r˝y
(
z
, 
s
);

47  
z
;

48 
	}
}

55 
	$°ªº‹
(
îrcode
)

57 i‡(
îrcode
>=0 &&Éºcodê< 
sys_√º
) {

58  
sys_îæi°
[
îrcode
];

60 
	`∑nic
("InvÆidÉº‹ codê%d\n", 
îrcode
);

61  
NULL
;

62 
	}
}

	@lib/queue.c

5 
	~<ty≥s.h
>

6 
	~<kîn/î∫o.h
>

7 
	~<lib.h
>

8 
	~<queue.h
>

10 
	squeue
 {

11 
	msize
;

12 
	m√xtwrôe
;

13 
	m√xåód
;

14 **
	md©a
;

19 
	$q_grow
(
queue
 *
q
, 
èrgësize
)

21 **
ﬁdd©a
 = 
q
->
d©a
;

22 
⁄r
 = 
q
->
√xåód
;

23 
⁄w
 = 
q
->
√xtwrôe
;

24 
osize
 = 
q
->
size
;

26 
nsize
;

27 **
nd©a
;

29 
i
, 
ªsu…
;

31 
nsize
 = 
q
->
size
;

32 
nsize
 < 
èrgësize
) {

33 
nsize
 *= 2;

35 
	`KASSERT
(
nsize
 > 0);

37 
nd©a
 = 
	`kmÆloc
(
nsize
 * (*));

38 i‡(
nd©a
 =
NULL
) {

39  
ENOMEM
;

41 
q
->
size
 = 
nsize
;

42 
q
->
d©a
 = 
nd©a
;

43 
q
->
√xåód
 = q->
√xtwrôe
 = 0;

45 
i
=
⁄r
; i!=
⁄w
; i = (i+1)%
osize
) {

46 
ªsu…
 = 
	`q_addèû
(
q
, 
ﬁdd©a
[
i
]);

47 
	`KASSERT
(
ªsu…
==0);

49 
	`k‰ì
(
ﬁdd©a
);

51 
	}
}

53 
queue
 *

54 
	$q_¸óã
(
size
)

56 
queue
 *
q
 = 
	`kmÆloc
((queue));

57 i‡(
q
==
NULL
) {

58  
NULL
;

60 
q
->
size
 = size;

61 
q
->
d©a
 = 
	`kmÆloc
(
size
 * (*));

62 i‡(
q
->
d©a
==
NULL
) {

63 
	`k‰ì
(
q
);

64  
NULL
;

66 
q
->
√xåód
 = q->
√xtwrôe
 = 0;

67  
q
;

68 
	}
}

71 
	$q_¥óŒoˇã
(
queue
 *
q
, 
size
)

73 
ªsu…
 = 0;

75 
	`KASSERT
(
q
->
size
 > 0);

77 i‡(
size
 > 
q
->size) {

78 
ªsu…
 = 
	`q_grow
(
q
, 
size
);

80  
ªsu…
;

81 
	}
}

83 
ölöe


85 
	$q_em±y
(
queue
 *
q
)

87  
q
->
√xtwrôe
 =q->
√xåód
;

88 
	}
}

91 
	$q_addèû
(
queue
 *
q
, *
±r
)

93 
√xäext
, 
ªsu…
;

95 
	`KASSERT
(
q
->
size
 > 0);

97 
√xäext
 = (
q
->
√xtwrôe
+1Ë% q->
size
;

98 i‡(
√xäext
==
q
->
√xåód
) {

99 
ªsu…
 = 
	`q_grow
(
q
, q->
size
+1);

100 i‡(
ªsu…
) {

101  
ªsu…
;

103 
√xäext
 = (
q
->
√xtwrôe
+1Ë% q->
size
;

105 
q
->
d©a
[q->
√xtwrôe
] = 
±r
;

106 
q
->
√xtwrôe
 = 
√xäext
;

108 
	}
}

111 
	$q_ªmhód
(
queue
 *
q
)

113 *
ªt
;

115 
	`KASSERT
(
q
->
size
 > 0);

117 
	`KASSERT
(!
	`q_em±y
(
q
));

118 
ªt
 = 
q
->
d©a
[q->
√xåód
];

119 
q
->
√xåód
 = (q->√xåód+1)%q->
size
;

120  
ªt
;

121 
	}
}

124 
	$q_de°roy
(
queue
 *
q
)

126 
	`KASSERT
(
	`q_em±y
(
q
));

127 
	`k‰ì
(
q
->
d©a
);

128 
	`k‰ì
(
q
);

129 
	}
}

133 
	$q_gë°¨t
(
queue
 *
q
)

135  
q
->
√xåód
;

136 
	}
}

139 
	$q_gëíd
(
queue
 *
q
)

141  
q
->
√xtwrôe
;

142 
	}
}

145 
	$q_gësize
(
queue
 *
q
)

147  
q
->
size
;

148 
	}
}

151 
	$q_gëguy
(
queue
 *
q
, 
ödex
)

156 
	`KASSERT
(
ödex
>=0 && index<
q
->
size
);

157  
q
->
d©a
[
ödex
];

158 
	}
}

161 
	$q_≥ek
(
queue
 *
q
)

163 *
ªt
;

165 
	`KASSERT
(
q
);

166 
	`KASSERT
(
q
->
size
 > 0);

168 i‡(
	`q_em±y
(
q
)) {

169 
ªt
 = 0;

171 
ªt
 = 
q
->
d©a
[q->
√xåód
];

173  
ªt
;

174 
	}
}

177 
	$q_Àn
(
queue
 *
theq
)

179 
cou¡
 = 0;

180 
tmp
 = 
theq
->
√xåód
;

181 
tmp
 !
theq
->
√xtwrôe
) {

182 
tmp
 = (tmp+1Ë% 
theq
->
size
;

183 
cou¡
++;

185  
cou¡
;

186 
	}
}

	@lib/uio.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<uio.h
>

33 
	~<¥oc.h
>

34 
	~<cuºít.h
>

35 
	~<c›yöout.h
>

42 
	$uiomove
(*
±r
, 
size_t
 
n
, 
uio
 *uio)

44 
iovec
 *
iov
;

45 
size_t
 
size
;

46 
ªsu…
;

48 i‡(
uio
->
uio_rw
 !
UIO_READ
 && uio->uio_rw !
UIO_WRITE
) {

49 
	`∑nic
("uiomove: InvÆid uio_rw %d\n", (Ë
uio
->
uio_rw
);

51 i‡(
uio
->
uio_£gÊg
==
UIO_SYSSPACE
) {

52 
	`KASSERT
(
uio
->
uio_•a˚
 =
NULL
);

55 
	`KASSERT
(
uio
->
uio_•a˚
 =
	`cuΩroc_gëas
());

58 
n
 > 0 && 
uio
->
uio_ªsid
 > 0) {

60 
iov
 = 
uio
->
uio_iov
;

61 
size
 = 
iov
->
iov_Àn
;

63 i‡(
size
 > 
n
) {

64 
size
 = 
n
;

67 i‡(
size
 == 0) {

69 
uio
->
uio_iov
++;

70 
uio
->
uio_iov˙t
--;

71 i‡(
uio
->
uio_iov˙t
 == 0) {

78 
	`∑nic
("uiomove:Ñan out of buffers\n");

83 
uio
->
uio_£gÊg
) {

84 
UIO_SYSSPACE
:

85 
ªsu…
 = 0;

86 i‡(
uio
->
uio_rw
 =
UIO_READ
) {

87 
	`memmove
(
iov
->
iov_kba£
, 
±r
, 
size
);

90 
	`memmove
(
±r
, 
iov
->
iov_kba£
, 
size
);

92 
iov
->
iov_kba£
 = ((*)iov->iov_kba£+
size
);

94 
UIO_USERSPACE
:

95 
UIO_USERISPACE
:

96 i‡(
uio
->
uio_rw
 =
UIO_READ
) {

97 
ªsu…
 = 
	`c›yout
(
±r
, 
iov
->
iov_uba£
,
size
);

100 
ªsu…
 = 
	`c›yö
(
iov
->
iov_uba£
, 
±r
, 
size
);

102 i‡(
ªsu…
) {

103  
ªsu…
;

105 
iov
->
iov_uba£
 +
size
;

108 
	`∑nic
("uiomove: Invalid uio_segflg %d\n",

109 ()
uio
->
uio_£gÊg
);

112 
iov
->
iov_Àn
 -
size
;

113 
uio
->
uio_ªsid
 -
size
;

114 
uio
->
uio_off£t
 +
size
;

115 
±r
 = ((*Ìå + 
size
);

116 
n
 -
size
;

120 
	}
}

123 
	$uiomovezîos
(
size_t
 
n
, 
uio
 *uio)

126 
zîos
[16];

127 
size_t
 
amt
;

128 
ªsu…
;

131 
	`KASSERT
(
uio
->
uio_rw
 =
UIO_READ
);

133 
n
 > 0) {

134 
amt
 = (
zîos
);

135 i‡(
amt
 > 
n
) {

136 
amt
 = 
n
;

138 
ªsu…
 = 
	`uiomove
(
zîos
, 
amt
, 
uio
);

139 i‡(
ªsu…
) {

140  
ªsu…
;

142 
n
 -
amt
;

146 
	}
}

153 
	$uio_köô
(
iovec
 *
iov
, 
uio
 *
u
,

154 *
kbuf
, 
size_t
 
Àn
, 
off_t
 
pos
, 
uio_rw
 
rw
)

156 
iov
->
iov_kba£
 = 
kbuf
;

157 
iov
->
iov_Àn
 = 
Àn
;

158 
u
->
uio_iov
 = 
iov
;

159 
u
->
uio_iov˙t
 = 1;

160 
u
->
uio_off£t
 = 
pos
;

161 
u
->
uio_ªsid
 = 
Àn
;

162 
u
->
uio_£gÊg
 = 
UIO_SYSSPACE
;

163 
u
->
uio_rw
 = 
rw
;

164 
u
->
uio_•a˚
 = 
NULL
;

165 
	}
}

	@proc/proc.c

45 
	~<ty≥s.h
>

46 
	~<¥oc.h
>

47 
	~<cuºít.h
>

48 
	~<addr•a˚.h
>

49 
	~<vnode.h
>

50 
	~<vfs.h
>

51 
	~<synch.h
>

52 
	~<kîn/f˙é.h
>

55 
	~"›t-A2.h
"

59 
¥oc
 *
	gk¥oc
;

64 #ifde‡
UW


66 vﬁ©ûê
	g¥oc_cou¡
;

69 
£m≠h‹e
 *
	g¥oc_cou¡_muãx
;

71 
£m≠h‹e
 *
	gno_¥oc_£m
;

74 #i‡
OPT_A2


76 
pid_t
 
	gpid_cou¡
;

79 #i‡
OPT_A2


80 
	$gë_node
(
pid_t
 
pid
){

81 
num
 = 
	`¨øy_num
(
¥o˘abÀ
);

82 
ödex
 = -1;

84 
i
=0; i<
num
; i++){

85 
node
* 
cur
 = 
	`¨øy_gë
(
¥o˘abÀ
, 
i
);

86 if(
pid
 =
cur
->pid){

87 
ödex
=
i
;

91 
	`KASSERT
(
ödex
>=0);

92  
ödex
;

93 
	}
}

100 
¥oc
 *

101 
	$¥oc_¸óã
(c⁄° *
«me
)

103 
¥oc
 *proc;

105 
¥oc
 = 
	`kmÆloc
((*proc));

106 i‡(
¥oc
 =
NULL
) {

107  
NULL
;

109 
¥oc
->
p_«me
 = 
	`k°rdup
(
«me
);

110 i‡(
¥oc
->
p_«me
 =
NULL
) {

111 
	`k‰ì
(
¥oc
);

112  
NULL
;

115 
	`thªad¨øy_öô
(&
¥oc
->
p_thªads
);

116 
	`•ölock_öô
(&
¥oc
->
p_lock
);

119 
¥oc
->
p_addr•a˚
 = 
NULL
;

122 
¥oc
->
p_cwd
 = 
NULL
;

124 #ifde‡
UW


125 
¥oc
->
c⁄sﬁe
 = 
NULL
;

129  
¥oc
;

130 
	}
}

136 
	$¥oc_de°roy
(
¥oc
 *proc)

147 
	`KASSERT
(
¥oc
 !
NULL
);

148 
	`KASSERT
(
¥oc
 !
k¥oc
);

157 i‡(
¥oc
->
p_cwd
) {

158 
	`VOP_DECREF
(
¥oc
->
p_cwd
);

159 
¥oc
->
p_cwd
 = 
NULL
;

163 #i‚de‡
UW


164 i‡(
¥oc
->
p_addr•a˚
) {

175 
addr•a˚
 *
as
;

177 
	`as_dó˘iv©e
();

178 
as
 = 
	`cuΩroc_£ès
(
NULL
);

179 
	`as_de°roy
(
as
);

183 #ifde‡
UW


184 i‡(
¥oc
->
c⁄sﬁe
) {

185 
	`vfs_˛o£
(
¥oc
->
c⁄sﬁe
);

189 
	`thªad¨øy_˛ónup
(&
¥oc
->
p_thªads
);

190 
	`•ölock_˛ónup
(&
¥oc
->
p_lock
);

192 
	`k‰ì
(
¥oc
->
p_«me
);

193 
	`k‰ì
(
¥oc
);

195 #ifde‡
UW


200 
	`P
(
¥oc_cou¡_muãx
);

201 
	`KASSERT
(
¥oc_cou¡
 > 0);

202 
¥oc_cou¡
--;

204 i‡(
¥oc_cou¡
 == 0) {

205 
	`V
(
no_¥oc_£m
);

207 
	`V
(
¥oc_cou¡_muãx
);

211 
	}
}

217 
	$¥oc_boŸ°øp
()

219 #i‡
OPT_A2


220 
pid_cou¡
 = 1;

221 
¥o˘abÀ_lock
 = 
	`lock_¸óã
("proctable_lock");

222 
waô_cv
 = 
	`cv_¸óã
("wait_cv");

224 
¥o˘abÀ
 = 
	`¨øy_¸óã
();

225 
ªcy˛ëabÀ
 = 
	`¨øy_¸óã
();

228 
k¥oc
 = 
	`¥oc_¸óã
("[kernel]");

229 i‡(
k¥oc
 =
NULL
) {

230 
	`∑nic
("proc_create for kproc failed\n");

232 #ifde‡
UW


233 
¥oc_cou¡
 = 0;

234 
¥oc_cou¡_muãx
 = 
	`£m_¸óã
("proc_count_mutex",1);

235 i‡(
¥oc_cou¡_muãx
 =
NULL
) {

236 
	`∑nic
("couldÇot createÖroc_count_mutex semaphore\n");

238 
no_¥oc_£m
 = 
	`£m_¸óã
("no_proc_sem",0);

239 i‡(
no_¥oc_£m
 =
NULL
) {

240 
	`∑nic
("couldÇot createÇo_proc_sem semaphore\n");

243 
	}
}

251 
¥oc
 *

252 
	$¥oc_¸óã_ru≈rogøm
(c⁄° *
«me
)

254 
¥oc
 *proc;

255 *
c⁄sﬁe_∑th
;

257 
¥oc
 = 
	`¥oc_¸óã
(
«me
);

258 i‡(
¥oc
 =
NULL
) {

259  
NULL
;

262 #i‡
OPT_A2


263 
node
 *
n
 = 
	`kmÆloc
((node));

265 if(
	`¨øy_num
(
ªcy˛ëabÀ
) == 0){

266 
¥oc
->
pid
 = 
pid_cou¡
;

269 
pid_t
 *
r
 = 
	`¨øy_gë
(
ªcy˛ëabÀ
, 0);

270 
	`¨øy_ªmove
(
ªcy˛ëabÀ
, 0);

271 
¥oc
->
pid
 = *
r
;

274 
n
->
pid
 = 
¥oc
->pid;

275 
n
->
∑ª¡
 = 0;

276 
n
->
exôcode
 = 0;

277 
n
->
°©us
 = 1;

279 
	`¨øy_add
(
¥o˘abÀ
, 
n
, 
NULL
);

282 #ifde‡
UW


284 
c⁄sﬁe_∑th
 = 
	`k°rdup
("con:");

285 i‡(
c⁄sﬁe_∑th
 =
NULL
) {

286 
	`∑nic
("unableÅo copy consoleÖathÇame duringÖrocess creation\n");

288 i‡(
	`vfs_›í
(
c⁄sﬁe_∑th
,
O_WRONLY
,0,&(
¥oc
->
c⁄sﬁe
))) {

289 
	`∑nic
("unableÅo openÅhe console duringÖrocess creation\n");

291 
	`k‰ì
(
c⁄sﬁe_∑th
);

296 
¥oc
->
p_addr•a˚
 = 
NULL
;

300 #ifde‡
UW


304 i‡(
cuΩroc
->
p_cwd
 !
NULL
) {

305 
	`VOP_INCREF
(
cuΩroc
->
p_cwd
);

306 
¥oc
->
p_cwd
 = 
cuΩroc
->p_cwd;

309 
	`•ölock_acquúe
(&
cuΩroc
->
p_lock
);

310 i‡(
cuΩroc
->
p_cwd
 !
NULL
) {

311 
	`VOP_INCREF
(
cuΩroc
->
p_cwd
);

312 
¥oc
->
p_cwd
 = 
cuΩroc
->p_cwd;

314 
	`•ölock_ªÀa£
(&
cuΩroc
->
p_lock
);

317 #ifde‡
UW


321 
	`P
(
¥oc_cou¡_muãx
);

322 
¥oc_cou¡
++;

324 #i‡
OPT_A2


325 
pid_cou¡
 =Öid_count + 1;

328 
	`V
(
¥oc_cou¡_muãx
);

331  
¥oc
;

332 
	}
}

339 
	$¥oc_addthªad
(
¥oc
 *¥oc, 
thªad
 *
t
)

341 
ªsu…
;

343 
	`KASSERT
(
t
->
t_¥oc
 =
NULL
);

345 
	`•ölock_acquúe
(&
¥oc
->
p_lock
);

346 
ªsu…
 = 
	`thªad¨øy_add
(&
¥oc
->
p_thªads
, 
t
, 
NULL
);

347 
	`•ölock_ªÀa£
(&
¥oc
->
p_lock
);

348 i‡(
ªsu…
) {

349  
ªsu…
;

351 
t
->
t_¥oc
 = 
¥oc
;

353 
	}
}

360 
	$¥oc_ªmthªad
(
thªad
 *
t
)

362 
¥oc
 *proc;

363 
i
, 
num
;

365 
¥oc
 = 
t
->
t_¥oc
;

366 
	`KASSERT
(
¥oc
 !
NULL
);

368 
	`•ölock_acquúe
(&
¥oc
->
p_lock
);

370 
num
 = 
	`thªad¨øy_num
(&
¥oc
->
p_thªads
);

371 
i
=0; i<
num
; i++) {

372 i‡(
	`thªad¨øy_gë
(&
¥oc
->
p_thªads
, 
i
Ë=
t
) {

373 
	`thªad¨øy_ªmove
(&
¥oc
->
p_thªads
, 
i
);

374 
	`•ölock_ªÀa£
(&
¥oc
->
p_lock
);

375 
t
->
t_¥oc
 = 
NULL
;

380 
	`•ölock_ªÀa£
(&
¥oc
->
p_lock
);

381 
	`∑nic
("Thªad (%pËha†esˇ≥d from it†¥o˚s†(%p)\n", 
t
, 
¥oc
);

382 
	}
}

389 
addr•a˚
 *

390 
	$cuΩroc_gëas
()

392 
addr•a˚
 *
as
;

393 #ifde‡
UW


397 i‡(
cuΩroc
 =
NULL
) {

398  
NULL
;

402 
	`•ölock_acquúe
(&
cuΩroc
->
p_lock
);

403 
as
 = 
cuΩroc
->
p_addr•a˚
;

404 
	`•ölock_ªÀa£
(&
cuΩroc
->
p_lock
);

405  
as
;

406 
	}
}

412 
addr•a˚
 *

413 
	$cuΩroc_£ès
(
addr•a˚
 *
√was
)

415 
addr•a˚
 *
ﬁdas
;

416 
¥oc
 *¥o¯
cuΩroc
;

418 
	`•ölock_acquúe
(&
¥oc
->
p_lock
);

419 
ﬁdas
 = 
¥oc
->
p_addr•a˚
;

420 
¥oc
->
p_addr•a˚
 = 
√was
;

421 
	`•ölock_ªÀa£
(&
¥oc
->
p_lock
);

422  
ﬁdas
;

423 
	}
}

	@startup/main.c

34 
	~<ty≥s.h
>

35 
	~<kîn/î∫o.h
>

36 
	~<kîn/ªboŸ.h
>

37 
	~<kîn/uni°d.h
>

38 
	~<lib.h
>

39 
	~<•l.h
>

40 
	~<˛ock.h
>

41 
	~<thªad.h
>

42 
	~<¥oc.h
>

43 
	~<cuºít.h
>

44 
	~<synch.h
>

45 
	~<vm.h
>

46 
	~<maöbus.h
>

47 
	~<vfs.h
>

48 
	~<devi˚.h
>

49 
	~<sysˇŒ.h
>

50 
	~<ã°.h
>

51 
	~<vîsi⁄.h
>

52 
	~"autoc⁄f.h
"

64 c⁄° 
buûdvîsi⁄
;

65 c⁄° 
buûdc⁄fig
[];

70 c⁄° 
	gh¨v¨d_c›yright
[] =

80 
	$boŸ
()

99 
	`k¥ötf
("\n");

100 
	`k¥ötf
("OS/161 ba£ sy°em vîsi⁄ %s\n", 
BASE_VERSION
);

101 
	`k¥ötf
("%s", 
h¨v¨d_c›yright
);

102 
	`k¥ötf
("\n");

104 
	`k¥ötf
("Haojun Luo's system version %s (%s #%d)\n",

105 
GROUP_VERSION
, 
buûdc⁄fig
, 
buûdvîsi⁄
);

106 
	`k¥ötf
("\n");

109 
	`øm_boŸ°øp
();

110 
	`¥oc_boŸ°øp
();

111 
	`thªad_boŸ°øp
();

112 
	`h¨d˛ock_boŸ°øp
();

113 
	`vfs_boŸ°øp
();

116 
	`k¥ötf
("DeviceÖrobe...\n");

117 
	`KASSERT
(
cuπhªad
->
t_cur•l
 > 0);

118 
	`maöbus_boŸ°øp
();

119 
	`KASSERT
(
cuπhªad
->
t_cur•l
 == 0);

121 
	`p£udoc⁄fig
();

122 
	`k¥ötf
("\n");

125 
	`vm_boŸ°øp
();

126 
	`k¥ötf_boŸ°øp
();

127 
	`thªad_°¨t_˝us
();

130 
	`vfs_£tboŸfs
("emu0");

136 
	`COMPILE_ASSERT
((
u£Ωå_t
) == (*));

137 
	`COMPILE_ASSERT
((*(
u£Ωå_t
)0) == ());

138 
	}
}

145 
	$shutdown
()

148 
	`k¥ötf
("Shutting down.\n");

150 
	`vfs_˛órboŸfs
();

151 
	`vfs_˛órcurdú
();

152 
	`vfs_unmou¡Æl
();

154 
	`thªad_shutdown
();

156 
	`•lhigh
();

157 
	}
}

169 
	$sys_ªboŸ
(
code
)

171 
code
) {

172 
RB_REBOOT
:

173 
RB_HALT
:

174 
RB_POWEROFF
:

177  
EINVAL
;

180 
	`shutdown
();

182 
code
) {

183 
RB_HALT
:

184 
	`k¥ötf
("The system is halted.\n");

185 
	`maöbus_hÆt
();

187 
RB_REBOOT
:

188 
	`k¥ötf
("Rebooting...\n");

189 
	`maöbus_ªboŸ
();

191 
RB_POWEROFF
:

192 
	`k¥ötf
("The system is halted.\n");

193 
	`maöbus_powîoff
();

197 
	`∑nic
("reboot operation failed\n");

199 
	}
}

206 
	$kmaö
(*
¨gumíts
)

208 
	`boŸ
();

210 
	`míu
(
¨gumíts
);

213 
	}
}

	@startup/menu.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<kîn/ªboŸ.h
>

33 
	~<kîn/uni°d.h
>

34 
	~<limôs.h
>

35 
	~<lib.h
>

36 
	~<uio.h
>

37 
	~<˛ock.h
>

38 
	~<thªad.h
>

39 
	~<¥oc.h
>

40 
	~<synch.h
>

41 
	~<vfs.h
>

42 
	~<sfs.h
>

43 
	~<sysˇŒ.h
>

44 
	~<ã°.h
>

45 
	~"›t-synch¥obs.h
"

46 
	~"›t-sfs.h
"

47 
	~"›t-√t.h
"

49 
	~"›t-A2.h
"

55 
	#_PATH_SHELL
 "/bö/sh"

	)

57 
	#MAXMENUARGS
 16

	)

61 
	$gëöãrvÆ
(
time_t
 
s1
, 
uöt32_t
 
ns1
,Åime_à
s2
, uöt32_à
ns2
,

62 
time_t
 *
rs
, 
uöt32_t
 *
∫s
)

64 i‡(
ns2
 < 
ns1
) {

65 
ns2
 += 1000000000;

66 
s2
--;

69 *
∫s
 = 
ns2
 - 
ns1
;

70 *
rs
 = 
s2
 - 
s1
;

71 
	}
}

90 
	$cmd_¥ogthªad
(*
±r
, 
«rgs
)

92 **
¨gs
 = 
±r
;

93 
¥og«me
[128];

94 
ªsu…
;

96 
	`KASSERT
(
«rgs
 >= 1);

98 #i‡
OPT_A2


101 i‡(
«rgs
 > 2) {

102 
	`k¥ötf
("Warning:árgumentÖassing from menuÇot supported\n");

107 
	`KASSERT
(
	`°æí
(
¨gs
[0]Ë< (
¥og«me
));

109 
	`°r˝y
(
¥og«me
, 
¨gs
[0]);

111 #i‡
OPT_A2


112 
ªsu…
 = 
	`ru≈rogøm
(
¥og«me
, 
¨gs
, 
«rgs
);

114 
ªsu…
 = 
	`ru≈rogøm
(
¥og«me
);

117 i‡(
ªsu…
) {

118 
	`k¥ötf
("Ru¬ögÖrogøm %†Áûed: %s\n", 
¨gs
[0],

119 
	`°ªº‹
(
ªsu…
));

124 
	}
}

140 
	$comm⁄_¥og
(
«rgs
, **
¨gs
)

142 
¥oc
 *proc;

143 
ªsu…
;

145 #i‡
OPT_SYNCHPROBS


146 
	`k¥ötf
("Warning:ÅhisÖrobably won't work withá "

151 
¥oc
 = 
	`¥oc_¸óã_ru≈rogøm
(
¨gs
[0] );

152 i‡(
¥oc
 =
NULL
) {

153  
ENOMEM
;

156 
ªsu…
 = 
	`thªad_f‹k
(
¨gs
[0] ,

157 
¥oc
 ,

158 
cmd_¥ogthªad
 ,

159 
¨gs
 , 
«rgs
 );

160 i‡(
ªsu…
) {

161 
	`k¥ötf
("thªad_f‹k faûed: %s\n", 
	`°ªº‹
(
ªsu…
));

162 
	`¥oc_de°roy
(
¥oc
);

163  
ªsu…
;

166 #ifde‡
UW


169 
	`P
(
no_¥oc_£m
);

173 
	}
}

180 
	$cmd_¥og
(
«rgs
, **
¨gs
)

182 i‡(
«rgs
 < 2) {

183 
	`k¥ötf
("Usage:ÖÖrogram [arguments]\n");

184  
EINVAL
;

188 
¨gs
++;

189 
«rgs
--;

191  
	`comm⁄_¥og
(
«rgs
, 
¨gs
);

192 
	}
}

199 
	$cmd_shñl
(
«rgs
, **
¨gs
)

201 ()
¨gs
;

202 i‡(
«rgs
 != 1) {

203 
	`k¥ötf
("Usage: s\n");

204  
EINVAL
;

207 
¨gs
[0] = (*)
_PATH_SHELL
;

209  
	`comm⁄_¥og
(
«rgs
, 
¨gs
);

210 
	}
}

217 
	$cmd_chdú
(
«rgs
, **
¨gs
)

219 i‡(
«rgs
 != 2) {

220 
	`k¥ötf
("Usage: cd directory\n");

221  
EINVAL
;

224  
	`vfs_chdú
(
¨gs
[1]);

225 
	}
}

232 
	$cmd_pwd
(
«rgs
, **
¨gs
)

234 
buf
[
PATH_MAX
+1];

235 
ªsu…
;

236 
iovec
 
iov
;

237 
uio
 
ku
;

239 ()
«rgs
;

240 ()
¨gs
;

242 
	`uio_köô
(&
iov
, &
ku
, 
buf
, (buf)-1, 0, 
UIO_READ
);

243 
ªsu…
 = 
	`vfs_gëcwd
(&
ku
);

244 i‡(
ªsu…
) {

245 
	`k¥ötf
("vfs_gëcwd faûed (%s)\n", 
	`°ªº‹
(
ªsu…
));

246  
ªsu…
;

250 
buf
[(buf)-1-
ku
.
uio_ªsid
] = 0;

253 
	`k¥ötf
("%s\n", 
buf
);

256 
	}
}

263 
	$cmd_sync
(
«rgs
, **
¨gs
)

265 ()
«rgs
;

266 ()
¨gs
;

268 
	`vfs_sync
();

271 
	}
}

278 
	$cmd_∑nic
(
«rgs
, **
¨gs
)

280 ()
«rgs
;

281 ()
¨gs
;

283 
	`∑nic
("UserÑequestedÖanic\n");

285 
	}
}

292 
	$cmd_quô
(
«rgs
, **
¨gs
)

294 ()
«rgs
;

295 ()
¨gs
;

297 
	`vfs_sync
();

298 
	`sys_ªboŸ
(
RB_POWEROFF
);

299 
	`thªad_exô
();

301 
	}
}

308 
	$cmd_dth
(
«rgs
, **
¨gs
)

310 ()
«rgs
;

311 ()
¨gs
;

312 
dbÊags
 = 
DB_THREADS
;

314 
	}
}

323 c⁄° *
	m«me
;

324 (*
	mfunc
)(c⁄° *
	mdevi˚
);

325 } 
	gmou¡èbÀ
[] = {

326 #i‡
OPT_SFS


327 { "sfs", 
sfs_mou¡
 },

329 { 
NULL
, NULL }

334 
	$cmd_mou¡
(
«rgs
, **
¨gs
)

336 *
f°y≥
;

337 *
devi˚
;

338 
i
;

340 i‡(
«rgs
 != 3) {

341 
	`k¥ötf
("Usage: mount fstype device:\n");

342  
EINVAL
;

345 
f°y≥
 = 
¨gs
[1];

346 
devi˚
 = 
¨gs
[2];

349 i‡(
devi˚
[
	`°æí
(device)-1]==':') {

350 
devi˚
[
	`°æí
(device)-1] = 0;

353 
i
=0; 
mou¡èbÀ
[i].
«me
; i++) {

354 i‡(!
	`°rcmp
(
mou¡èbÀ
[
i
].
«me
, 
f°y≥
)) {

355  
mou¡èbÀ
[
i
].
	`func
(
devi˚
);

358 
	`k¥ötf
("Unknow¿fûesy°emÅy≥ %s\n", 
f°y≥
);

359  
EINVAL
;

360 
	}
}

364 
	$cmd_unmou¡
(
«rgs
, **
¨gs
)

366 *
devi˚
;

368 i‡(
«rgs
 != 2) {

369 
	`k¥ötf
("Usage: unmount device:\n");

370  
EINVAL
;

373 
devi˚
 = 
¨gs
[1];

376 i‡(
devi˚
[
	`°æí
(device)-1]==':') {

377 
devi˚
[
	`°æí
(device)-1] = 0;

380  
	`vfs_unmou¡
(
devi˚
);

381 
	}
}

393 
	$cmd_boŸfs
(
«rgs
, **
¨gs
)

395 *
devi˚
;

397 i‡(
«rgs
 != 2) {

398 
	`k¥ötf
("Usage: bootfs device\n");

399  
EINVAL
;

402 
devi˚
 = 
¨gs
[1];

405 i‡(
devi˚
[
	`°æí
(device)-1]==':') {

406 
devi˚
[
	`°æí
(device)-1] = 0;

409  
	`vfs_£tboŸfs
(
devi˚
);

410 
	}
}

414 
	$cmd_khóp°©s
(
«rgs
, **
¨gs
)

416 ()
«rgs
;

417 ()
¨gs
;

419 
	`khóp_¥öt°©s
();

422 
	}
}

430 
	$showmíu
(c⁄° *
«me
, c⁄° *
x
[])

432 
˘
, 
hÆf
, 
i
;

434 
	`k¥ötf
("\n");

435 
	`k¥ötf
("%s\n", 
«me
);

437 
i
=
˘
=0; 
x
[i]; i++) {

438 
˘
++;

440 
hÆf
 = (
˘
+1)/2;

442 
i
=0; i<
hÆf
; i++) {

443 
	`k¥ötf
(" %-36s", 
x
[
i
]);

444 i‡(
i
+
hÆf
 < 
˘
) {

445 
	`k¥ötf
("%s", 
x
[
i
+
hÆf
]);

447 
	`k¥ötf
("\n");

450 
	`k¥ötf
("\n");

451 
	}
}

453 c⁄° *
	g›smíu
[] = {

466 
NULL


471 
	$cmd_›smíu
(
n
, **
a
)

473 ()
n
;

474 ()
a
;

476 
	`showmíu
("OS/161 o≥øti⁄†míu", 
›smíu
);

478 
	}
}

480 c⁄° *
	gã°míu
[] = {

488 #i‡
OPT_NET


494 #ifde‡
UW


503 
NULL


508 
	$cmd_ã°míu
(
n
, **
a
)

510 ()
n
;

511 ()
a
;

513 
	`showmíu
("OS/161Åe°†míu", 
ã°míu
);

514 
	`k¥ötf
(" (1) TheseÅests will fail until you finishÅhe "

516 
	`k¥ötf
(" (4) TheseÅests may fail until you finishÅhe "

518 
	`k¥ötf
("\n");

521 
	}
}

523 c⁄° *
	gmaömíu
[] = {

526 #i‡
OPT_SYNCHPROBS


528 #ifde‡
UW


535 
NULL


540 
	$cmd_maömíu
(
n
, **
a
)

542 ()
n
;

543 ()
a
;

545 
	`showmíu
("OS/161 kî√»míu", 
maömíu
);

547 
	}
}

554 c⁄° *
	m«me
;

555 (*
	mfunc
)(
	m«rgs
, **
	m¨gs
);

556 } 
	gcmdèbÀ
[] = {

558 { "?", 
cmd_maömíu
 },

559 { "h", 
cmd_maömíu
 },

560 { "hñp", 
cmd_maömíu
 },

561 { "?o", 
cmd_›smíu
 },

562 { "?t", 
cmd_ã°míu
 },

565 { "dth", 
cmd_dth
 },

566 { "s", 
cmd_shñl
 },

567 { "p", 
cmd_¥og
 },

568 { "mou¡", 
cmd_mou¡
 },

569 { "unmou¡", 
cmd_unmou¡
 },

570 { "boŸfs", 
cmd_boŸfs
 },

571 { "pf", 
¥ötfûe
 },

572 { "cd", 
cmd_chdú
 },

573 { "pwd", 
cmd_pwd
 },

574 { "sync", 
cmd_sync
 },

575 { "∑nic", 
cmd_∑nic
 },

576 { "q", 
cmd_quô
 },

577 { "exô", 
cmd_quô
 },

578 { "hÆt", 
cmd_quô
 },

580 #i‡
OPT_SYNCHPROBS


582 { "•1", 
whÆem©ög
 },

583 #ifde‡
UW


584 { "•2", 
ˇtmou£
 },

585 { "•3", 
åaffic_simuœti⁄
 },

590 { "kh", 
cmd_khóp°©s
 },

593 { "©", 
¨øyã°
 },

594 { "bt", 
bôm≠ã°
 },

595 { "km1", 
mÆlo˘e°
 },

596 { "km2", 
mÆloc°ªss
 },

597 #i‡
OPT_NET


598 { "√t", 
√âe°
 },

600 { "â1", 
thªadã°
 },

601 { "â2", 
thªadã°2
 },

602 { "â3", 
thªadã°3
 },

603 { "sy1", 
£mã°
 },

606 { "sy2", 
lockã°
 },

607 { "sy3", 
cvã°
 },

608 #ifde‡
UW


609 { "uw1", 
uwlockã°1
 },

610 { "uw2", 
uwvm°©°e°
 },

614 { "fs1", 
f°e°
 },

615 { "fs2", 
ªad°ªss
 },

616 { "fs3", 
wrôe°ªss
 },

617 { "fs4", 
wrôe°ªss2
 },

618 { "fs5", 
¸óã°ªss
 },

620 { 
NULL
, NULL }

628 
	$cmd_di•©ch
(*
cmd
)

630 
time_t
 
bef‹e£cs
, 
a·î£cs
, 
£cs
;

631 
uöt32_t
 
bef‹í£cs
, 
a·în£cs
, 
n£cs
;

632 *
¨gs
[
MAXMENUARGS
];

633 
«rgs
=0;

634 *
w‹d
;

635 *
c⁄ãxt
;

636 
i
, 
ªsu…
;

638 
w‹d
 = 
	`°πok_r
(
cmd
, " \t", &
c⁄ãxt
);

639 
w‹d
 !
NULL
;

640 
w‹d
 = 
	`°πok_r
(
NULL
, " \t", &
c⁄ãxt
)) {

642 i‡(
«rgs
 >
MAXMENUARGS
) {

643 
	`k¥ötf
("CommandÜine hasÅoo many words\n");

644  
E2BIG
;

646 
¨gs
[
«rgs
++] = 
w‹d
;

649 i‡(
«rgs
==0) {

653 
i
=0; 
cmdèbÀ
[i].
«me
; i++) {

654 i‡(*
cmdèbÀ
[
i
].
«me
 && !
	`°rcmp
(
¨gs
[0], cmdtable[i].name)) {

655 
	`KASSERT
(
cmdèbÀ
[
i
].
func
!=
NULL
);

657 
	`gëtime
(&
bef‹e£cs
, &
bef‹í£cs
);

659 
ªsu…
 = 
cmdèbÀ
[
i
].
	`func
(
«rgs
, 
¨gs
);

661 
	`gëtime
(&
a·î£cs
, &
a·în£cs
);

662 
	`gëöãrvÆ
(
bef‹e£cs
, 
bef‹í£cs
,

663 
a·î£cs
, 
a·în£cs
,

664 &
£cs
, &
n£cs
);

666 
	`k¥ötf
("OperationÅook %lu.%09lu seconds\n",

667 (Ë
£cs
,

668 (Ë
n£cs
);

670  
ªsu…
;

674 
	`k¥ötf
("%s: Comm™dÇŸ found\n", 
¨gs
[0]);

675  
EINVAL
;

676 
	}
}

687 
	$míu_execuã
(*
löe
, 
ißrgs
)

689 *
comm™d
;

690 *
c⁄ãxt
;

691 
ªsu…
;

693 
comm™d
 = 
	`°πok_r
(
löe
, ";", &
c⁄ãxt
);

694 
comm™d
 !
NULL
;

695 
comm™d
 = 
	`°πok_r
(
NULL
, ";", &
c⁄ãxt
)) {

697 i‡(
ißrgs
) {

698 
	`k¥ötf
("OS/161 kî√l: %s\n", 
comm™d
);

701 
ªsu…
 = 
	`cmd_di•©ch
(
comm™d
);

702 i‡(
ªsu…
) {

703 
	`k¥ötf
("Míu comm™d faûed: %s\n", 
	`°ªº‹
(
ªsu…
));

704 i‡(
ißrgs
) {

705 
	`∑nic
("FailureÖrocessing kernelárguments\n");

709 
	}
}

729 
	$míu
(*
¨gs
)

731 
buf
[64];

733 
	`míu_execuã
(
¨gs
, 1);

736 
	`k¥ötf
("OS/161 kernel [? for menu]: ");

737 
	`kgës
(
buf
, (buf));

738 
	`míu_execuã
(
buf
, 0);

740 
	}
}

	@synchprobs/catmouse.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<ã°.h
>

33 
	~<˛ock.h
>

34 
	~<thªad.h
>

35 
	~<synch.h
>

36 
	~<synch¥obs.h
>

39 
	#INVALID_ANIMAL_NUM
 (999999)

	)

42 
	gdo_¥öt_°©e
 = 0;

45 
öôülize_bowls
();

46 
˛ónup_bowls
();

47 
ˇt_ót
(
bow umbî
, 
ót_time
, 
ˇt_num
);

48 
ˇt_¶ìp
(
¶ìp_time
);

49 
mou£_ót
(
bow umbî
, 
ót_time
, 
mou£_num
);

50 
mou£_¶ìp
(
¶ìp_time
);

51 
ˇt_simuœti⁄
(*
±r
, 
ˇäumbî
);

52 
mou£_simuœti⁄
(*
±r
, 
mou£numbî
);

53 
¥öt_°©e
();

68 
	gNumBowls
;

69 
	gNumC©s
;

70 
	gNumMi˚
;

71 
	gNumLo›s
;

73 
	gC©E©Time
 = 1;

74 
	gC©SÀïTime
 = 2;

75 
	gMou£E©Time
 = 1;

76 
	gMou£SÀïTime
 = 2;

83 
£m≠h‹e
 *
	gC©Mou£Waô
;

110 
	sbowl
 {

111 vﬁ©ûê
	m™imÆ
;

112 vﬁ©ûê
	mwhich
;

115 
bowl
 *
	gbowls
;

121 vﬁ©ûê
	gótög_ˇts_cou¡
;

126 vﬁ©ûê
	gótög_mi˚_cou¡
;

133 
£m≠h‹e
 *
	gmuãx
;

136 vﬁ©ûê
time_t
 
	gˇt_tŸÆ_waô_£cs
;

137 vﬁ©ûê
uöt32_t
 
	gˇt_tŸÆ_waô_n£cs
;

138 vﬁ©ûê
	gˇt_waô_cou¡
;

139 vﬁ©ûê
time_t
 
	gmou£_tŸÆ_waô_£cs
;

140 vﬁ©ûê
uöt32_t
 
	gmou£_tŸÆ_waô_n£cs
;

141 vﬁ©ûê
	gmou£_waô_cou¡
;

144 
£m≠h‹e
 *
	g≥rf_muãx
;

161 
	$öôülize_bowls
()

163 
i
;

165 
	`KASSERT
(
NumBowls
 > 0);

167 
bowls
 = 
	`kmÆloc
(
NumBowls
*(
bowl
));

168 i‡(
bowls
 =
NULL
) {

169 
	`∑nic
("öôülize_bowls: u«bÀÅÿÆloˇã s∑˚ f‹ %d bowls\n",
NumBowls
);

172 
i
=0;i<
NumBowls
;i++) {

173 
bowls
[
i
].
™imÆ
 = '-';

174 
bowls
[
i
].
which
 = 
INVALID_ANIMAL_NUM
;

176 
ótög_ˇts_cou¡
 = 
ótög_mi˚_cou¡
 = 0;

179 
muãx
 = 
	`£m_¸óã
("bowl mutex",1);

180 i‡(
muãx
 =
NULL
) {

181 
	`∑nic
("initialize_bowls: couldÇot create mutex\n");

184 
≥rf_muãx
 = 
	`£m_¸óã
("stats mutex",1);

185 i‡(
≥rf_muãx
 =
NULL
) {

186 
	`∑nic
("initialize_bowls: couldÇot createÖerf_mutex\n");

189 
ˇt_tŸÆ_waô_£cs
 = 0;

190 
ˇt_tŸÆ_waô_n£cs
 = 0;

191 
ˇt_waô_cou¡
 = 0;

192 
mou£_tŸÆ_waô_£cs
 = 0;

193 
mou£_tŸÆ_waô_n£cs
 = 0;

194 
mou£_waô_cou¡
 = 0;

197 
	}
}

214 
	$˛ónup_bowls
()

216 i‡(
muãx
 !
NULL
) {

217 
	`£m_de°roy
–
muãx
 );

218 
muãx
 = 
NULL
;

220 i‡(
≥rf_muãx
 !
NULL
) {

221 
	`£m_de°roy
–
≥rf_muãx
 );

222 
≥rf_muãx
 = 
NULL
;

224 i‡(
bowls
 !
NULL
) {

225 
	`k‰ì
–(*Ë
bowls
 );

226 
bowls
 = 
NULL
;

228 
	}
}

244 
	$¥öt_°©e_⁄
()

246 
do_¥öt_°©e
 = 1;

247 
	}
}

250 
	$¥öt_°©e_off
()

252 
do_¥öt_°©e
 = 0;

253 
	}
}

275 
	$¥öt_°©e
()

277 
i
;

279 i‡(
NumC©s
 > 100 || 
NumMi˚
 > 100) {

280 
	`∑nic
("Formatting is set upÅo only handleÅwo digitÇumbers for catánd miceÇumbers\n");

283 i‡(!
do_¥öt_°©e
) {

287 
	`k¥ötf
(" E©ög C©s: %3d E©ög Mi˚: %3d ",
ótög_ˇts_cou¡
,

288 
ótög_mi˚_cou¡
);

290 
i
=0;i<
NumBowls
;i++) {

291 
	`k¥ötf
("%c",
bowls
[
i
].
™imÆ
);

292 i‡(
bowls
[
i
].
which
 =
INVALID_ANIMAL_NUM
) {

293 
	`k¥ötf
("%2s", "--");

295 
	`k¥ötf
("%02d",
bowls
[
i
].
which
);

297 
	`k¥ötf
(" ");

299 
	`k¥ötf
("\n");

301 
	}
}

323 
	$ˇt_ót
(
bow umbî
, 
ót_time
, 
ˇt_num
)

327 
	`KASSERT
(
bow umbî
 > 0);

328 
	`KASSERT
(()
bow umbî
 <
NumBowls
);

332 
	`P
(
muãx
);

336 i‡(
bowls
[
bow umbî
-1].
™imÆ
 == 'c') {

338 
	`∑nic
("cat_eat:áttemptÅo make cat %dÉat from bowl %d while cat %d isálreadyÉatingÅhere!\n",

339 
ˇt_num
, 
bow umbî
, 
bowls
[bow umbî-1].
which
);

341 i‡(
ótög_mi˚_cou¡
 > 0) {

343 
	`∑nic
("ˇt_ót:áâem±Åÿmakêˇà%dÉ© whûêmi˚áªÉ©ög!\n", 
ˇt_num
);

345 
	`KASSERT
(
bowls
[
bow umbî
-1].
™imÆ
 == '-');

346 
	`KASSERT
(
bowls
[
bow umbî
-1].
which
 =
INVALID_ANIMAL_NUM
);

347 
	`KASSERT
(
ótög_mi˚_cou¡
 == 0);

350 
ótög_ˇts_cou¡
 += 1;

351 
bowls
[
bow umbî
-1].
™imÆ
 = 'c';

352 
bowls
[
bow umbî
-1].
which
 = 
ˇt_num
;

353 
	`¥öt_°©e
();

355 
	`DEBUG
(
DB_SYNCPROB
,"cat %d startsÅoÉatát bowl %d [%d:%d]\n",

356 
ˇt_num
, 
bow umbî
, 
ótög_ˇts_cou¡
, 
ótög_mi˚_cou¡
);

357 
	`V
(
muãx
);

361 
	`˛ock¶ìp
(
ót_time
);

365 
	`P
(
muãx
);

366 
	`KASSERT
(
ótög_ˇts_cou¡
 > 0);

367 
	`KASSERT
(
bowls
[
bow umbî
-1].
™imÆ
=='c');

368 
ótög_ˇts_cou¡
 -= 1;

369 
bowls
[
bow umbî
-1].
™imÆ
='-';

370 
bowls
[
bow umbî
-1].
which
=
INVALID_ANIMAL_NUM
;

371 
	`¥öt_°©e
();

373 
	`DEBUG
(
DB_SYNCPROB
,"cat %d finishedÉatingát bowl %d [%d:%d]\n",

374 
ˇt_num
,
bow umbî
,
ótög_ˇts_cou¡
,
ótög_mi˚_cou¡
);

375 
	`V
(
muãx
);

378 
	}
}

392 
	$ˇt_¶ìp
(
¶ìp_time
)

395 
	`˛ock¶ìp
(
¶ìp_time
);

397 
	}
}

419 
	$mou£_ót
(
bow umbî
, 
ót_time
, 
mou£_num
)

422 
	`KASSERT
(
bow umbî
 > 0);

423 
	`KASSERT
(()
bow umbî
 <
NumBowls
);

427 
	`P
(
muãx
);

431 i‡(
bowls
[
bow umbî
-1].
™imÆ
 == 'm') {

433 
	`∑nic
("mouse_eat:áttemptÅo make mouse %dÉat from bowl %d while mouse %d isÅhere!\n",

434 
mou£_num
, 
bow umbî
, 
bowls
[bow umbî-1].
which
);

436 i‡(
ótög_ˇts_cou¡
 > 0) {

438 
	`∑nic
("mou£_ót:áâem±Åÿmakêmou£ %dÉ© whûêˇt†¨êótög!\n", 
mou£_num
);

440 
	`KASSERT
(
bowls
[
bow umbî
-1].
™imÆ
=='-');

441 
	`KASSERT
(
bowls
[
bow umbî
-1].
which
==
INVALID_ANIMAL_NUM
);

442 
	`KASSERT
(
ótög_ˇts_cou¡
 == 0);

445 
ótög_mi˚_cou¡
 += 1;

446 
bowls
[
bow umbî
-1].
™imÆ
 = 'm';

447 
bowls
[
bow umbî
-1].
which
 = 
mou£_num
;

448 
	`¥öt_°©e
();

450 
	`DEBUG
(
DB_SYNCPROB
,"mouse %d startsÅoÉatát bowl %d [%d:%d]\n",

451 
mou£_num
,
bow umbî
,
ótög_ˇts_cou¡
,
ótög_mi˚_cou¡
);

452 
	`V
(
muãx
);

456 
	`˛ock¶ìp
(
ót_time
);

460 
	`P
(
muãx
);

462 
	`KASSERT
(
ótög_mi˚_cou¡
 > 0);

463 
ótög_mi˚_cou¡
 -= 1;

464 
	`KASSERT
(
bowls
[
bow umbî
-1].
™imÆ
=='m');

465 
	`KASSERT
(
bowls
[
bow umbî
-1].
which
==
mou£_num
);

466 
bowls
[
bow umbî
-1].
™imÆ
='-';

467 
bowls
[
bow umbî
-1].
which
=
INVALID_ANIMAL_NUM
;

468 
	`¥öt_°©e
();

470 
	`DEBUG
(
DB_SYNCPROB
,"mouse %d finishesÉatingát bowl %d [%d:%d]\n",

471 
mou£_num
,
bow umbî
,
ótög_ˇts_cou¡
,
ótög_mi˚_cou¡
);

472 
	`V
(
muãx
);

474 
	}
}

488 
	$mou£_¶ìp
(
¶ìp_time
)

491 
	`˛ock¶ìp
(
¶ìp_time
);

493 
	}
}

512 
	$ˇt_simuœti⁄
(* 
unu£dpoöãr
,

513 
ˇäumbî
)

515 
i
;

516 
bowl
;

517 
time_t
 
bef‹e_£c
, 
a·î_£c
, 
waô_£c
;

518 
uöt32_t
 
bef‹e_n£c
, 
a·î_n£c
, 
waô_n£c
;

521 (Ë
unu£dpoöãr
;

522 (Ë
ˇäumbî
;

525 
i
=0;i<
NumLo›s
;i++) {

528 
	`ˇt_¶ìp
(
C©SÀïTime
);

531 
bowl
 = (()
	`øndom
(Ë% 
NumBowls
) + 1;

533 
	`gëtime
(&
bef‹e_£c
,&
bef‹e_n£c
);

534 
	`ˇt_bef‹e_ótög
(
bowl
);

535 
	`gëtime
(&
a·î_£c
,&
a·î_n£c
);

538 
	`ˇt_ót
(
bowl
, 
C©E©Time
, 
ˇäumbî
);

540 
	`ˇt_a·î_ótög
(
bowl
);

543 
	`gëöãrvÆ
(
bef‹e_£c
,
bef‹e_n£c
,
a·î_£c
,
a·î_n£c
,&
waô_£c
,&
waô_n£c
);

544 
	`P
(
≥rf_muãx
);

545 
ˇt_tŸÆ_waô_£cs
 +
waô_£c
;

546 
ˇt_tŸÆ_waô_n£cs
 +
waô_n£c
;

547 i‡(
ˇt_tŸÆ_waô_n£cs
 > 1000000000) {

548 
ˇt_tŸÆ_waô_n£cs
 -= 1000000000;

549 
ˇt_tŸÆ_waô_£cs
 ++;

551 
ˇt_waô_cou¡
++;

552 
	`V
(
≥rf_muãx
);

556 
	`V
(
C©Mou£Waô
);

557 
	}
}

576 
	$mou£_simuœti⁄
(* 
unu£dpoöãr
,

577 
mou£numbî
)

579 
i
;

580 
bowl
;

581 
time_t
 
bef‹e_£c
, 
a·î_£c
, 
waô_£c
;

582 
uöt32_t
 
bef‹e_n£c
, 
a·î_n£c
, 
waô_n£c
;

585 (Ë
unu£dpoöãr
;

586 (Ë
mou£numbî
;

588 
i
=0;i<
NumLo›s
;i++) {

591 
	`mou£_¶ìp
(
Mou£SÀïTime
);

594 
bowl
 = (()
	`øndom
(Ë% 
NumBowls
) + 1;

596 
	`gëtime
(&
bef‹e_£c
,&
bef‹e_n£c
);

597 
	`mou£_bef‹e_ótög
(
bowl
);

598 
	`gëtime
(&
a·î_£c
,&
a·î_n£c
);

601 
	`mou£_ót
(
bowl
, 
Mou£E©Time
, 
mou£numbî
);

603 
	`mou£_a·î_ótög
(
bowl
);

606 
	`gëöãrvÆ
(
bef‹e_£c
,
bef‹e_n£c
,
a·î_£c
,
a·î_n£c
,&
waô_£c
,&
waô_n£c
);

607 
	`P
(
≥rf_muãx
);

608 
mou£_tŸÆ_waô_£cs
 +
waô_£c
;

609 
mou£_tŸÆ_waô_n£cs
 +
waô_n£c
;

610 i‡(
mou£_tŸÆ_waô_n£cs
 > 1000000000) {

611 
mou£_tŸÆ_waô_n£cs
 -= 1000000000;

612 
mou£_tŸÆ_waô_£cs
 ++;

614 
mou£_waô_cou¡
++;

615 
	`V
(
≥rf_muãx
);

619 
	`V
(
C©Mou£Waô
);

620 
	}
}

646 
	$ˇtmou£
(
«rgs
,

647 ** 
¨gs
)

649 
ˇtödex
, 
mou£ödex
, 
îr‹
;

650 
i
;

651 
món_ˇt_waô_u£cs
, 
món_mou£_waô_u£cs
;

652 
time_t
 
bef‹e_£c
, 
a·î_£c
, 
waô_£c
;

653 
uöt32_t
 
bef‹e_n£c
, 
a·î_n£c
, 
waô_n£c
;

654 
tŸÆ_bowl_mûli£c⁄ds
, 
tŸÆ_ótög_mûli£c⁄ds
, 
utûiz©i⁄_≥r˚¡
;

657 i‡((
«rgs
 != 9) && (nargs != 5)) {

658 
	`k¥ötf
("Usage: <command> NUM_BOWLS NUM_CATS NUM_MICE NUM_LOOPS\n");

659 
	`k¥ötf
("or\n");

660 
	`k¥ötf
("Usage: <command> NUM_BOWLS NUM_CATS NUM_MICE NUM_LOOPS ");

661 
	`k¥ötf
("CAT_EATING_TIME CAT_SLEEPING_TIME MOUSE_EATING_TIME MOUSE_SLEEPING_TIME\n");

666 
NumBowls
 = 
	`©oi
(
¨gs
[1]);

667 i‡(
NumBowls
 <= 0) {

668 
	`k¥ötf
("ˇtmou£: invÆidÇumbî o‡bowls: %d\n",
NumBowls
);

671 
NumC©s
 = 
	`©oi
(
¨gs
[2]);

672 i‡(
NumC©s
 < 0) {

673 
	`k¥ötf
("ˇtmou£: invÆidÇumbî o‡ˇts: %d\n",
NumC©s
);

676 
NumMi˚
 = 
	`©oi
(
¨gs
[3]);

677 i‡(
NumMi˚
 < 0) {

678 
	`k¥ötf
("ˇtmou£: invÆidÇumbî o‡mi˚: %d\n",
NumMi˚
);

681 
NumLo›s
 = 
	`©oi
(
¨gs
[4]);

682 i‡(
NumLo›s
 <= 0) {

683 
	`k¥ötf
("ˇtmou£: invÆidÇumbî o‡lo›s: %d\n",
NumLo›s
);

687 i‡(
«rgs
 == 9) {

688 
C©E©Time
 = 
	`©oi
(
¨gs
[5]);

689 i‡(
C©E©Time
 < 0) {

690 
	`k¥ötf
("ˇtmou£: invÆid c©É©ögÅime: %d\n",
C©E©Time
);

694 
C©SÀïTime
 = 
	`©oi
(
¨gs
[6]);

695 i‡(
C©SÀïTime
 < 0) {

696 
	`k¥ötf
("ˇtmou£: invÆid c© sÀïögÅime: %d\n",
C©SÀïTime
);

700 
Mou£E©Time
 = 
	`©oi
(
¨gs
[7]);

701 i‡(
Mou£E©Time
 < 0) {

702 
	`k¥ötf
("ˇtmou£: invÆid mou£É©ögÅime: %d\n",
Mou£E©Time
);

706 
Mou£SÀïTime
 = 
	`©oi
(
¨gs
[8]);

707 i‡(
Mou£SÀïTime
 < 0) {

708 
	`k¥ötf
("ˇtmou£: invÆid mou£ sÀïögÅime: %d\n",
Mou£SÀïTime
);

713 i‡((
NumMi˚
 >
INVALID_ANIMAL_NUM
Ë|| (
NumC©s
 >= INVALID_ANIMAL_NUM)) {

714 
	`∑nic
("TryögÅÿu£Åoÿm™y c©†‹ mi˚:Üimô = %d\n", 
INVALID_ANIMAL_NUM
);

717 
	`k¥ötf
("Using %d bowls, %d cats,ánd %d mice. Looping %dÅimes.\n",

718 
NumBowls
,
NumC©s
,
NumMi˚
,
NumLo›s
);

719 
	`k¥ötf
("Usög c©É©ögÅimê%d, c© sÀïögÅimê%d\n", 
C©E©Time
, 
C©SÀïTime
);

720 
	`k¥ötf
("Usög mou£É©ögÅimê%d, mou£ sÀïögÅimê%d\n", 
Mou£E©Time
, 
Mou£SÀïTime
);

724 
C©Mou£Waô
 = 
	`£m_¸óã
("CatMouseWait",0);

725 i‡(
C©Mou£Waô
 =
NULL
) {

726 
	`∑nic
("catmouse: couldÇot create semaphore\n");

730 
	`öôülize_bowls
();

733 
	`ˇtmou£_sync_öô
(
NumBowls
);

736 
	`gëtime
(&
bef‹e_£c
,&
bef‹e_n£c
);

742 
ˇtödex
 = 0; c©ödex < 
NumC©s
; catindex++) {

743 
îr‹
 = 
	`thªad_f‹k
("ˇt_simuœti⁄Åhªad", 
NULL
, 
ˇt_simuœti⁄
, NULL, 
ˇtödex
);

744 i‡(
îr‹
) {

745 
	`∑nic
("ˇt_simuœti⁄:Åhªad_f‹k faûed: %s\n", 
	`°ªº‹
(
îr‹
));

747 i‡(
ˇtödex
 < 
NumMi˚
) {

748 
îr‹
 = 
	`thªad_f‹k
("mou£_simuœti⁄Åhªad", 
NULL
, 
mou£_simuœti⁄
, NULL, 
ˇtödex
);

749 i‡(
îr‹
) {

750 
	`∑nic
("mou£_simuœti⁄:Åhªad_f‹k faûed: %s\n",
	`°ªº‹
(
îr‹
));

755 
mou£ödex
 = 
ˇtödex
; mou£ödex < 
NumMi˚
; mouseindex++) {

756 
îr‹
 = 
	`thªad_f‹k
("mou£_simuœti⁄Åhªad", 
NULL
, 
mou£_simuœti⁄
, NULL, 
mou£ödex
);

757 i‡(
îr‹
) {

758 
	`∑nic
("mou£_simuœti⁄:Åhªad_f‹k faûed: %s\n",
	`°ªº‹
(
îr‹
));

764 
i
=0;i<(
NumC©s
+
NumMi˚
);i++) {

765 
	`P
(
C©Mou£Waô
);

769 
	`gëtime
(&
a·î_£c
,&
a·î_n£c
);

771 
	`gëöãrvÆ
(
bef‹e_£c
,
bef‹e_n£c
,
a·î_£c
,
a·î_n£c
,&
waô_£c
,&
waô_n£c
);

773 
tŸÆ_bowl_mûli£c⁄ds
 = (
waô_£c
*1000 + 
waô_n£c
/1000000)*
NumBowls
;

774 
tŸÆ_ótög_mûli£c⁄ds
 = (
NumC©s
*
C©E©Time
 + 
NumMi˚
*
Mou£E©Time
)*
NumLo›s
*1000;

775 i‡(
tŸÆ_bowl_mûli£c⁄ds
 > 0) {

776 
utûiz©i⁄_≥r˚¡
 = 
tŸÆ_ótög_mûli£c⁄ds
*100/
tŸÆ_bowl_mûli£c⁄ds
;

777 
	`k¥ötf
("STATS: Bow»utûiz©i⁄: %d%%\n",
utûiz©i⁄_≥r˚¡
);

781 
	`£m_de°roy
(
C©Mou£Waô
);

784 
	`ˇtmou£_sync_˛ónup
(
NumBowls
);

787 
	`˛ónup_bowls
();

789 i‡(
ˇt_waô_cou¡
 > 0) {

791 
món_ˇt_waô_u£cs
 = (
ˇt_tŸÆ_waô_£cs
*1000000+
ˇt_tŸÆ_waô_n£cs
/1000)/
ˇt_waô_cou¡
;

792 
	`k¥ötf
("STATS: Mean cat waitingÅime: %d.%d seconds\n",

793 
món_ˇt_waô_u£cs
/1000000,mean_cat_wait_usecs%1000000);

795 i‡(
mou£_waô_cou¡
 > 0) {

797 
món_mou£_waô_u£cs
 = (
mou£_tŸÆ_waô_£cs
*1000000+
mou£_tŸÆ_waô_n£cs
/1000)/
mou£_waô_cou¡
;

798 
	`k¥ötf
("STATS: Mean mouse waitingÅime: %d.%d seconds\n",

799 
món_mou£_waô_u£cs
/1000000,mean_mouse_wait_usecs%1000000);

803 
	}
}

	@synchprobs/catmouse_synch.c

1 
	~<ty≥s.h
>

2 
	~<lib.h
>

3 
	~<synch¥obs.h
>

4 
	~<synch.h
>

22 
£m≠h‹e
 *
	gglobÆC©Mou£Sem
;

34 
	$ˇtmou£_sync_öô
(
bowls
)

38 ()
bowls
;

39 
globÆC©Mou£Sem
 = 
	`£m_¸óã
("globalCatMouseSem",1);

40 i‡(
globÆC©Mou£Sem
 =
NULL
) {

41 
	`∑nic
("couldÇot create global CatMouse synchronization semaphore");

44 
	}
}

55 
	$ˇtmou£_sync_˛ónup
(
bowls
)

58 ()
bowls
;

59 
	`KASSERT
(
globÆC©Mou£Sem
 !
NULL
);

60 
	`£m_de°roy
(
globÆC©Mou£Sem
);

61 
	}
}

77 
	$ˇt_bef‹e_ótög
(
bowl
)

80 ()
bowl
;

81 
	`KASSERT
(
globÆC©Mou£Sem
 !
NULL
);

82 
	`P
(
globÆC©Mou£Sem
);

83 
	}
}

99 
	$ˇt_a·î_ótög
(
bowl
)

102 ()
bowl
;

103 
	`KASSERT
(
globÆC©Mou£Sem
 !
NULL
);

104 
	`V
(
globÆC©Mou£Sem
);

105 
	}
}

120 
	$mou£_bef‹e_ótög
(
bowl
)

123 ()
bowl
;

124 
	`KASSERT
(
globÆC©Mou£Sem
 !
NULL
);

125 
	`P
(
globÆC©Mou£Sem
);

126 
	}
}

142 
	$mou£_a·î_ótög
(
bowl
)

145 ()
bowl
;

146 
	`KASSERT
(
globÆC©Mou£Sem
 !
NULL
);

147 
	`V
(
globÆC©Mou£Sem
);

148 
	}
}

	@synchprobs/traffic.c

23 
	~<ty≥s.h
>

24 
	~<lib.h
>

25 
	~<ã°.h
>

26 
	~<˛ock.h
>

27 
	~<thªad.h
>

28 
	~<synch.h
>

29 
	~<synch¥obs.h
>

30 
	~<kîn/î∫o.h
>

44 
	#MAX_THREADS
 10

	)

46 
	gNumIãøti⁄s
 = 10;

47 
	gNumThªads
 = 5;

48 
	gI¡îAºivÆTime
 = 1;

49 
	gSîvi˚Time
 = 1;

56 
£m≠h‹e
 *
	gSimuœti⁄Waô
;

70 
	sVehi˛es


72 
Dúe˘i⁄
 
	m‹igö
;

73 
Dúe˘i⁄
 
	mde°ö©i⁄
;

74 } 
	tVehi˛e
;

78 
Vehi˛e
 * vﬁ©ûê
	gvehi˛es
[
MAX_THREADS
];

80 
£m≠h‹e
 *
	gmuãx
;

83 vﬁ©ûê
time_t
 
	gtŸÆ_waô_£cs
[4];

84 vﬁ©ûê
uöt32_t
 
	gtŸÆ_waô_n£cs
[4];

85 vﬁ©ûê
	gwaô_cou¡
[4];

87 
£m≠h‹e
 *
	g≥rf_muãx
;

90 
time_t
 
	g°¨t_£c
, 
	gíd_£c
;

91 
uöt32_t
 
	g°¨t_n£c
, 
	gíd_n£c
;

94 
öôülize_°©e
();

95 
˛ónup_°©e
();

96 
¥öt_dúe˘i⁄
(
Dúe˘i⁄
 
d
);

97 
¥öt_≥rf_°©s
();

98 
vehi˛e_simuœti⁄
(*
±r
, 
thªad_num
);

99 
boﬁ
 
right_tu∫
(
Vehi˛e
 *
v
);

100 
check_c⁄°øöts
(
thªad_num
);

116 
	$¥öt_dúe˘i⁄
(
Dúe˘i⁄
 
d
) {

117 
d
)

119 
n‹th
:

120 
	`k¥ötf
("N");

122 
ó°
:

123 
	`k¥ötf
("E");

125 
south
:

126 
	`k¥ötf
("S");

128 
we°
:

129 
	`k¥ötf
("W");

132 
	}
}

148 
	$¥öt_≥rf_°©s
() {

149 
i
;

150 
waô_m£cs
,
món_waô_m£cs
;

151 
tŸÆ_waô_m£cs
 = 0;

152 
tŸÆ_cou¡
 = 0;

153 
sim_m£c
;

154 
time_t
 
run_£c
;

155 
uöt32_t
 
run_n£c
;

158 
i
=0;i<4;i++) {

159 
	`¥öt_dúe˘i⁄
((
Dúe˘i⁄
)
i
);

160 
	`k¥ötf
(":\t");

161 i‡(
waô_cou¡
[
i
] > 0) {

162 
waô_m£cs
 = (
tŸÆ_waô_£cs
[
i
]*1000+
tŸÆ_waô_n£cs
[i]/1000000);

163 
tŸÆ_waô_m£cs
 +
waô_m£cs
;

165 
món_waô_m£cs
 = 
waô_m£cs
/
waô_cou¡
[
i
];

166 
tŸÆ_cou¡
 +
waô_cou¡
[
i
];

167 
	`k¥ötf
("%d vehi˛es,ávîagê%d.%03d sec⁄d†waôög\n",
waô_cou¡
[
i
], 
món_waô_m£cs
/1000,mean_wait_msecs%1000);

169 
	`k¥ötf
("0 vehicles,áverage 0.000 seconds\n");

173 i‡(
tŸÆ_cou¡
 > 0) {

174 
	`k¥ötf
("Æl:\t%d vehi˛es,ávîagê%d.%03d sec⁄d†waôög\n",
tŸÆ_cou¡
,

175 (
tŸÆ_waô_m£cs
/
tŸÆ_cou¡
)/1000,

176 (
tŸÆ_waô_m£cs
/
tŸÆ_cou¡
)%1000);

178 
	`k¥ötf
("all:\t0 vehicles,áverage 0.000 seconds waiting\n");

181 
	`gëöãrvÆ
(
°¨t_£c
,
°¨t_n£c
,
íd_£c
,
íd_n£c
,&
run_£c
,&
run_n£c
);

182 
sim_m£c
 = 
run_£c
*1000;

183 
sim_m£c
 +
run_n£c
/1000000;

184 
	`k¥ötf
("Simulation: %d.%03d seconds, %d vehicles\n",

185 
sim_m£c
/1000,

186 
sim_m£c
%1000,

187 
tŸÆ_cou¡
);

188 
	}
}

206 
boﬁ


207 
	$right_tu∫
(
Vehi˛e
 *
v
) {

208 
	`KASSERT
(
v
 !
NULL
);

209 i‡(((
v
->
‹igö
 =
we°
Ë&& (v->
de°ö©i⁄
 =
south
)) ||

210 ((
v
->
‹igö
 =
south
Ë&& (v->
de°ö©i⁄
 =
ó°
)) ||

211 ((
v
->
‹igö
 =
ó°
Ë&& (v->
de°ö©i⁄
 =
n‹th
)) ||

212 ((
v
->
‹igö
 =
n‹th
Ë&& (v->
de°ö©i⁄
 =
we°
))) {

213  
åue
;

215  
Ál£
;

217 
	}
}

236 
	$check_c⁄°øöts
(
thªad_num
) {

237 
i
;

238 
	`KASSERT
(
thªad_num
 < 
NumThªads
);

240 
i
=0;i<
NumThªads
;i++) {

241 i‡((
i
==
thªad_num
Ë|| (
vehi˛es
[i] =
NULL
)) ;

243 i‡(
vehi˛es
[
i
]->
‹igö
 =vehi˛es[
thªad_num
]->origin) ;

245 i‡((
vehi˛es
[
i
]->
‹igö
 =vehi˛es[
thªad_num
]->
de°ö©i⁄
) &&

246 (
vehi˛es
[
i
]->
de°ö©i⁄
 =vehi˛es[
thªad_num
]->
‹igö
)) ;

249 i‡((
	`right_tu∫
(
vehi˛es
[
i
]Ë||Ñight_tu∫(vehi˛es[
thªad_num
])) &&

250 (
vehi˛es
[
thªad_num
]->
de°ö©i⁄
 !vehi˛es[
i
]->destination)) ;

254 
	`k¥ötf
("Vehicle A: ");

255 
	`¥öt_dúe˘i⁄
(
vehi˛es
[
i
]->
‹igö
);

256 
	`k¥ötf
("->");

257 
	`¥öt_dúe˘i⁄
(
vehi˛es
[
i
]->
de°ö©i⁄
);

258 
	`k¥ötf
("\n");

259 
	`k¥ötf
("Vehicle B: ");

260 
	`¥öt_dúe˘i⁄
(
vehi˛es
[
thªad_num
]->
‹igö
);

261 
	`k¥ötf
("->");

262 
	`¥öt_dúe˘i⁄
(
vehi˛es
[
thªad_num
]->
de°ö©i⁄
);

263 
	`k¥ötf
("\n");

264 
	`∑nic
("intersection synchronization constraint violation!\n");

266 
	}
}

282 
	$öôülize_°©e
()

284 
i
;

285 
i
=0;i<
MAX_THREADS
;i++) {

286 
vehi˛es
[
i
] = (
Vehi˛e
 * vﬁ©ûe)
NULL
;

288 
i
=0;i<4;i++) {

289 
tŸÆ_waô_£cs
[
i
] = 
tŸÆ_waô_n£cs
[i] = 
waô_cou¡
[i] = 0;

291 
muãx
 = 
	`£m_¸óã
("Vehicle Mutex",1);

292 i‡(
muãx
 =
NULL
) {

293 
	`∑nic
("couldÇot create vehicle mutex semaphore\n");

295 
≥rf_muãx
 = 
	`£m_¸óã
("PerfMutex",1);

296 i‡(
≥rf_muãx
 =
NULL
) {

297 
	`∑nic
("couldÇot createÖerf_mutex semaphore\n");

299 
Simuœti⁄Waô
 = 
	`£m_¸óã
("SimulationWait",0);

300 i‡(
Simuœti⁄Waô
 =
NULL
) {

301 
	`∑nic
("couldÇot create SimulationWait semaphore\n");

304 
	`öãr£˘i⁄_sync_öô
();

306 
	}
}

323 
	$˛ónup_°©e
()

325 
	`£m_de°roy
(
muãx
);

326 
	`£m_de°roy
(
≥rf_muãx
);

327 
	`£m_de°roy
(
Simuœti⁄Waô
);

328 
	`öãr£˘i⁄_sync_˛ónup
();

329 
	}
}

344 
	$ö_öãr£˘i⁄
() {

345 
	`˛ock¶ìp
(
Sîvi˚Time
);

346 
	}
}

369 
	$vehi˛e_simuœti⁄
(* 
unu£dpoöãr
,

370 
thªad_num
)

372 
i
;

373 
Vehi˛e
 
v
;

374 
time_t
 
bef‹e_£c
, 
a·î_£c
, 
waô_£c
;

375 
uöt32_t
 
bef‹e_n£c
, 
a·î_n£c
, 
waô_n£c
;

376 
¶ì±ime
;

378 (Ë
unu£dpoöãr
;

380 
	`KASSERT
(()
thªad_num
 < 
NumThªads
);

381 
i
=0;i<
NumIãøti⁄s
;i++) {

385 
¶ì±ime
 = 
I¡îAºivÆTime
 + 
	`øndom
()%3 - 1;

386 
	`KASSERT
(
¶ì±ime
 >
I¡îAºivÆTime
-1);

387 
	`KASSERT
(
¶ì±ime
 <
I¡îAºivÆTime
+1);

389 
	`˛ock¶ìp
(
¶ì±ime
);

391 i‡(
	`øndom
()%
NumThªads
 < 
thªad_num
) {

392 
	`thªad_yõld
();

396 
v
.
‹igö
 = 
	`øndom
()%4;

398 
v
.
de°ö©i⁄
 = v.
‹igö
 + (
	`øndom
()%3) + 1;

399 i‡(
v
.
de°ö©i⁄
 >= 4) {

400 
v
.
de°ö©i⁄
 = v.destination % 4;

402 
	`KASSERT
(4 > 
v
.
‹igö
);

403 
	`KASSERT
(4 > 
v
.
de°ö©i⁄
);

404 
	`KASSERT
(
v
.
‹igö
 !v.
de°ö©i⁄
);

410 
	`gëtime
(&
bef‹e_£c
,&
bef‹e_n£c
);

411 
	`öãr£˘i⁄_bef‹e_íåy
(
v
.
‹igö
, v.
de°ö©i⁄
);

412 
	`gëtime
(&
a·î_£c
,&
a·î_n£c
);

419 
	`P
(
muãx
);

420 
	`KASSERT
(
vehi˛es
[
thªad_num
] =
NULL
);

421 
vehi˛es
[
thªad_num
] = &
v
;

426 
	`check_c⁄°øöts
(
thªad_num
);

427 
	`V
(
muãx
);

430 
	`ö_öãr£˘i⁄
();

434 
	`P
(
muãx
);

435 
	`KASSERT
(
vehi˛es
[
thªad_num
] =&
v
);

436 
vehi˛es
[
thªad_num
] = 
NULL
;

437 
	`V
(
muãx
);

440 
	`öãr£˘i⁄_a·î_exô
(
v
.
‹igö
, v.
de°ö©i⁄
);

442 
	`gëöãrvÆ
(
bef‹e_£c
,
bef‹e_n£c
,
a·î_£c
,
a·î_n£c
,&
waô_£c
,&
waô_n£c
);

443 
	`P
(
≥rf_muãx
);

444 
tŸÆ_waô_£cs
[
v
.
‹igö
] +
waô_£c
;

445 
tŸÆ_waô_n£cs
[
v
.
‹igö
] +
waô_n£c
;

446 i‡(
tŸÆ_waô_n£cs
[
v
.
‹igö
] > 1000000000) {

447 
tŸÆ_waô_n£cs
[
v
.
‹igö
] -= 1000000000;

448 
tŸÆ_waô_£cs
[
v
.
‹igö
] ++;

450 
waô_cou¡
[
v
.
‹igö
]++;

451 
	`V
(
≥rf_muãx
);

455 
	`V
(
Simuœti⁄Waô
);

456 
	}
}

478 
	$åaffic_simuœti⁄
(
«rgs
,

479 ** 
¨gs
)

481 
i
;

482 
îr‹
;

484 i‡((
«rgs
 != 1) && (nargs != 5)) {

485 
	`k¥ötf
("Usage: <command> [threads iterations interarrivaltime servicetime\n");

486  
EINVAL
;

489 i‡(
«rgs
 == 5) {

490 
NumThªads
 = 
	`©oi
(
¨gs
[1]);

491 i‡(
NumThªads
 <0 || NumThªad†> 
MAX_THREADS
) {

492 
	`k¥ötf
("övÆidÇumbî o‡thªads: %d\n",
NumThªads
);

493  
EINVAL
;

495 
NumIãøti⁄s
 = 
	`©oi
(
¨gs
[2]);

496 i‡(
NumIãøti⁄s
 < 0) {

497 
	`k¥ötf
("övÆidÇumbî o‡ôî©i⁄†≥∏thªad: %d\n",
NumIãøti⁄s
);

498  
EINVAL
;

500 
I¡îAºivÆTime
 = 
	`©oi
(
¨gs
[3]);

501 i‡(
I¡îAºivÆTime
 < 0) {

502 
	`k¥ötf
("övÆid i¡î¨rivÆÅime: %d\n",
I¡îAºivÆTime
);

503  
EINVAL
;

505 
Sîvi˚Time
 = 
	`©oi
(
¨gs
[4]);

506 i‡(
Sîvi˚Time
 < 0) {

507 
	`k¥ötf
("övÆid sîvi˚Åime: %d\n",
Sîvi˚Time
);

508  
EINVAL
;

512 
	`k¥ötf
("Threads: %d Iterations: %d InterarrivalÅime: %d ServiceÅime: %d\n",

513 
NumThªads
,
NumIãøti⁄s
,
I¡îAºivÆTime
,
Sîvi˚Time
);

516 
	`öôülize_°©e
();

519 
	`gëtime
(&
°¨t_£c
,&
°¨t_n£c
);

521 
i
 = 0; i < 
NumThªads
; i++) {

522 
îr‹
 = 
	`thªad_f‹k
("vehi˛e_simuœti⁄Åhªad", 
NULL
, 
vehi˛e_simuœti⁄
, NULL, 
i
);

523 i‡(
îr‹
) {

524 
	`∑nic
("åaffic_simuœti⁄:Åhªad_f‹k faûed: %s\n", 
	`°ªº‹
(
îr‹
));

529 
i
=0;i<
NumThªads
;i++) {

530 
	`P
(
Simuœti⁄Waô
);

534 
	`gëtime
(&
íd_£c
,&
íd_n£c
);

537 
	`˛ónup_°©e
();

540 
	`¥öt_≥rf_°©s
();

543 
	}
}

	@synchprobs/traffic_synch.c

1 
	~<ty≥s.h
>

2 
	~<lib.h
>

3 
	~<synch¥obs.h
>

4 
	~<synch.h
>

5 
	~<›t-A1.h
>

6 
	~<¨øy.h
>

28 
	sVehi˛es


30 
Dúe˘i⁄
 
	m‹igö
;

31 
Dúe˘i⁄
 
	mde°ö©i⁄
;

32 } 
	tVehi˛e
;

35 
boﬁ
 
right_tu∫
(
Vehi˛e
 *
v
);

36 
boﬁ
 
ß„_íåy
(
Vehi˛e
 *
íãr
, Vehi˛ê*
¥e£¡
);

39 
cv
* 
	göãr£˘i⁄_cv_N
;

40 
cv
* 
	göãr£˘i⁄_cv_S
;

41 
cv
* 
	göãr£˘i⁄_cv_W
;

42 
cv
* 
	göãr£˘i⁄_cv_E
;

44 
lock
* 
	göãr£˘i⁄_lock
;

45 
¨øy
* 
	gvehi˛e_¨øy
;

46 
	gcou¡_N
=0;

47 
	gcou¡_S
=0;

48 
	gcou¡_W
=0;

49 
	gcou¡_E
=0;

50 
boﬁ
 
	gˇn_go_N
 = 
åue
;

51 
boﬁ
 
	gˇn_go_S
 = 
åue
;

52 
boﬁ
 
	gˇn_go_W
 = 
åue
;

53 
boﬁ
 
	gˇn_go_E
 = 
åue
;

64 
	$öãr£˘i⁄_sync_öô
()

66 
öãr£˘i⁄_cv_N
 = 
	`cv_¸óã
("intersection_cv_N");

67 
öãr£˘i⁄_cv_S
 = 
	`cv_¸óã
("intersection_cv_S");

68 
öãr£˘i⁄_cv_W
 = 
	`cv_¸óã
("intersection_cv_W");

69 
öãr£˘i⁄_cv_E
 = 
	`cv_¸óã
("intersection_cv_E");

71 
öãr£˘i⁄_lock
 = 
	`lock_¸óã
("intersection_lock");

72 
vehi˛e_¨øy
 = 
	`¨øy_¸óã
();

73 
	`¨øy_öô
(
vehi˛e_¨øy
);

75 
	`KASSERT
(
öãr£˘i⁄_cv_N
 !
NULL
);

76 
	`KASSERT
(
öãr£˘i⁄_cv_S
 !
NULL
);

77 
	`KASSERT
(
öãr£˘i⁄_cv_W
 !
NULL
);

78 
	`KASSERT
(
öãr£˘i⁄_cv_E
 !
NULL
);

79 
	`KASSERT
(
öãr£˘i⁄_lock
 !
NULL
);

80 
	`KASSERT
(
vehi˛e_¨øy
 !
NULL
);

89 
	}
}

100 
	$öãr£˘i⁄_sync_˛ónup
()

102 
	`KASSERT
(
öãr£˘i⁄_lock
 !
NULL
);

103 
	`KASSERT
(
öãr£˘i⁄_cv_N
 !
NULL
);

104 
	`KASSERT
(
öãr£˘i⁄_cv_S
 !
NULL
);

105 
	`KASSERT
(
öãr£˘i⁄_cv_W
 !
NULL
);

106 
	`KASSERT
(
öãr£˘i⁄_cv_E
 !
NULL
);

107 
	`KASSERT
(
vehi˛e_¨øy
 !
NULL
);

109 
	`lock_de°roy
(
öãr£˘i⁄_lock
);

111 
	`cv_de°roy
(
öãr£˘i⁄_cv_N
);

112 
	`cv_de°roy
(
öãr£˘i⁄_cv_S
);

113 
	`cv_de°roy
(
öãr£˘i⁄_cv_W
);

114 
	`cv_de°roy
(
öãr£˘i⁄_cv_E
);

116 
	`¨øy_de°roy
(
vehi˛e_¨øy
);

121 
	}
}

125 
boﬁ


126 
	$right_tu∫
(
Vehi˛e
* 
v
) {

127 
	`KASSERT
(
v
 !
NULL
);

128 i‡(((
v
->
‹igö
 =
we°
Ë&& (v->
de°ö©i⁄
 =
south
)) ||

129 ((
v
->
‹igö
 =
south
Ë&& (v->
de°ö©i⁄
 =
ó°
)) ||

130 ((
v
->
‹igö
 =
ó°
Ë&& (v->
de°ö©i⁄
 =
n‹th
)) ||

131 ((
v
->
‹igö
 =
n‹th
Ë&& (v->
de°ö©i⁄
 =
we°
))) {

132  
åue
;

134  
Ál£
;

136 
	}
}

139 
boﬁ
 
	$ß„_íåy
(
Vehi˛e
* 
va
, Vehi˛e* 
vb
) {

140 i‡(
va
->
‹igö
 =
vb
->origin){

141  
åue
;

143 i‡((
va
->
‹igö
 =
vb
->
de°ö©i⁄
) && (va->destination == vb->origin)){

144  
åue
;

146 i‡((
va
->
de°ö©i⁄
 !
vb
->de°ö©i⁄Ë&& (
	`right_tu∫
(va) ||Ñight_turn(vb))){

147  
åue
;

150  
Ál£
;

152 
	}
}

170 
	$öãr£˘i⁄_bef‹e_íåy
(
Dúe˘i⁄
 
‹igö
, Dúe˘i⁄ 
de°ö©i⁄
)

172 
ˇn_go
 = 0;

173 
num_v
;

176 
	`KASSERT
(
öãr£˘i⁄_lock
 !
NULL
);

177 
	`KASSERT
(
öãr£˘i⁄_cv_N
 !
NULL
);

178 
	`KASSERT
(
öãr£˘i⁄_cv_S
 !
NULL
);

179 
	`KASSERT
(
öãr£˘i⁄_cv_W
 !
NULL
);

180 
	`KASSERT
(
öãr£˘i⁄_cv_E
 !
NULL
);

182 
	`KASSERT
(
vehi˛e_¨øy
 !
NULL
);

184 
	`lock_acquúe
(
öãr£˘i⁄_lock
);

187 
Vehi˛e
 *
v√w
 = 
	`kmÆloc
((Vehicle));

188 
	`KASSERT
(
v√w
 !
NULL
);

189 
v√w
->
‹igö
 = origin;

190 
v√w
->
de°ö©i⁄
 = destination;

192 
åue
) {

194 
ˇn_go
 = 0;

195 
num_v
=
	`¨øy_num
(
vehi˛e_¨øy
);

198 
i
=0; i<
num_v
; i++){

199 
Vehi˛e
 *
¨øy_v
 = 
	`¨øy_gë
(
vehi˛e_¨øy
,
i
);

206 if(
	`ß„_íåy
(
v√w
, 
¨øy_v
)){

207 
ˇn_go
 = can_go + 1;

209 if(!
	`ß„_íåy
(
v√w
, 
¨øy_v
)){

214 if((
ˇn_go
 =
num_v
Ë&& (
ˇn_go_N
 =
åue
Ë&& (
v√w
->
‹igö
 =
n‹th
)){

216 
	`KASSERT
(
	`lock_do_i_hﬁd
(
öãr£˘i⁄_lock
));

218 
	`¨øy_add
(
vehi˛e_¨øy
, 
v√w
, 
NULL
);

219 
cou¡_N
 = count_N + 1;

221 if(
cou¡_N
 >= 4){

222 
ˇn_go_N
 = 
Ál£
;

226 if((
ˇn_go
 =
num_v
Ë&& (
ˇn_go_S
 =
åue
Ë&& (
v√w
->
‹igö
 =
south
)){

228 
	`KASSERT
(
	`lock_do_i_hﬁd
(
öãr£˘i⁄_lock
));

230 
	`¨øy_add
(
vehi˛e_¨øy
, 
v√w
, 
NULL
);

231 
cou¡_S
 = count_S + 1;

233 if(
cou¡_S
 >= 4){

234 
ˇn_go_S
 = 
Ál£
;

238 if((
ˇn_go
 =
num_v
Ë&& (
ˇn_go_W
 =
åue
Ë&& (
v√w
->
‹igö
 =
we°
)){

240 
	`KASSERT
(
	`lock_do_i_hﬁd
(
öãr£˘i⁄_lock
));

242 
	`¨øy_add
(
vehi˛e_¨øy
, 
v√w
, 
NULL
);

243 
cou¡_W
 = count_W + 1;

245 if(
cou¡_W
 >= 4){

246 
ˇn_go_W
 = 
Ál£
;

250 if((
ˇn_go
 =
num_v
Ë&& (
ˇn_go_E
 =
åue
Ë&& (
v√w
->
‹igö
 =
ó°
)){

252 
	`KASSERT
(
	`lock_do_i_hﬁd
(
öãr£˘i⁄_lock
));

254 
	`¨øy_add
(
vehi˛e_¨øy
, 
v√w
, 
NULL
);

255 
cou¡_E
 = count_E + 1;

257 if(
cou¡_E
 >= 4){

258 
ˇn_go_E
 = 
Ál£
;

264 if(
v√w
->
‹igö
 =
n‹th
){

265 
	`cv_waô
(
öãr£˘i⁄_cv_N
, 
öãr£˘i⁄_lock
);

267 if(
v√w
->
‹igö
 =
south
){

268 
	`cv_waô
(
öãr£˘i⁄_cv_S
, 
öãr£˘i⁄_lock
);

270 if(
v√w
->
‹igö
 =
we°
){

271 
	`cv_waô
(
öãr£˘i⁄_cv_W
, 
öãr£˘i⁄_lock
);

273 if(
v√w
->
‹igö
 =
ó°
){

274 
	`cv_waô
(
öãr£˘i⁄_cv_E
, 
öãr£˘i⁄_lock
);

278 
	`lock_ªÀa£
(
öãr£˘i⁄_lock
);

286 
	}
}

301 
	$öãr£˘i⁄_a·î_exô
(
Dúe˘i⁄
 
‹igö
, Dúe˘i⁄ 
de°ö©i⁄
)

303 
num_v
;

305 
	`KASSERT
(
öãr£˘i⁄_lock
 !
NULL
);

306 
	`KASSERT
(
öãr£˘i⁄_cv_N
 !
NULL
);

307 
	`KASSERT
(
öãr£˘i⁄_cv_S
 !
NULL
);

308 
	`KASSERT
(
öãr£˘i⁄_cv_W
 !
NULL
);

309 
	`KASSERT
(
öãr£˘i⁄_cv_E
 !
NULL
);

311 
	`KASSERT
(
vehi˛e_¨øy
 !
NULL
);

313 
	`lock_acquúe
(
öãr£˘i⁄_lock
);

315 
num_v
 = 
	`¨øy_num
(
vehi˛e_¨øy
);

317 
i
 = 0; i < 
num_v
; ++i){

318 
Vehi˛e
* 
cur_vehi˛e
 = 
	`¨øy_gë
(
vehi˛e_¨øy
,
i
);

320 i‡((
cur_vehi˛e
->
‹igö
 =‹igöË&& (cur_vehi˛e->
de°ö©i⁄
 == destination)){

322 if(
cur_vehi˛e
->
‹igö
 =
n‹th
){

324 
	`cv_brﬂdˇ°
(
öãr£˘i⁄_cv_S
, 
öãr£˘i⁄_lock
);

325 
	`cv_brﬂdˇ°
(
öãr£˘i⁄_cv_W
, 
öãr£˘i⁄_lock
);

326 
	`cv_brﬂdˇ°
(
öãr£˘i⁄_cv_E
, 
öãr£˘i⁄_lock
);

327 
cou¡_N
 = count_N - 1;

328 if((
cou¡_N
 <0Ë|| (
ˇn_go_N
 =
åue
)){

329 
ˇn_go_N
 = 
åue
;

330 
	`cv_brﬂdˇ°
(
öãr£˘i⁄_cv_N
, 
öãr£˘i⁄_lock
);

333 if(
cur_vehi˛e
->
‹igö
 =
south
){

334 
	`cv_brﬂdˇ°
(
öãr£˘i⁄_cv_N
, 
öãr£˘i⁄_lock
);

336 
	`cv_brﬂdˇ°
(
öãr£˘i⁄_cv_W
, 
öãr£˘i⁄_lock
);

337 
	`cv_brﬂdˇ°
(
öãr£˘i⁄_cv_E
, 
öãr£˘i⁄_lock
);

338 
cou¡_S
 = count_S - 1;

339 if((
cou¡_S
 <0Ë|| (
ˇn_go_S
 =
åue
)){

340 
ˇn_go_S
 = 
åue
;

341 
	`cv_brﬂdˇ°
(
öãr£˘i⁄_cv_S
, 
öãr£˘i⁄_lock
);

344 if(
cur_vehi˛e
->
‹igö
 =
we°
){

345 
	`cv_brﬂdˇ°
(
öãr£˘i⁄_cv_N
, 
öãr£˘i⁄_lock
);

346 
	`cv_brﬂdˇ°
(
öãr£˘i⁄_cv_S
, 
öãr£˘i⁄_lock
);

348 
	`cv_brﬂdˇ°
(
öãr£˘i⁄_cv_E
, 
öãr£˘i⁄_lock
);

349 
cou¡_W
 = count_W - 1;

350 if((
cou¡_W
 <0Ë|| (
ˇn_go_W
 =
åue
)){

351 
ˇn_go_W
 = 
åue
;

352 
	`cv_brﬂdˇ°
(
öãr£˘i⁄_cv_W
, 
öãr£˘i⁄_lock
);

355 if(
cur_vehi˛e
->
‹igö
 =
ó°
){

356 
	`cv_brﬂdˇ°
(
öãr£˘i⁄_cv_N
, 
öãr£˘i⁄_lock
);

357 
	`cv_brﬂdˇ°
(
öãr£˘i⁄_cv_S
, 
öãr£˘i⁄_lock
);

358 
	`cv_brﬂdˇ°
(
öãr£˘i⁄_cv_W
, 
öãr£˘i⁄_lock
);

360 
cou¡_E
 = count_E - 1;

361 if((
cou¡_E
 <0Ë|| (
ˇn_go_E
 =
åue
)){

362 
ˇn_go_E
 = 
åue
;

363 
	`cv_brﬂdˇ°
(
öãr£˘i⁄_cv_E
, 
öãr£˘i⁄_lock
);

367 
	`¨øy_ªmove
(
vehi˛e_¨øy
, 
i
);

372 
	`lock_ªÀa£
(
öãr£˘i⁄_lock
);

379 
	}
}

	@synchprobs/whalemating.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<thªad.h
>

36 
	~<ã°.h
>

38 
	#NMATING
 10

	)

42 
	$mÆe
(*
p
, 
which
)

44 ()
p
;

45 
	`k¥ötf
("mÆêwhÆê#%ld sèπög\n", 
which
);

48 
	}
}

52 
	$„mÆe
(*
p
, 
which
)

54 ()
p
;

55 
	`k¥ötf
("„mÆêwhÆê#%ld sèπög\n", 
which
);

58 
	}
}

62 
	$m©chmakî
(*
p
, 
which
)

64 ()
p
;

65 
	`k¥ötf
("m©chmakî whÆê#%ld sèπög\n", 
which
);

68 
	}
}

73 
	$whÆem©ög
(
«rgs
, **
¨gs
)

76 
i
, 
j
, 
îr
=0;

78 ()
«rgs
;

79 ()
¨gs
;

81 
i
 = 0; i < 3; i++) {

82 
j
 = 0; j < 
NMATING
; j++) {

83 #ifde‡
UW


84 
i
) {

86 
îr
 = 
	`thªad_f‹k
("MÆêWhÆêThªad", 
NULL
,

87 
mÆe
, 
NULL
, 
j
);

90 
îr
 = 
	`thªad_f‹k
("FemÆêWhÆêThªad", 
NULL
,

91 
„mÆe
, 
NULL
, 
j
);

94 
îr
 = 
	`thªad_f‹k
("M©chmakî WhÆêThªad", 
NULL
,

95 
m©chmakî
, 
NULL
, 
j
);

99 
i
) {

101 
îr
 = 
	`thªad_f‹k
("Male Whale Thread",

102 
mÆe
, 
NULL
, 
j
, NULL);

105 
îr
 = 
	`thªad_f‹k
("Female Whale Thread",

106 
„mÆe
, 
NULL
, 
j
, NULL);

109 
îr
 = 
	`thªad_f‹k
("Matchmaker Whale Thread",

110 
m©chmakî
, 
NULL
, 
j
, NULL);

114 i‡(
îr
) {

115 
	`∑nic
("whalemating:Åhread_fork failed: %s)\n",

116 
	`°ªº‹
(
îr
));

122 
	}
}

	@syscall/file_syscalls.c

1 
	~<ty≥s.h
>

2 
	~<kîn/î∫o.h
>

3 
	~<kîn/uni°d.h
>

4 
	~<lib.h
>

5 
	~<uio.h
>

6 
	~<sysˇŒ.h
>

7 
	~<vnode.h
>

8 
	~<vfs.h
>

9 
	~<cuºít.h
>

10 
	~<¥oc.h
>

24 
	$sys_wrôe
(
fdesc
,
u£Ωå_t
 
ubuf
,
nbyãs
,*
ªtvÆ
)

26 
iovec
 
iov
;

27 
uio
 
u
;

28 
ªs
;

30 
	`DEBUG
(
DB_SYSCALL
,"SysˇŒ: wrôe(%d,%x,%d)\n",
fdesc
,()
ubuf
,
nbyãs
);

33 i‡(!((
fdesc
==
STDOUT_FILENO
)||(fdesc==
STDERR_FILENO
))) {

34  
EUNIMP
;

36 
	`KASSERT
(
cuΩroc
 !
NULL
);

37 
	`KASSERT
(
cuΩroc
->
c⁄sﬁe
 !
NULL
);

38 
	`KASSERT
(
cuΩroc
->
p_addr•a˚
 !
NULL
);

41 
iov
.
iov_uba£
 = 
ubuf
;

42 
iov
.
iov_Àn
 = 
nbyãs
;

43 
u
.
uio_iov
 = &
iov
;

44 
u
.
uio_iov˙t
 = 1;

45 
u
.
uio_off£t
 = 0;

46 
u
.
uio_ªsid
 = 
nbyãs
;

47 
u
.
uio_£gÊg
 = 
UIO_USERSPACE
;

48 
u
.
uio_rw
 = 
UIO_WRITE
;

49 
u
.
uio_•a˚
 = 
cuΩroc
->
p_addr•a˚
;

51 
ªs
 = 
	`VOP_WRITE
(
cuΩroc
->
c⁄sﬁe
,&
u
);

52 i‡(
ªs
) {

53  
ªs
;

57 *
ªtvÆ
 = 
nbyãs
 - 
u
.
uio_ªsid
;

58 
	`KASSERT
(*
ªtvÆ
 >= 0);

60 
	}
}

	@syscall/loadelf.c

53 
	~<ty≥s.h
>

54 
	~<kîn/î∫o.h
>

55 
	~<lib.h
>

56 
	~<uio.h
>

57 
	~<¥oc.h
>

58 
	~<cuºít.h
>

59 
	~<addr•a˚.h
>

60 
	~<vnode.h
>

61 
	~<ñf.h
>

79 
	$lﬂd_£gmít
(
addr•a˚
 *
as
, 
vnode
 *
v
,

80 
off_t
 
off£t
, 
vaddr_t
 
vaddr
,

81 
size_t
 
memsize
, size_à
fûesize
,

82 
is_execuèbÀ
)

84 
iovec
 
iov
;

85 
uio
 
u
;

86 
ªsu…
;

88 i‡(
fûesize
 > 
memsize
) {

89 
	`k¥ötf
("ELF: warning: segment filesize > segment memsize\n");

90 
fûesize
 = 
memsize
;

93 
	`DEBUG
(
DB_EXEC
, "ELF: Loading %lu bytesÅo 0x%lx\n",

94 (Ë
fûesize
, (Ë
vaddr
);

96 
iov
.
iov_uba£
 = (
u£Ωå_t
)
vaddr
;

97 
iov
.
iov_Àn
 = 
memsize
;

98 
u
.
uio_iov
 = &
iov
;

99 
u
.
uio_iov˙t
 = 1;

100 
u
.
uio_ªsid
 = 
fûesize
;

101 
u
.
uio_off£t
 = 
off£t
;

102 
u
.
uio_£gÊg
 = 
is_execuèbÀ
 ? 
UIO_USERISPACE
 : 
UIO_USERSPACE
;

103 
u
.
uio_rw
 = 
UIO_READ
;

104 
u
.
uio_•a˚
 = 
as
;

106 
ªsu…
 = 
	`VOP_READ
(
v
, &
u
);

107 i‡(
ªsu…
) {

108  
ªsu…
;

111 i‡(
u
.
uio_ªsid
 != 0) {

113 
	`k¥ötf
("ELF: shortÑead on segment - fileÅruncated?\n");

114  
ENOEXEC
;

133 
size_t
 
fûœmt
;

135 
fûœmt
 = 
memsize
 - 
fûesize
;

136 i‡(
fûœmt
 > 0) {

137 
	`DEBUG
(
DB_EXEC
, "ELF: Zero-filling %lu more bytes\n",

138 (Ë
fûœmt
);

139 
u
.
uio_ªsid
 +
fûœmt
;

140 
ªsu…
 = 
	`uiomovezîos
(
fûœmt
, &
u
);

145  
ªsu…
;

146 
	}
}

154 
	$lﬂd_ñf
(
vnode
 *
v
, 
vaddr_t
 *
íåypoöt
)

156 
Elf_Ehdr
 
eh
;

157 
Elf_Phdr
 
ph
;

158 
ªsu…
, 
i
;

159 
iovec
 
iov
;

160 
uio
 
ku
;

161 
addr•a˚
 *
as
;

163 
as
 = 
	`cuΩroc_gëas
();

169 
	`uio_köô
(&
iov
, &
ku
, &
eh
, ”h), 0, 
UIO_READ
);

170 
ªsu…
 = 
	`VOP_READ
(
v
, &
ku
);

171 i‡(
ªsu…
) {

172  
ªsu…
;

175 i‡(
ku
.
uio_ªsid
 != 0) {

177 
	`k¥ötf
("ELF: shortÑead on header - fileÅruncated?\n");

178  
ENOEXEC
;

192 i‡(
eh
.
e_idít
[
EI_MAG0
] !
ELFMAG0
 ||

193 
eh
.
e_idít
[
EI_MAG1
] !
ELFMAG1
 ||

194 
eh
.
e_idít
[
EI_MAG2
] !
ELFMAG2
 ||

195 
eh
.
e_idít
[
EI_MAG3
] !
ELFMAG3
 ||

196 
eh
.
e_idít
[
EI_CLASS
] !
ELFCLASS32
 ||

197 
eh
.
e_idít
[
EI_DATA
] !
ELFDATA2MSB
 ||

198 
eh
.
e_idít
[
EI_VERSION
] !
EV_CURRENT
 ||

199 
eh
.
e_vîsi⁄
 !
EV_CURRENT
 ||

200 
eh
.
e_ty≥
!=
ET_EXEC
 ||

201 
eh
.
e_machöe
!=
EM_MACHINE
) {

202  
ENOEXEC
;

220 
i
=0; i<
eh
.
e_phnum
; i++) {

221 
off_t
 
off£t
 = 
eh
.
e_phoff
 + 
i
*eh.
e_phítsize
;

222 
	`uio_köô
(&
iov
, &
ku
, &
ph
, ’h), 
off£t
, 
UIO_READ
);

224 
ªsu…
 = 
	`VOP_READ
(
v
, &
ku
);

225 i‡(
ªsu…
) {

226  
ªsu…
;

229 i‡(
ku
.
uio_ªsid
 != 0) {

231 
	`k¥ötf
("ELF: shortÑead onÖhdr - fileÅruncated?\n");

232  
ENOEXEC
;

235 
ph
.
p_ty≥
) {

236 
PT_NULL
: ;

237 
PT_PHDR
: ;

238 
PT_MIPS_REGINFO
: ;

239 
PT_LOAD
: ;

241 
	`k¥ötf
("loadelf: unknown segmentÅype %d\n",

242 
ph
.
p_ty≥
);

243  
ENOEXEC
;

246 
ªsu…
 = 
	`as_deföe_ªgi⁄
(
as
,

247 
ph
.
p_vaddr
,Öh.
p_memsz
,

248 
ph
.
p_Êags
 & 
PF_R
,

249 
ph
.
p_Êags
 & 
PF_W
,

250 
ph
.
p_Êags
 & 
PF_X
);

251 i‡(
ªsu…
) {

252  
ªsu…
;

256 
ªsu…
 = 
	`as_¥ï¨e_lﬂd
(
as
);

257 i‡(
ªsu…
) {

258  
ªsu…
;

265 
i
=0; i<
eh
.
e_phnum
; i++) {

266 
off_t
 
off£t
 = 
eh
.
e_phoff
 + 
i
*eh.
e_phítsize
;

267 
	`uio_köô
(&
iov
, &
ku
, &
ph
, ’h), 
off£t
, 
UIO_READ
);

269 
ªsu…
 = 
	`VOP_READ
(
v
, &
ku
);

270 i‡(
ªsu…
) {

271  
ªsu…
;

274 i‡(
ku
.
uio_ªsid
 != 0) {

276 
	`k¥ötf
("ELF: shortÑead onÖhdr - fileÅruncated?\n");

277  
ENOEXEC
;

280 
ph
.
p_ty≥
) {

281 
PT_NULL
: ;

282 
PT_PHDR
: ;

283 
PT_MIPS_REGINFO
: ;

284 
PT_LOAD
: ;

286 
	`k¥ötf
("loadelf: unknown segmentÅype %d\n",

287 
ph
.
p_ty≥
);

288  
ENOEXEC
;

291 
ªsu…
 = 
	`lﬂd_£gmít
(
as
, 
v
, 
ph
.
p_off£t
,Öh.
p_vaddr
,

292 
ph
.
p_memsz
,Öh.
p_fûesz
,

293 
ph
.
p_Êags
 & 
PF_X
);

294 i‡(
ªsu…
) {

295  
ªsu…
;

299 
ªsu…
 = 
	`as_com∂ëe_lﬂd
(
as
);

300 i‡(
ªsu…
) {

301  
ªsu…
;

304 *
íåypoöt
 = 
eh
.
e_íåy
;

307 
	}
}

	@syscall/proc_syscalls.c

1 
	~<ty≥s.h
>

2 
	~<kîn/î∫o.h
>

3 
	~<kîn/uni°d.h
>

4 
	~<kîn/waô.h
>

5 
	~<lib.h
>

6 
	~<sysˇŒ.h
>

7 
	~<cuºít.h
>

8 
	~<¥oc.h
>

9 
	~<thªad.h
>

10 
	~<addr•a˚.h
>

11 
	~<c›yöout.h
>

12 
	~<mùs/å≠‰ame.h
>

13 
	~<•l.h
>

14 
	~<limôs.h
>

15 
	~<vm.h
>

16 
	~<vfs.h
>

17 
	~<kîn/f˙é.h
>

19 
	~"›t-A2.h
"

24 
	$sys__exô
(
exôcode
) {

26 
addr•a˚
 *
as
;

27 
¥oc
 *
p
 = 
cuΩroc
;

30 ()
exôcode
;

32 #i‡
OPT_A2


33 
	`lock_acquúe
(
¥o˘abÀ_lock
);

35 
ödex
 = 
	`gë_node
(
cuΩroc
->
pid
);

36 
node
* 
cur
 = 
	`¨øy_gë
(
¥o˘abÀ
,
ödex
);

38 if(
cur
->
∑ª¡
 != 0){

39 
cur
->
°©us
 = 2;

40 
cur
->
exôcode
 = 
	`_MKWAIT_EXIT
(exitcode);

41 
	`cv_brﬂdˇ°
(
waô_cv
, 
¥o˘abÀ_lock
);

44 
cur
->
°©us
 = 0;

45 
	`¨øy_add
(
ªcy˛ëabÀ
, &
cur
->
pid
, 
NULL
);

48 
i
=0; i< 
	`¨øy_num
(
¥o˘abÀ
); i++){

49 
node
 *
ãmp
 = 
	`¨øy_gë
(
¥o˘abÀ
,
i
);

50 if((
ãmp
->
∑ª¡
 =
cur
->
pid
Ë&& (ãmp->
°©us
 == 2)){

51 
ãmp
->
°©us
 = 0;

52 
ãmp
->
∑ª¡
 = 0;

53 
	`¨øy_add
(
ªcy˛ëabÀ
, &
ãmp
->
pid
, 
NULL
);

57 
	`lock_ªÀa£
(
¥o˘abÀ_lock
);

61 
	`DEBUG
(
DB_SYSCALL
,"SysˇŒ: _exô(%d)\n",
exôcode
);

63 
	`KASSERT
(
cuΩroc
->
p_addr•a˚
 !
NULL
);

64 
	`as_dó˘iv©e
();

72 
as
 = 
	`cuΩroc_£ès
(
NULL
);

73 
	`as_de°roy
(
as
);

77 
	`¥oc_ªmthªad
(
cuπhªad
);

81 
	`¥oc_de°roy
(
p
);

83 
	`thªad_exô
();

85 
	`∑nic
("return fromÅhread_exit in sys_exit\n");

86 
	}
}

91 
	$sys_gëpid
(
pid_t
 *
ªtvÆ
)

96 #i‡
OPT_A2


97 
	`KASSERT
(
cuΩroc
!=
NULL
);

98 *
ªtvÆ
 = 
cuΩroc
->
pid
;

100 *
ªtvÆ
 = 1;

104 
	}
}

109 
	$sys_waôpid
(
pid_t
 
pid
,

110 
u£Ωå_t
 
°©us
,

111 
›ti⁄s
,

112 
pid_t
 *
ªtvÆ
)

114 
exô°©us
;

115 
ªsu…
;

126 i‡(
›ti⁄s
 != 0) {

127 (
EINVAL
);

130 #i‡
OPT_A2


141 
	`lock_acquúe
(
¥o˘abÀ_lock
);

143 
ödex
 = 
	`gë_node
(
pid
);

144 
node
* 
cur
 = 
	`¨øy_gë
(
¥o˘abÀ
,
ödex
);

146 
¥oc
* 
∑ª¡
 = 
cuΩroc
;

148 if(
cur
==
NULL
){

149 
	`lock_ªÀa£
(
¥o˘abÀ_lock
);

150  
ESRCH
;

152 if(
∑ª¡
->
pid
 !
cur
->parent){

153 
	`lock_ªÀa£
(
¥o˘abÀ_lock
);

154  
ECHILD
;

157 
cur
->
°©us
 == 1){

158 
	`cv_waô
(
waô_cv
, 
¥o˘abÀ_lock
);

161 
exô°©us
 = 
cur
->
exôcode
;

162 
	`lock_ªÀa£
(
¥o˘abÀ_lock
);

165 
exô°©us
 = 0;

168 
ªsu…
 = 
	`c›yout
((*)&
exô°©us
,
°©us
,());

169 i‡(
ªsu…
) {

170 (
ªsu…
);

172 *
ªtvÆ
 = 
pid
;

174 
	}
}

178 #i‡
OPT_A2


179 
	$sys_f‹k
(
å≠‰ame
 *
tf
, 
pid_t
 *
ªtvÆ
){

180 
	`KASSERT
(
cuΩroc
 !
NULL
);

182 
check
;

184 
¥oc
* 
curProc
 = 
cuΩroc
;

185 
¥oc
* 
√wp
 = 
	`¥oc_¸óã_ru≈rogøm
(
curProc
->
p_«me
);

187 if(
√wp
 =
NULL
){

188  
ENOMEM
;

191 
ödex
 = 
	`gë_node
(
√wp
->
pid
);

192 
node
* 
ãmp
 = 
	`¨øy_gë
(
¥o˘abÀ
,
ödex
);

193 
ãmp
->
∑ª¡
 = 
curProc
->
pid
;

196 
addr•a˚
 *
√w_as
;

197 
check
 = 
	`as_c›y
(
	`cuΩroc_gëas
(), &
√w_as
);

199 if(
check
!=0){

200 
	`¥oc_de°roy
(
√wp
);

201  
check
;

204 
√wp
->
p_addr•a˚
 = 
√w_as
;

207 
å≠‰ame
* 
√w_tf
 = 
	`kmÆloc
((trapframe));

209 if(
√w_tf
 =
NULL
){

210 
	`¥oc_de°roy
(
√wp
);

211  
ENOMEM
;

214 *
√w_tf
 = *
tf
;

216 
check
 = 
	`thªad_f‹k
(
cuπhªad
->
t_«me
, 
√wp
, 
íãr_f‹ked_¥o˚ss
, 
√w_tf
, 0);

218 if(
check
!=0){

219 
	`¥oc_de°roy
(
√wp
);

220 
	`k‰ì
(
√w_tf
);

221  
check
;

224 *
ªtvÆ
 = 
√wp
->
pid
;

226 
	}
}

232 
	$sys_execv
(
u£Ωå_t
 
¥og«me
, u£Ωå_à
¨gs
){

233 
ªsu…
;

235 if(
¥og«me
==
NULL
 || 
¨gs
 ==NULL){

236  
EFAULT
;

239 
num_¨g
=0;

240 
cou¡
=0;

241 * 
ãmp
;

244 ** 
¨r_¨g_±r
 = 
	`kmÆloc
(
ARG_MAX
);

245 
åue
){

246 
ªsu…
 = 
	`c›yö
(
¨gs
 + 
cou¡
*(*), &
ãmp
, (*));

248 if(
ªsu…
 != 0){

249  
ªsu…
;

252 
¨r_¨g_±r
[
cou¡
] = 
ãmp
;

253 if(
ãmp
 =
NULL
){

257 
cou¡
 = count + 1;

258 
num_¨g
 =Çum_arg + 1;

262 if(
num_¨g
 > 64){

263  
E2BIG
;

266 * 
«me
 = 
	`kmÆloc
(
PATH_MAX
);

267 
size_t
 
a˘uÆ_Àn
;

269 
ªsu…
 = 
	`c›yö°r
(
¥og«me
, 
«me
, 
PATH_MAX
, &
a˘uÆ_Àn
);

270 if(
ªsu…
 != 0){

271  
ªsu…
;

274 * 
¨g_°rög
 = 
	`kmÆloc
(
ARG_MAX
);

275 
size_t
 *
¨r_off£t
 = 
	`kmÆloc
(
num_¨g
 * (size_t));

277 
size_t
 
ãmp_off£t
 = 0;

278 
i
=0; i<
num_¨g
; i++){

279 
size_t
 
¨g_Àn
;

281 
ªsu…
 = 
	`c›yö°r
((
u£Ωå_t
Ë
¨r_¨g_±r
[
i
], 
¨g_°rög
 + 
ãmp_off£t
, 
ARG_MAX
 -Åemp_off£t, &
¨g_Àn
);

282 if(
ªsu…
 != 0){

283  
ªsu…
;

286 
¨r_off£t
[
i
] = 
ãmp_off£t
;

287 
ãmp_off£t
 =Åemp_off£à+ 
	`ROUNDUP
(
¨g_Àn
 + 1, 8);

291 
addr•a˚
 *
ﬁd_as
 = 
	`cuΩroc_gëas
();

293 
addr•a˚
 *
as
;

294 
vnode
 *
v
;

295 
vaddr_t
 
íåypoöt
, 
°ack±r
;

298 
ªsu…
 = 
	`vfs_›í
(
«me
, 
O_RDONLY
, 0, &
v
);

299 i‡(
ªsu…
) {

300  
ªsu…
;

304 
as
 = 
	`as_¸óã
();

305 i‡(
as
 ==
NULL
) {

306 
	`vfs_˛o£
(
v
);

307  
ENOMEM
;

311 
	`cuΩroc_£ès
(
as
);

312 
	`as_a˘iv©e
();

315 
ªsu…
 = 
	`lﬂd_ñf
(
v
, &
íåypoöt
);

316 i‡(
ªsu…
) {

318 
	`vfs_˛o£
(
v
);

319  
ªsu…
;

323 
	`vfs_˛o£
(
v
);

326 
ªsu…
 = 
	`as_deföe_°ack
(
as
, &
°ack±r
);

327 i‡(
ªsu…
) {

329  
ªsu…
;

332 
vaddr_t
 
°rög_t›
 = 
USERSTACK
 - 
ãmp_off£t
;

335 
ªsu…
 = 
	`c›yout
(
¨g_°rög
, (
u£Ωå_t
Ë
°rög_t›
, 
ãmp_off£t
);

336 if(
ªsu…
 != 0){

337  
ªsu…
;

341 
u£Ωå_t
 * 
¨r_off£t_t›
 = 
	`kmÆloc
((u£Ωå_tË* (
num_¨g
+1));

342 
i
=0; i<
num_¨g
; i++){

343 
u£Ωå_t
 
ãmp_u£Ωå
 = (u£Ωå_tË
°rög_t›
 + 
¨r_off£t
[
i
];

344 
¨r_off£t_t›
[
i
] = 
ãmp_u£Ωå
;

346 
¨r_off£t_t›
[
num_¨g
] = 
NULL
;

349 
vaddr_t
 
¨r_t›_addr
 = 
°rög_t›
 - ((
u£Ωå_t
Ë* (
num_¨g
 + 1));

351 
ªsu…
 = 
	`c›yout
(
¨r_off£t_t›
, (
u£Ωå_t
Ë
¨r_t›_addr
, (u£Ωå_tË* (
num_¨g
 + 1));

352 if(
ªsu…
 != 0){

353  
ªsu…
;

357 
	`as_de°roy
(
ﬁd_as
);

358 
	`k‰ì
(
¨r_¨g_±r
);

359 
	`k‰ì
(
«me
);

360 
	`k‰ì
(
¨g_°rög
);

361 
	`k‰ì
(
¨r_off£t
);

362 
	`k‰ì
(
¨r_off£t_t›
);

365 
	`íãr_√w_¥o˚ss
(
num_¨g
 , (
u£Ωå_t
)
¨r_t›_addr
 ,¨r_t›_addr, 
íåypoöt
);

368 
	`∑nic
("enter_new_processÑeturned\n");

369  
EINVAL
;

370 
	}
}

	@syscall/runprogram.c

36 
	~<ty≥s.h
>

37 
	~<kîn/î∫o.h
>

38 
	~<kîn/f˙é.h
>

39 
	~<lib.h
>

40 
	~<¥oc.h
>

41 
	~<cuºít.h
>

42 
	~<addr•a˚.h
>

43 
	~<vm.h
>

44 
	~<vfs.h
>

45 
	~<sysˇŒ.h
>

46 
	~<ã°.h
>

47 
	~<limôs.h
>

48 
	~<c›yöout.h
>

49 
	~"›t-A2.h
"

59 #i‡
OPT_A2


61 
	$ru≈rogøm
(*
¥og«me
, ** 
¨gs
, 
«rgs
)

64 
	$ru≈rogøm
(*
¥og«me
)

68 #i‡
OPT_A2


69 if(
«rgs
>64){

70  
E2BIG
;

74 
addr•a˚
 *
as
;

75 
vnode
 *
v
;

76 
vaddr_t
 
íåypoöt
, 
°ack±r
;

77 
ªsu…
;

79 #i‡
OPT_A2


80 
num_¨g
 = 
«rgs
;

81 * 
¨g_°rög
 = 
	`kmÆloc
(
ARG_MAX
);

82 
size_t
 *
¨r_off£t
 = 
	`kmÆloc
(
num_¨g
 * (size_t));

84 
size_t
 
ãmp_off£t
 = 0;

85 
i
=0; i<
num_¨g
; i++){

86 
	`°r˝y
(
¨g_°rög
 + 
ãmp_off£t
, 
¨gs
[
i
]);

87 
¨r_off£t
[
i
] = 
ãmp_off£t
;

88 
ãmp_off£t
 =Åemp_off£à+ 
	`ROUNDUP
(
	`°æí
(
¨gs
[
i
]) +1, 8);

93 
ªsu…
 = 
	`vfs_›í
(
¥og«me
, 
O_RDONLY
, 0, &
v
);

94 i‡(
ªsu…
) {

95  
ªsu…
;

99 
	`KASSERT
(
	`cuΩroc_gëas
(Ë=
NULL
);

102 
as
 = 
	`as_¸óã
();

103 i‡(
as
 ==
NULL
) {

104 
	`vfs_˛o£
(
v
);

105  
ENOMEM
;

109 
	`cuΩroc_£ès
(
as
);

110 
	`as_a˘iv©e
();

113 
ªsu…
 = 
	`lﬂd_ñf
(
v
, &
íåypoöt
);

114 i‡(
ªsu…
) {

116 
	`vfs_˛o£
(
v
);

117  
ªsu…
;

121 
	`vfs_˛o£
(
v
);

124 
ªsu…
 = 
	`as_deföe_°ack
(
as
, &
°ack±r
);

125 i‡(
ªsu…
) {

127  
ªsu…
;

130 #i‡
OPT_A2


131 
vaddr_t
 
°rög_t›
 = 
USERSTACK
 - 
ãmp_off£t
;

134 
ªsu…
 = 
	`c›yout
(
¨g_°rög
, (
u£Ωå_t
Ë
°rög_t›
, 
ãmp_off£t
);

135 if(
ªsu…
 != 0){

136  
ªsu…
;

140 
u£Ωå_t
 * 
¨r_off£t_t›
 = 
	`kmÆloc
((u£Ωå_tË* (
num_¨g
+1));

141 
i
=0; i<
num_¨g
; i++){

142 
u£Ωå_t
 
ãmp_u£Ωå
 = (u£Ωå_tË
°rög_t›
 + 
¨r_off£t
[
i
];

143 
¨r_off£t_t›
[
i
] = 
ãmp_u£Ωå
;

145 
¨r_off£t_t›
[
num_¨g
] = 
NULL
;

147 
vaddr_t
 
¨r_t›_addr
 = 
°rög_t›
 - ((
u£Ωå_t
Ë* (
num_¨g
 + 1));

149 
ªsu…
 = 
	`c›yout
(
¨r_off£t_t›
, (
u£Ωå_t
Ë
¨r_t›_addr
, (u£Ωå_tË* (
num_¨g
 + 1));

150 if(
ªsu…
 != 0){

151  
ªsu…
;

154 
	`k‰ì
(
¨g_°rög
);

155 
	`k‰ì
(
¨r_off£t
);

156 
	`k‰ì
(
¨r_off£t_t›
);

159 
	`íãr_√w_¥o˚ss
(
num_¨g
 , (
u£Ωå_t
)
¨r_t›_addr
 ,

160 
¨r_t›_addr
, 
íåypoöt
);

163 
	`íãr_√w_¥o˚ss
(0 , 
NULL
 ,

164 
°ack±r
, 
íåypoöt
);

169 
	`∑nic
("enter_new_processÑeturned\n");

170  
EINVAL
;

171 
	}
}

	@syscall/time_syscalls.c

30 
	~<ty≥s.h
>

31 
	~<˛ock.h
>

32 
	~<c›yöout.h
>

33 
	~<sysˇŒ.h
>

39 
	$sys___time
(
u£Ωå_t
 
u£r_£c⁄ds_±r
, u£Ωå_à
u£r_«no£c⁄ds_±r
)

41 
time_t
 
£c⁄ds
;

42 
uöt32_t
 
«no£c⁄ds
;

43 
ªsu…
;

45 
	`gëtime
(&
£c⁄ds
, &
«no£c⁄ds
);

47 
ªsu…
 = 
	`c›yout
(&
£c⁄ds
, 
u£r_£c⁄ds_±r
, (
time_t
));

48 i‡(
ªsu…
) {

49  
ªsu…
;

52 
ªsu…
 = 
	`c›yout
(&
«no£c⁄ds
, 
u£r_«no£c⁄ds_±r
, (
uöt32_t
));

53 i‡(
ªsu…
) {

54  
ªsu…
;

58 
	}
}

	@test/arraytest.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<¨øy.h
>

33 
	~<ã°.h
>

35 
	#TESTSIZE
 73

	)

39 
	$ã°a
(
¨øy
 *
a
)

41 
ã°¨øy
[
TESTSIZE
];

42 
i
, 
j
, 
n
, 
r
, *
p
;

44 
i
=0; i<
TESTSIZE
; i++) {

45 
ã°¨øy
[
i
]=i;

48 
n
 = 
	`¨øy_num
(
a
);

49 
	`KASSERT
(
n
==0);

51 
i
=0; i<
TESTSIZE
; i++) {

52 
r
 = 
	`¨øy_add
(
a
, &
ã°¨øy
[
i
], 
NULL
);

53 
	`KASSERT
(
r
==0);

54 
n
 = 
	`¨øy_num
(
a
);

55 
	`KASSERT
(
n
==
i
+1);

57 
n
 = 
	`¨øy_num
(
a
);

58 
	`KASSERT
(
n
==
TESTSIZE
);

60 
i
=0; i<
TESTSIZE
; i++) {

61 
p
 = 
	`¨øy_gë
(
a
, 
i
);

62 
	`KASSERT
(*
p
 =
i
);

64 
n
 = 
	`¨øy_num
(
a
);

65 
	`KASSERT
(
n
==
TESTSIZE
);

67 
j
=0; j<
TESTSIZE
*4; j++) {

68 
i
 = 
	`øndom
()%
TESTSIZE
;

69 
p
 = 
	`¨øy_gë
(
a
, 
i
);

70 
	`KASSERT
(*
p
 =
i
);

72 
n
 = 
	`¨øy_num
(
a
);

73 
	`KASSERT
(
n
==
TESTSIZE
);

75 
i
=0; i<
TESTSIZE
; i++) {

76 
	`¨øy_£t
(
a
, 
i
, &
ã°¨øy
[
TESTSIZE
-i-1]);

79 
i
=0; i<
TESTSIZE
; i++) {

80 
p
 = 
	`¨øy_gë
(
a
, 
i
);

81 
	`KASSERT
(*
p
 =
TESTSIZE
-
i
-1);

84 
r
 = 
	`¨øy_£tsize
(
a
, 
TESTSIZE
/2);

85 
	`KASSERT
(
r
==0);

87 
i
=0; i<
TESTSIZE
/2; i++) {

88 
p
 = 
	`¨øy_gë
(
a
, 
i
);

89 
	`KASSERT
(*
p
 =
TESTSIZE
-
i
-1);

92 
	`¨øy_ªmove
(
a
, 1);

94 
i
=1; i<
TESTSIZE
/2 - 1; i++) {

95 
p
 = 
	`¨øy_gë
(
a
, 
i
);

96 
	`KASSERT
(*
p
 =
TESTSIZE
-
i
-2);

98 
p
 = 
	`¨øy_gë
(
a
, 0);

99 
	`KASSERT
(*
p
 =
TESTSIZE
-1);

101 
	`¨øy_£tsize
(
a
, 2);

102 
p
 = 
	`¨øy_gë
(
a
, 0);

103 
	`KASSERT
(*
p
 =
TESTSIZE
-1);

104 
p
 = 
	`¨øy_gë
(
a
, 1);

105 
	`KASSERT
(*
p
 =
TESTSIZE
-3);

107 
	`¨øy_£t
(
a
, 1, 
NULL
);

108 
	`¨øy_£tsize
(
a
, 2);

109 
p
 = 
	`¨øy_gë
(
a
, 0);

110 
	`KASSERT
(*
p
 =
TESTSIZE
-1);

111 
p
 = 
	`¨øy_gë
(
a
, 1);

112 
	`KASSERT
(
p
==
NULL
);

114 
	`¨øy_£tsize
(
a
, 
TESTSIZE
*10);

115 
p
 = 
	`¨øy_gë
(
a
, 0);

116 
	`KASSERT
(*
p
 =
TESTSIZE
-1);

117 
p
 = 
	`¨øy_gë
(
a
, 1);

118 
	`KASSERT
(
p
==
NULL
);

119 
	}
}

122 
	$¨øyã°
(
«rgs
, **
¨gs
)

124 
¨øy
 *
a
;

126 ()
«rgs
;

127 ()
¨gs
;

129 
	`k¥ötf
("BeginningárrayÅest...\n");

130 
a
 = 
	`¨øy_¸óã
();

131 
	`KASSERT
(
a
 !
NULL
);

133 
	`ã°a
(
a
);

135 
	`¨øy_£tsize
(
a
, 0);

137 
	`ã°a
(
a
);

139 
	`¨øy_£tsize
(
a
, 0);

140 
	`¨øy_de°roy
(
a
);

142 
	`k¥ötf
("ArrayÅest complete\n");

144 
	}
}

	@test/bitmaptest.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<bôm≠.h
>

33 
	~<ã°.h
>

35 
	#TESTSIZE
 533

	)

38 
	$bôm≠ã°
(
«rgs
, **
¨gs
)

40 
bôm≠
 *
b
;

41 
d©a
[
TESTSIZE
];

42 
uöt32_t
 
x
;

43 
i
;

45 ()
«rgs
;

46 ()
¨gs
;

48 
	`k¥ötf
("Starting bitmapÅest...\n");

50 
i
=0; i<
TESTSIZE
; i++) {

51 
d©a
[
i
] = 
	`øndom
()%2;

54 
b
 = 
	`bôm≠_¸óã
(
TESTSIZE
);

55 
	`KASSERT
(
b
 !
NULL
);

57 
i
=0; i<
TESTSIZE
; i++) {

58 
	`KASSERT
(
	`bôm≠_is£t
(
b
, 
i
)==0);

61 
i
=0; i<
TESTSIZE
; i++) {

62 i‡(
d©a
[
i
]) {

63 
	`bôm≠_m¨k
(
b
, 
i
);

66 
i
=0; i<
TESTSIZE
; i++) {

67 i‡(
d©a
[
i
]) {

68 
	`KASSERT
(
	`bôm≠_is£t
(
b
, 
i
));

71 
	`KASSERT
(
	`bôm≠_is£t
(
b
, 
i
)==0);

75 
i
=0; i<
TESTSIZE
; i++) {

76 i‡(
d©a
[
i
]) {

77 
	`bôm≠_unm¨k
(
b
, 
i
);

80 
	`bôm≠_m¨k
(
b
, 
i
);

83 
i
=0; i<
TESTSIZE
; i++) {

84 i‡(
d©a
[
i
]) {

85 
	`KASSERT
(
	`bôm≠_is£t
(
b
, 
i
)==0);

88 
	`KASSERT
(
	`bôm≠_is£t
(
b
, 
i
));

92 
	`bôm≠_Æloc
(
b
, &
x
)==0) {

93 
	`KASSERT
(
x
 < 
TESTSIZE
);

94 
	`KASSERT
(
	`bôm≠_is£t
(
b
, 
x
));

95 
	`KASSERT
(
d©a
[
x
]==1);

96 
d©a
[
x
] = 0;

99 
i
=0; i<
TESTSIZE
; i++) {

100 
	`KASSERT
(
	`bôm≠_is£t
(
b
, 
i
));

101 
	`KASSERT
(
d©a
[
i
]==0);

104 
	`k¥ötf
("BitmapÅest complete\n");

106 
	}
}

	@test/fstest.c

41 
	~<ty≥s.h
>

42 
	~<kîn/î∫o.h
>

43 
	~<kîn/f˙é.h
>

44 
	~<lib.h
>

45 
	~<uio.h
>

46 
	~<thªad.h
>

47 
	~<synch.h
>

48 
	~<vfs.h
>

49 
	~<fs.h
>

50 
	~<vnode.h
>

51 
	~<ã°.h
>

53 
	#SLOGAN
 "HODIE MIHI - CRAS TIBI\n"

	)

54 
	#FILENAME
 "f°e°.tmp"

	)

55 
	#NCHUNKS
 720

	)

56 
	#NTHREADS
 12

	)

57 
	#NCREATES
 32

	)

59 
£m≠h‹e
 *
	gthªad£m
 = 
NULL
;

63 
	$öô_thªad£m
()

65 i‡(
thªad£m
==
NULL
) {

66 
thªad£m
 = 
	`£m_¸óã
("fstestsem", 0);

67 i‡(
thªad£m
 =
NULL
) {

68 
	`∑nic
("fstest: sem_create failed\n");

71 
	}
}

79 
	$rŸ©e
(*
°r
, 
amt
)

81 
i
, 
ch
;

83 
amt
 = (amt+2600)%26;

84 
	`KASSERT
(
amt
>=0);

86 
i
=0; 
°r
[i]; i++) {

87 
ch
 = 
°r
[
i
];

88 i‡(
ch
>='A' && ch<='Z') {

89 
ch
 = ch - 'A';

90 
ch
 +
amt
;

91 
ch
 %= 26;

92 
ch
 = ch + 'A';

93 
	`KASSERT
(
ch
>='A' && ch<='Z');

95 
°r
[
i
] = 
ch
;

97 
	}
}

103 
	$f°e°_makíame
(*
buf
, 
size_t
 
buÊí
,

104 c⁄° *
fs
, c⁄° *
«mesuffix
)

106 
	`¢¥ötf
(
buf
, 
buÊí
, "%s:%s%s", 
fs
, 
FILENAME
, 
«mesuffix
);

107 
	`KASSERT
(
	`°æí
(
buf
Ë< 
buÊí
);

108 
	}
}

110 
	#MAKENAME
(Ë
	`f°e°_makíame
(
«me
, “ame), 
fs
, 
«mesuffix
)

	)

114 
	$f°e°_ªmove
(c⁄° *
fs
, c⁄° *
«mesuffix
)

116 
«me
[32];

117 
buf
[32];

118 
îr
;

120 
	`MAKENAME
();

122 
	`°r˝y
(
buf
, 
«me
);

123 
îr
 = 
	`vfs_ªmove
(
buf
);

124 i‡(
îr
) {

125 
	`k¥ötf
("CouldÇŸÑemovê%s: %s\n", 
«me
, 
	`°ªº‹
(
îr
));

130 
	}
}

134 
	$f°e°_wrôe
(c⁄° *
fs
, c⁄° *
«mesuffix
,

135 
°ridesize
, 
°ridïos
)

137 
vnode
 *
vn
;

138 
îr
;

139 
i
;

140 
size_t
 
shouldbyãs
=0;

141 
size_t
 
byãs
=0;

142 
off_t
 
pos
=0;

143 
«me
[32];

144 
buf
[32];

145 
iovec
 
iov
;

146 
uio
 
ku
;

147 
Êags
;

149 
	`KASSERT
((
buf
Ë> 
	`°æí
(
SLOGAN
));

151 
	`MAKENAME
();

153 
Êags
 = 
O_WRONLY
|
O_CREAT
;

154 i‡(
°ridesize
 == 1) {

155 
Êags
 |
O_TRUNC
;

159 
	`°r˝y
(
buf
, 
«me
);

160 
îr
 = 
	`vfs_›í
(
buf
, 
Êags
, 0664, &
vn
);

161 i‡(
îr
) {

162 
	`k¥ötf
("CouldÇot open %s for write: %s\n",

163 
«me
, 
	`°ªº‹
(
îr
));

167 
i
=0; i<
NCHUNKS
; i++) {

168 i‡(
i
 % 
°ridesize
 !
°ridïos
) {

169 
pos
 +
	`°æí
(
SLOGAN
);

172 
	`°r˝y
(
buf
, 
SLOGAN
);

173 
	`rŸ©e
(
buf
, 
i
);

174 
	`uio_köô
(&
iov
, &
ku
, 
buf
, 
	`°æí
(
SLOGAN
), 
pos
, 
UIO_WRITE
);

175 
îr
 = 
	`VOP_WRITE
(
vn
, &
ku
);

176 i‡(
îr
) {

177 
	`k¥ötf
("%s: Wrôêîr‹: %s\n", 
«me
, 
	`°ªº‹
(
îr
));

178 
	`vfs_˛o£
(
vn
);

179 
	`vfs_ªmove
(
«me
);

183 i‡(
ku
.
uio_ªsid
 > 0) {

184 
	`k¥ötf
("%s: Short write: %lu bytesÜeft over\n",

185 
«me
, (Ë
ku
.
uio_ªsid
);

186 
	`vfs_˛o£
(
vn
);

187 
	`vfs_ªmove
(
«me
);

191 
byãs
 +(
ku
.
uio_off£t
 - 
pos
);

192 
shouldbyãs
 +
	`°æí
(
SLOGAN
);

193 
pos
 = 
ku
.
uio_off£t
;

196 
	`vfs_˛o£
(
vn
);

198 i‡(
byãs
 !
shouldbyãs
) {

199 
	`k¥ötf
("%s: %lu bytes written, should have been %lu!\n",

200 
«me
, (Ë
byãs
,

201 (Ë(
NCHUNKS
*
	`°æí
(
SLOGAN
)));

202 
	`vfs_ªmove
(
«me
);

205 
	`k¥ötf
("%s: %lu byã†wrôãn\n", 
«me
, (Ë
byãs
);

208 
	}
}

212 
	$f°e°_ªad
(c⁄° *
fs
, c⁄° *
«mesuffix
)

214 
vnode
 *
vn
;

215 
îr
;

216 
i
;

217 
size_t
 
byãs
=0;

218 
«me
[32];

219 
buf
[32];

220 
iovec
 
iov
;

221 
uio
 
ku
;

223 
	`MAKENAME
();

226 
	`°r˝y
(
buf
, 
«me
);

227 
îr
 = 
	`vfs_›í
(
buf
, 
O_RDONLY
, 0664, &
vn
);

228 i‡(
îr
) {

229 
	`k¥ötf
("CouldÇot openÅest file forÑead: %s\n",

230 
	`°ªº‹
(
îr
));

234 
i
=0; i<
NCHUNKS
; i++) {

235 
	`uio_köô
(&
iov
, &
ku
, 
buf
, 
	`°æí
(
SLOGAN
), 
byãs
, 
UIO_READ
);

236 
îr
 = 
	`VOP_READ
(
vn
, &
ku
);

237 i‡(
îr
) {

238 
	`k¥ötf
("%s: RódÉº‹: %s\n", 
«me
, 
	`°ªº‹
(
îr
));

239 
	`vfs_˛o£
(
vn
);

243 i‡(
ku
.
uio_ªsid
 > 0) {

244 
	`k¥ötf
("%s: Sh‹àªad: %lu byã†À· ovî\n", 
«me
,

245 (Ë
ku
.
uio_ªsid
);

246 
	`vfs_˛o£
(
vn
);

249 
buf
[
	`°æí
(
SLOGAN
)] = 0;

250 
	`rŸ©e
(
buf
, -
i
);

251 i‡(
	`°rcmp
(
buf
, 
SLOGAN
)) {

252 
	`k¥ötf
("%s: Test failed:Üine %d mismatched: %s\n",

253 
«me
, 
i
+1, 
buf
);

254 
	`vfs_˛o£
(
vn
);

258 
byãs
 = 
ku
.
uio_off£t
;

261 
	`vfs_˛o£
(
vn
);

263 i‡(
byãs
 !
NCHUNKS
*
	`°æí
(
SLOGAN
)) {

264 
	`k¥ötf
("%s: %lu bytesÑead, should have been %lu!\n",

265 
«me
, (Ë
byãs
,

266 (Ë(
NCHUNKS
*
	`°æí
(
SLOGAN
)));

269 
	`k¥ötf
("%s: %lu byã†ªad\n", 
«me
, (Ë
byãs
);

271 
	}
}

277 
	$dof°e°
(c⁄° *
fûesys
)

279 
	`k¥ötf
("*** Sèπög fûesy°emÅe° o¿%s:\n", 
fûesys
);

281 i‡(
	`f°e°_wrôe
(
fûesys
, "", 1, 0)) {

282 
	`k¥ötf
("*** Test failed\n");

286 i‡(
	`f°e°_ªad
(
fûesys
, "")) {

287 
	`k¥ötf
("*** Test failed\n");

291 i‡(
	`f°e°_ªmove
(
fûesys
, "")) {

292 
	`k¥ötf
("*** Test failed\n");

296 
	`k¥ötf
("*** FilesystemÅest done\n");

297 
	}
}

303 
	$ªad°ªss_thªad
(*
fs
, 
num
)

305 c⁄° *
fûesys
 = 
fs
;

306 i‡(
	`f°e°_ªad
(
fûesys
, "")) {

307 
	`k¥ötf
("*** Thªad %lu: faûed\n", 
num
);

309 
	`V
(
thªad£m
);

310 
	}
}

314 
	$d‹ód°ªss
(c⁄° *
fûesys
)

316 
i
, 
îr
;

318 
	`öô_thªad£m
();

320 
	`k¥ötf
("*** Sèπög f†ªad såes†ã° o¿%s:\n", 
fûesys
);

322 i‡(
	`f°e°_wrôe
(
fûesys
, "", 1, 0)) {

323 
	`k¥ötf
("*** Test failed\n");

327 
i
=0; i<
NTHREADS
; i++) {

328 
îr
 = 
	`thªad_f‹k
("ªad°ªss", 
NULL
,

329 
ªad°ªss_thªad
, (*)
fûesys
, 
i
);

330 i‡(
îr
) {

331 
	`∑nic
("readstress:Åhread_fork failed: %s\n",

332 
	`°ªº‹
(
îr
));

336 
i
=0; i<
NTHREADS
; i++) {

337 
	`P
(
thªad£m
);

340 i‡(
	`f°e°_ªmove
(
fûesys
, "")) {

341 
	`k¥ötf
("*** Test failed\n");

345 
	`k¥ötf
("*** fsÑead stressÅest done\n");

346 
	}
}

352 
	$wrôe°ªss_thªad
(*
fs
, 
num
)

354 c⁄° *
fûesys
 = 
fs
;

355 
num°r
[8];

356 
	`¢¥ötf
(
num°r
, “um°r), "%lu", 
num
);

358 i‡(
	`f°e°_wrôe
(
fûesys
, 
num°r
, 1, 0)) {

359 
	`k¥ötf
("*** Thªad %lu: faûed\n", 
num
);

360 
	`V
(
thªad£m
);

364 i‡(
	`f°e°_ªad
(
fûesys
, 
num°r
)) {

365 
	`k¥ötf
("*** Thªad %lu: faûed\n", 
num
);

366 
	`V
(
thªad£m
);

370 i‡(
	`f°e°_ªmove
(
fûesys
, 
num°r
)) {

371 
	`k¥ötf
("*** Thªad %lu: faûed\n", 
num
);

374 
	`k¥ötf
("*** Thªad %lu: d⁄e\n", 
num
);

376 
	`V
(
thªad£m
);

377 
	}
}

381 
	$dowrôe°ªss
(c⁄° *
fûesys
)

383 
i
, 
îr
;

385 
	`öô_thªad£m
();

387 
	`k¥ötf
("*** Sèπög f†wrôê°ªs†ã° o¿%s:\n", 
fûesys
);

389 
i
=0; i<
NTHREADS
; i++) {

390 
îr
 = 
	`thªad_f‹k
("wrôe°ªss", 
NULL
,

391 
wrôe°ªss_thªad
, (*)
fûesys
, 
i
);

392 i‡(
îr
) {

393 
	`∑nic
("thªad_f‹k faûed %s\n", 
	`°ªº‹
(
îr
));

397 
i
=0; i<
NTHREADS
; i++) {

398 
	`P
(
thªad£m
);

401 
	`k¥ötf
("*** fs write stressÅest done\n");

402 
	}
}

408 
	$wrôe°ªss2_thªad
(*
fs
, 
num
)

410 c⁄° *
fûesys
 = 
fs
;

412 i‡(
	`f°e°_wrôe
(
fûesys
, "", 
NTHREADS
, 
num
)) {

413 
	`k¥ötf
("*** Thªad %lu: faûed\n", 
num
);

414 
	`V
(
thªad£m
);

418 
	`V
(
thªad£m
);

419 
	}
}

423 
	$dowrôe°ªss2
(c⁄° *
fûesys
)

425 
i
, 
îr
;

426 
«me
[32];

427 
vnode
 *
vn
;

429 
	`öô_thªad£m
();

431 
	`k¥ötf
("*** Sèπög f†wrôê°ªs†ã° 2 o¿%s:\n", 
fûesys
);

434 
	`f°e°_makíame
(
«me
, “ame), 
fûesys
, "");

435 
îr
 = 
	`vfs_›í
(
«me
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
, 0664, &
vn
);

436 i‡(
îr
) {

437 
	`k¥ötf
("CouldÇŸ cª©êã° fûe: %s\n", 
	`°ªº‹
(
îr
));

438 
	`k¥ötf
("*** Test failed\n");

441 
	`vfs_˛o£
(
vn
);

443 
i
=0; i<
NTHREADS
; i++) {

444 
îr
 = 
	`thªad_f‹k
("wrôe°ªss2", 
NULL
,

445 
wrôe°ªss2_thªad
, (*)
fûesys
, 
i
);

446 i‡(
îr
) {

447 
	`∑nic
("writestress2:Åhread_fork failed: %s\n",

448 
	`°ªº‹
(
îr
));

452 
i
=0; i<
NTHREADS
; i++) {

453 
	`P
(
thªad£m
);

456 i‡(
	`f°e°_ªad
(
fûesys
, "")) {

457 
	`k¥ötf
("*** Test failed\n");

461 i‡(
	`f°e°_ªmove
(
fûesys
, "")) {

462 
	`k¥ötf
("*** Test failed\n");

466 
	`k¥ötf
("*** fs write stressÅest 2 done\n");

467 
	}
}

473 
	$¸óã°ªss_thªad
(*
fs
, 
num
)

475 c⁄° *
fûesys
 = 
fs
;

476 
i
;

477 
num°r
[16];

479 
i
=0; i<
NCREATES
; i++) {

481 
	`¢¥ötf
(
num°r
, “um°r), "%lu-%d", 
num
, 
i
);

483 i‡(
	`f°e°_wrôe
(
fûesys
, 
num°r
, 1, 0)) {

484 
	`k¥ötf
("*** Thªad %lu: fûê%d: faûed\n", 
num
, 
i
);

485 
	`V
(
thªad£m
);

489 i‡(
	`f°e°_ªad
(
fûesys
, 
num°r
)) {

490 
	`k¥ötf
("*** Thªad %lu: fûê%d: faûed\n", 
num
, 
i
);

491 
	`V
(
thªad£m
);

495 i‡(
	`f°e°_ªmove
(
fûesys
, 
num°r
)) {

496 
	`k¥ötf
("*** Thªad %lu: fûê%d: faûed\n", 
num
, 
i
);

497 
	`V
(
thªad£m
);

503 
	`V
(
thªad£m
);

504 
	}
}

508 
	$do¸óã°ªss
(c⁄° *
fûesys
)

510 
i
, 
îr
;

512 
	`öô_thªad£m
();

514 
	`k¥ötf
("*** Sèπög f†¸óã såes†ã° o¿%s:\n", 
fûesys
);

516 
i
=0; i<
NTHREADS
; i++) {

517 #ifde‡
UW


518 
îr
 = 
	`thªad_f‹k
("¸óã°ªss", 
NULL
,

519 
¸óã°ªss_thªad
, (*)
fûesys
, 
i
);

521 
îr
 = 
	`thªad_f‹k
("createstress",

522 
¸óã°ªss_thªad
, (*)
fûesys
, 
i
,

523 
NULL
);

525 i‡(
îr
) {

526 
	`∑nic
("createstress:Åhread_fork failed %s\n",

527 
	`°ªº‹
(
îr
));

531 
i
=0; i<
NTHREADS
; i++) {

532 
	`P
(
thªad£m
);

535 
	`k¥ötf
("*** fs create stressÅest done\n");

536 
	}
}

542 
	$checkfûesy°em
(
«rgs
, **
¨gs
)

544 *
devi˚
;

546 i‡(
«rgs
 != 2) {

547 
	`k¥ötf
("Usage: fs[12345] filesystem:\n");

548  
EINVAL
;

551 
devi˚
 = 
¨gs
[1];

554 i‡(
devi˚
[
	`°æí
(device)-1]==':') {

555 
devi˚
[
	`°æí
(device)-1] = 0;

559 
	}
}

561 
	#DEFTEST
(
ã°«me
) \

563 
	`ã°«me
(
«rgs
, **
¨gs
) \

565 
ªsu…
; \

566 
ªsu…
 = 
	`checkfûesy°em
(
«rgs
, 
¨gs
); \

567 i‡(
ªsu…
) { \

568  
ªsu…
; \

570 do##
	`ã°«me
(
¨gs
[1]); \

572 }

	)

574 
DEFTEST
(
f°e°
);

575 
DEFTEST
(
ªad°ªss
);

576 
DEFTEST
(
wrôe°ªss
);

577 
DEFTEST
(
wrôe°ªss2
);

578 
DEFTEST
(
¸óã°ªss
);

583 
	$¥ötfûe
(
«rgs
, **
¨gs
)

585 
vnode
 *
rv
, *
wv
;

586 
iovec
 
iov
;

587 
uio
 
ku
;

588 
off_t
 
Ωos
=0, 
wpos
=0;

589 
buf
[128];

590 
outfûe
[16];

591 
ªsu…
;

592 
d⁄e
=0;

594 i‡(
«rgs
 != 2) {

595 
	`k¥ötf
("Usage:Öf filename\n");

596  
EINVAL
;

600 
	`°r˝y
(
outfûe
, "con:");

602 
ªsu…
 = 
	`vfs_›í
(
¨gs
[1], 
O_RDONLY
, 0664, &
rv
);

603 i‡(
ªsu…
) {

604 
	`k¥ötf
("¥ötfûe: %s\n", 
	`°ªº‹
(
ªsu…
));

605  
ªsu…
;

608 
ªsu…
 = 
	`vfs_›í
(
outfûe
, 
O_WRONLY
, 0664, &
wv
);

609 i‡(
ªsu…
) {

610 
	`k¥ötf
("¥ötfûe: ouçut: %s\n", 
	`°ªº‹
(
ªsu…
));

611 
	`vfs_˛o£
(
rv
);

612  
ªsu…
;

615 !
d⁄e
) {

616 
	`uio_köô
(&
iov
, &
ku
, 
buf
, (buf), 
Ωos
, 
UIO_READ
);

617 
ªsu…
 = 
	`VOP_READ
(
rv
, &
ku
);

618 i‡(
ªsu…
) {

619 
	`k¥ötf
("RódÉº‹: %s\n", 
	`°ªº‹
(
ªsu…
));

622 
Ωos
 = 
ku
.
uio_off£t
;

624 i‡(
ku
.
uio_ªsid
 > 0) {

625 
d⁄e
 = 1;

628 
	`uio_köô
(&
iov
, &
ku
, 
buf
, (buf)-ku.
uio_ªsid
, 
wpos
,

629 
UIO_WRITE
);

630 
ªsu…
 = 
	`VOP_WRITE
(
wv
, &
ku
);

631 i‡(
ªsu…
) {

632 
	`k¥ötf
("Wrôêîr‹: %s\n", 
	`°ªº‹
(
ªsu…
));

635 
wpos
 = 
ku
.
uio_off£t
;

637 i‡(
ku
.
uio_ªsid
 > 0) {

638 
	`k¥ötf
("Warning: short write\n");

642 
	`vfs_˛o£
(
wv
);

643 
	`vfs_˛o£
(
rv
);

646 
	}
}

	@test/malloctest.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<thªad.h
>

36 
	~<synch.h
>

37 
	~<ã°.h
>

50 
	#NTRIES
 1200

	)

51 
	#ITEMSIZE
 997

	)

52 
	#NTHREADS
 8

	)

56 
	$mÆlo˘hªad
(*
sm
, 
num
)

58 
£m≠h‹e
 *
£m
 = 
sm
;

59 *
±r
;

60 *
ﬁd±r
=
NULL
;

61 *
ﬁd±r2
=
NULL
;

62 
i
;

64 
i
=0; i<
NTRIES
; i++) {

65 
±r
 = 
	`kmÆloc
(
ITEMSIZE
);

66 i‡(
±r
==
NULL
) {

67 i‡(
£m
) {

68 
	`k¥ötf
("thread %lu: kmallocÑeturned NULL\n",

69 
num
);

70 
	`V
(
£m
);

73 
	`k¥ötf
("kmallocÑeturnedÇull;Åest failed.\n");

76 i‡(
ﬁd±r2
) {

77 
	`k‰ì
(
ﬁd±r2
);

79 
ﬁd±r2
 = 
ﬁd±r
;

80 
ﬁd±r
 = 
±r
;

82 i‡(
ﬁd±r2
) {

83 
	`k‰ì
(
ﬁd±r2
);

85 i‡(
ﬁd±r
) {

86 
	`k‰ì
(
ﬁd±r
);

88 i‡(
£m
) {

89 
	`V
(
£m
);

91 
	}
}

94 
	$mÆlo˘e°
(
«rgs
, **
¨gs
)

96 ()
«rgs
;

97 ()
¨gs
;

99 
	`k¥ötf
("Starting kmallocÅest...\n");

100 
	`mÆlo˘hªad
(
NULL
, 0);

101 
	`k¥ötf
("kmallocÅest done\n");

104 
	}
}

107 
	$mÆloc°ªss
(
«rgs
, **
¨gs
)

109 
£m≠h‹e
 *
£m
;

110 
i
, 
ªsu…
;

112 ()
«rgs
;

113 ()
¨gs
;

115 
£m
 = 
	`£m_¸óã
("mallocstress", 0);

116 i‡(
£m
 =
NULL
) {

117 
	`∑nic
("mallocstress: sem_create failed\n");

120 
	`k¥ötf
("Starting kmalloc stressÅest...\n");

122 
i
=0; i<
NTHREADS
; i++) {

123 
ªsu…
 = 
	`thªad_f‹k
("mÆloc°ªss", 
NULL
,

124 
mÆlo˘hªad
, 
£m
, 
i
);

125 i‡(
ªsu…
) {

126 
	`∑nic
("mallocstress:Åhread_fork failed: %s\n",

127 
	`°ªº‹
(
ªsu…
));

131 
i
=0; i<
NTHREADS
; i++) {

132 
	`P
(
£m
);

135 
	`£m_de°roy
(
£m
);

136 
	`k¥ötf
("kmalloc stressÅest done\n");

139 
	}
}

	@test/nettest.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<ã°.h
>

38 
	$√âe°
(
«rgs
, **
¨gs
)

40 ()
«rgs
;

41 ()
¨gs
;

42 
	`k¥ötf
("NoÇetwork supportávailable\n");

44 
	}
}

	@test/synchtest.c

34 
	~<ty≥s.h
>

35 
	~<lib.h
>

36 
	~<˛ock.h
>

37 
	~<thªad.h
>

38 
	~<synch.h
>

39 
	~<ã°.h
>

41 
	#NSEMLOOPS
 63

	)

42 
	#NLOCKLOOPS
 120

	)

43 
	#NCVLOOPS
 5

	)

44 
	#NTHREADS
 32

	)

46 vﬁ©ûê
	gã°vÆ1
;

47 vﬁ©ûê
	gã°vÆ2
;

48 vﬁ©ûê
	gã°vÆ3
;

49 #ifde‡
UW


50 
£m≠h‹e
 *
	gã°£m
 = 0;

51 
lock
 *
	gã°lock
 = 0;

52 
cv
 *
	gã°cv
 = 0;

53 
£m≠h‹e
 *
	gd⁄e£m
 = 0;

55 
£m≠h‹e
 *
	gã°£m
;

56 
lock
 *
	gã°lock
;

57 
cv
 *
	gã°cv
;

58 
£m≠h‹e
 *
	gd⁄e£m
;

61 #ifde‡
UW


64 
	$˛ónôems
()

66 
	`k¥ötf
("cleanitems: Destroying sems,Üocks,ánd cvs\n");

67 
	`£m_de°roy
(
ã°£m
);

68 
	`lock_de°roy
(
ã°lock
);

69 
	`cv_de°roy
(
ã°cv
);

70 
	`£m_de°roy
(
d⁄e£m
);

71 
	}
}

76 
	$öôôems
()

78 i‡(
ã°£m
==
NULL
) {

79 
ã°£m
 = 
	`£m_¸óã
("testsem", 2);

80 i‡(
ã°£m
 =
NULL
) {

81 
	`∑nic
("synchtest: sem_create failed\n");

84 i‡(
ã°lock
==
NULL
) {

85 
ã°lock
 = 
	`lock_¸óã
("testlock");

86 i‡(
ã°lock
 =
NULL
) {

87 
	`∑nic
("synchtest:Üock_create failed\n");

90 i‡(
ã°cv
==
NULL
) {

91 #ifde‡
UW


92 
ã°cv
 = 
	`cv_¸óã
("testcv");

94 
ã°cv
 = 
	`cv_¸óã
("testlock");

96 i‡(
ã°cv
 =
NULL
) {

97 
	`∑nic
("synchtest: cv_create failed\n");

100 i‡(
d⁄e£m
==
NULL
) {

101 
d⁄e£m
 = 
	`£m_¸óã
("donesem", 0);

102 i‡(
d⁄e£m
 =
NULL
) {

103 
	`∑nic
("synchtest: sem_create failed\n");

106 
	}
}

110 
	$£mã°thªad
(*
junk
, 
num
)

112 
i
;

113 ()
junk
;

118 
	`P
(
ã°£m
);

119 
	`k¥ötf
("Thªad %2lu: ", 
num
);

120 
i
=0; i<
NSEMLOOPS
; i++) {

121 
	`k¥ötf
("%c", ()
num
+64);

123 
	`k¥ötf
("\n");

124 
	`V
(
d⁄e£m
);

125 #ifde‡
UW


126 
	`thªad_exô
();

128 
	}
}

131 
	$£mã°
(
«rgs
, **
¨gs
)

133 
i
, 
ªsu…
;

135 ()
«rgs
;

136 ()
¨gs
;

138 
	`öôôems
();

139 
	`k¥ötf
("Starting semaphoreÅest...\n");

140 
	`k¥ötf
("IfÅhis hangs, it's broken: ");

141 
	`P
(
ã°£m
);

142 
	`P
(
ã°£m
);

143 
	`k¥ötf
("ok\n");

145 
i
=0; i<
NTHREADS
; i++) {

146 
ªsu…
 = 
	`thªad_f‹k
("£mã°", 
NULL
, 
£mã°thªad
, NULL, 
i
);

147 i‡(
ªsu…
) {

148 
	`∑nic
("semtest:Åhread_fork failed: %s\n",

149 
	`°ªº‹
(
ªsu…
));

153 
i
=0; i<
NTHREADS
; i++) {

154 
	`V
(
ã°£m
);

155 
	`P
(
d⁄e£m
);

159 
	`V
(
ã°£m
);

160 
	`V
(
ã°£m
);

162 #ifde‡
UW


163 
	`˛ónôems
();

165 
	`k¥ötf
("SemaphoreÅest done.\n");

167 
	}
}

171 
	$Áû
(
num
, c⁄° *
msg
)

173 
	`k¥ötf
("thªad %lu: Mism©ch o¿%s\n", 
num
, 
msg
);

174 
	`k¥ötf
("Test failed\n");

176 
	`lock_ªÀa£
(
ã°lock
);

178 
	`V
(
d⁄e£m
);

179 
	`thªad_exô
();

180 
	}
}

184 
	$lockã°thªad
(*
junk
, 
num
)

186 
i
;

187 ()
junk
;

189 
i
=0; i<
NLOCKLOOPS
; i++) {

190 
	`lock_acquúe
(
ã°lock
);

191 
ã°vÆ1
 = 
num
;

192 
ã°vÆ2
 = 
num
*num;

193 
ã°vÆ3
 = 
num
%3;

195 i‡(
ã°vÆ2
 !
ã°vÆ1
*testval1) {

196 
	`Áû
(
num
, "testval2/testval1");

199 i‡(
ã°vÆ2
%3 !(
ã°vÆ3
*testval3)%3) {

200 
	`Áû
(
num
, "testval2/testval3");

203 i‡(
ã°vÆ3
 !
ã°vÆ1
%3) {

204 
	`Áû
(
num
, "testval3/testval1");

207 i‡(
ã°vÆ1
 !
num
) {

208 
	`Áû
(
num
, "testval1/num");

211 i‡(
ã°vÆ2
 !
num
*num) {

212 
	`Áû
(
num
, "testval2/num");

215 i‡(
ã°vÆ3
 !
num
%3) {

216 
	`Áû
(
num
, "testval3/num");

219 
	`lock_ªÀa£
(
ã°lock
);

221 
	`V
(
d⁄e£m
);

222 #ifde‡
UW


223 
	`thªad_exô
();

225 
	}
}

229 
	$lockã°
(
«rgs
, **
¨gs
)

231 
i
, 
ªsu…
;

233 ()
«rgs
;

234 ()
¨gs
;

236 
	`öôôems
();

237 
	`k¥ötf
("StartingÜockÅest...\n");

239 
i
=0; i<
NTHREADS
; i++) {

240 
ªsu…
 = 
	`thªad_f‹k
("synchã°", 
NULL
, 
lockã°thªad
,

241 
NULL
, 
i
);

242 i‡(
ªsu…
) {

243 
	`∑nic
("locktest:Åhread_fork failed: %s\n",

244 
	`°ªº‹
(
ªsu…
));

247 
i
=0; i<
NTHREADS
; i++) {

248 
	`P
(
d⁄e£m
);

251 #ifde‡
UW


252 
	`˛ónôems
();

254 
	`k¥ötf
("LockÅest done.\n");

257 
	}
}

261 
	$cvã°thªad
(*
junk
, 
num
)

263 
i
;

264 vﬁ©ûê
j
;

265 
time_t
 
£cs1
, 
£cs2
;

266 
uöt32_t
 
n£cs1
, 
n£cs2
;

268 ()
junk
;

270 
i
=0; i<
NCVLOOPS
; i++) {

271 
	`lock_acquúe
(
ã°lock
);

272 
ã°vÆ1
 !
num
) {

273 
	`gëtime
(&
£cs1
, &
n£cs1
);

274 
	`cv_waô
(
ã°cv
, 
ã°lock
);

275 
	`gëtime
(&
£cs2
, &
n£cs2
);

277 i‡(
n£cs2
 < 
n£cs1
) {

278 
£cs2
--;

279 
n£cs2
 += 1000000000;

282 
n£cs2
 -
n£cs1
;

283 
£cs2
 -
£cs1
;

286 i‡(
£cs2
==0 && 
n£cs2
 < 40*2000) {

287 
	`k¥ötf
("cv_waôÅook o∆y %uÇs\n", 
n£cs2
);

288 
	`k¥ötf
("That'sÅoo fast... you must be "

290 
	`V
(
d⁄e£m
);

291 
	`thªad_exô
();

295 
	`k¥ötf
("Thªad %lu\n", 
num
);

296 
ã°vÆ1
 = (ã°vÆ1 + 
NTHREADS
 - 1)%NTHREADS;

302 
j
=0; j<3000; j++);

304 
	`cv_brﬂdˇ°
(
ã°cv
, 
ã°lock
);

305 
	`lock_ªÀa£
(
ã°lock
);

307 
	`V
(
d⁄e£m
);

308 #ifde‡
UW


309 
	`thªad_exô
();

311 
	}
}

314 
	$cvã°
(
«rgs
, **
¨gs
)

317 
i
, 
ªsu…
;

319 ()
«rgs
;

320 ()
¨gs
;

322 
	`öôôems
();

323 
	`k¥ötf
("Starting CVÅest...\n");

324 #ifde‡
UW


325 
	`k¥ötf
("%dÅhªad†shouldÖröàouàöÑevî£ ordî %dÅimes.\n", 
NTHREADS
, 
NCVLOOPS
);

327 
	`k¥ötf
("Threads shouldÖrint out inÑeverse order.\n");

330 
ã°vÆ1
 = 
NTHREADS
-1;

332 
i
=0; i<
NTHREADS
; i++) {

333 
ªsu…
 = 
	`thªad_f‹k
("synchã°", 
NULL
, 
cvã°thªad
, NULL, 
i
);

334 i‡(
ªsu…
) {

335 
	`∑nic
("cvtest:Åhread_fork failed: %s\n",

336 
	`°ªº‹
(
ªsu…
));

339 
i
=0; i<
NTHREADS
; i++) {

340 
	`P
(
d⁄e£m
);

343 #ifde‡
UW


344 
	`˛ónôems
();

346 
	`k¥ötf
("CVÅest done\n");

349 
	}
}

	@test/threadtest.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<thªad.h
>

36 
	~<synch.h
>

37 
	~<ã°.h
>

39 
	#NTHREADS
 8

	)

41 
£m≠h‹e
 *
	gt£m
 = 
NULL
;

45 
	$öô_£m
()

47 i‡(
t£m
==
NULL
) {

48 
t£m
 = 
	`£m_¸óã
("tsem", 0);

49 i‡(
t£m
 =
NULL
) {

50 
	`∑nic
("threadtest: sem_create failed\n");

53 
	}
}

57 
	$loudthªad
(*
junk
, 
num
)

59 
ch
 = '0' + 
num
;

60 
i
;

62 ()
junk
;

64 
i
=0; i<120; i++) {

65 
	`putch
(
ch
);

67 
	`V
(
t£m
);

68 
	}
}

82 
	$quõâhªad
(*
junk
, 
num
)

84 
ch
 = '0' + 
num
;

85 vﬁ©ûê
i
;

87 ()
junk
;

89 
	`putch
(
ch
);

90 
i
=0; i<200000; i++);

91 
	`putch
(
ch
);

93 
	`V
(
t£m
);

94 
	}
}

98 
	$ru¡hªads
(
dﬁoud
)

100 
«me
[16];

101 
i
, 
ªsu…
;

103 
i
=0; i<
NTHREADS
; i++) {

104 
	`¢¥ötf
(
«me
, “ame), "thªadã°%d", 
i
);

105 
ªsu…
 = 
	`thªad_f‹k
(
«me
, 
NULL
,

106 
dﬁoud
 ? 
loudthªad
 : 
quõâhªad
,

107 
NULL
, 
i
);

108 i‡(
ªsu…
) {

109 
	`∑nic
("threadtest:Åhread_fork failed %s)\n",

110 
	`°ªº‹
(
ªsu…
));

114 
i
=0; i<
NTHREADS
; i++) {

115 
	`P
(
t£m
);

117 
	}
}

121 
	$thªadã°
(
«rgs
, **
¨gs
)

123 ()
«rgs
;

124 ()
¨gs
;

126 
	`öô_£m
();

127 
	`k¥ötf
("StartingÅhreadÅest...\n");

128 
	`ru¡hªads
(1);

129 
	`k¥ötf
("\nThreadÅest done.\n");

132 
	}
}

135 
	$thªadã°2
(
«rgs
, **
¨gs
)

137 ()
«rgs
;

138 ()
¨gs
;

140 
	`öô_£m
();

141 
	`k¥ötf
("StartingÅhreadÅest 2...\n");

142 
	`ru¡hªads
(0);

143 
	`k¥ötf
("\nThreadÅest 2 done.\n");

146 
	}
}

	@test/tt3.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<wch™.h
>

36 
	~<thªad.h
>

37 
	~<synch.h
>

38 
	~<ã°.h
>

40 
	~"›t-synch¥obs.h
"

44 #i‡
OPT_SYNCHPROBS


45 
	#DIM
 10

	)

47 
	#DIM
 70

	)

51 
	#SLEEPALOT_PRINTS
 20

	)

52 
	#SLEEPALOT_ITERS
 4

	)

54 
	#WAKER_WAKES
 100

	)

56 
	#COMPUTE_ITERS
 10

	)

58 
	#NWAITCHANS
 12

	)

59 
wch™
 *
	gwaôch™s
[
NWAITCHANS
];

61 vﬁ©ûê
	gwakîd⁄e
;

62 
£m≠h‹e
 *
	gwakî£m
;

63 
£m≠h‹e
 *
	gd⁄e£m
;

67 
	$£tup
()

69 
tmp
[16];

70 
i
;

72 i‡(
wakî£m
 =
NULL
) {

73 
wakî£m
 = 
	`£m_¸óã
("wakersem", 1);

74 
d⁄e£m
 = 
	`£m_¸óã
("donesem", 0);

75 
i
=0; i<
NWAITCHANS
; i++) {

76 
	`¢¥ötf
(
tmp
, —mp), "wc%d", 
i
);

77 
waôch™s
[
i
] = 
	`wch™_¸óã
(
	`k°rdup
(
tmp
));

80 
wakîd⁄e
 = 0;

81 
	}
}

85 
	$¶ì∑lŸ_thªad
(*
junk
, 
num
)

87 
i
, 
j
;

89 ()
junk
;

91 
i
=0; i<
SLEEPALOT_PRINTS
; i++) {

92 
j
=0; j<
SLEEPALOT_ITERS
; j++) {

93 
wch™
 *
w
;

95 
w
 = 
waôch™s
[
	`øndom
()%
NWAITCHANS
];

96 
	`wch™_lock
(
w
);

97 
	`wch™_¶ìp
(
w
);

99 
	`k¥ötf
("[%lu]", 
num
);

101 
	`V
(
d⁄e£m
);

102 
	}
}

106 
	$wakî_thªad
(*
junk1
, 
junk2
)

108 
i
, 
d⁄e
;

110 ()
junk1
;

111 ()
junk2
;

114 
	`P
(
wakî£m
);

115 
d⁄e
 = 
wakîd⁄e
;

116 
	`V
(
wakî£m
);

117 i‡(
d⁄e
) {

121 
i
=0; i<
WAKER_WAKES
; i++) {

122 
wch™
 *
w
;

124 
w
 = 
waôch™s
[
	`øndom
()%
NWAITCHANS
];

125 
	`wch™_wakóŒ
(
w
);

127 
	`thªad_yõld
();

130 
	`V
(
d⁄e£m
);

131 
	}
}

135 
	$make_¶ì∑lŸs
(
howm™y
)

137 
«me
[16];

138 
i
, 
ªsu…
;

140 
i
=0; i<
howm™y
; i++) {

141 
	`¢¥ötf
(
«me
, “ame), "¶ì∑lŸ%d", 
i
);

142 
ªsu…
 = 
	`thªad_f‹k
(
«me
, 
NULL
, 
¶ì∑lŸ_thªad
, NULL, 
i
);

143 i‡(
ªsu…
) {

144 
	`∑nic
("thªad_f‹k faûed: %s\n", 
	`°ªº‹
(
ªsu…
));

147 
ªsu…
 = 
	`thªad_f‹k
("wakî", 
NULL
, 
wakî_thªad
, NULL, 0);

148 i‡(
ªsu…
) {

149 
	`∑nic
("thªad_f‹k faûed: %s\n", 
	`°ªº‹
(
ªsu…
));

151 
	}
}

155 
	$compuã_thªad
(*
junk1
, 
num
)

157 
	sm©rix
 {

158 
m
[
DIM
][DIM];

160 
m©rix
 *
m1
, *
m2
, *
m3
;

161 
tŸ
;

162 
i
, 
j
, 
k
, 
m
;

163 
uöt32_t
 
ønd
;

165 ()
junk1
;

167 
m1
 = 
	`kmÆloc
((
m©rix
));

168 
	`KASSERT
(
m1
 !
NULL
);

169 
m2
 = 
	`kmÆloc
((
m©rix
));

170 
	`KASSERT
(
m2
 !
NULL
);

171 
m3
 = 
	`kmÆloc
((
m©rix
));

172 
	`KASSERT
(
m3
 !
NULL
);

174 
m
=0; m<
COMPUTE_ITERS
; m++) {

176 
i
=0; i<
DIM
; i++) {

177 
j
=0; j<
DIM
; j++) {

178 
ønd
 = 
	`øndom
();

179 
m1
->
m
[
i
][
j
] = 
ønd
 >> 16;

180 
m2
->
m
[
i
][
j
] = 
ønd
 & 0xffff;

184 
i
=0; i<
DIM
; i++) {

185 
j
=0; j<
DIM
; j++) {

186 
tŸ
 = 0;

187 
k
=0; k<
DIM
; k++) {

188 
tŸ
 +
m1
->
m
[
i
][
k
] * 
m2
->m[k][
j
];

190 
m3
->
m
[
i
][
j
] = 
tŸ
;

194 
tŸ
 = 0;

195 
i
=0; i<
DIM
; i++) {

196 
tŸ
 +
m3
->
m
[
i
][i];

199 
	`k¥ötf
("{%lu: %u}", 
num
, (Ë
tŸ
);

200 
	`thªad_yõld
();

203 
	`k‰ì
(
m1
);

204 
	`k‰ì
(
m2
);

205 
	`k‰ì
(
m3
);

207 
	`V
(
d⁄e£m
);

208 
	}
}

212 
	$make_compuãs
(
howm™y
)

214 
«me
[16];

215 
i
, 
ªsu…
;

217 
i
=0; i<
howm™y
; i++) {

218 
	`¢¥ötf
(
«me
, “ame), "compuã%d", 
i
);

219 
ªsu…
 = 
	`thªad_f‹k
(
«me
, 
NULL
, 
compuã_thªad
, NULL, 
i
);

220 i‡(
ªsu…
) {

221 
	`∑nic
("thªad_f‹k faûed: %s\n", 
	`°ªº‹
(
ªsu…
));

224 
	}
}

228 
	$föish
(
howm™ytŸÆ
)

230 
i
;

231 
i
=0; i<
howm™ytŸÆ
; i++) {

232 
	`P
(
d⁄e£m
);

234 
	`P
(
wakî£m
);

235 
wakîd⁄e
 = 1;

236 
	`V
(
wakî£m
);

237 
	`P
(
d⁄e£m
);

238 
	}
}

242 
	$ru¡e°3
(
n¶ìps
, 
ncompuãs
)

244 
	`£tup
();

245 
	`k¥ötf
("StartingÅhreadÅest 3 (%d [sleepalots], %d {computes}, "

247 
n¶ìps
, 
ncompuãs
);

248 
	`make_¶ì∑lŸs
(
n¶ìps
);

249 
	`make_compuãs
(
ncompuãs
);

250 
	`föish
(
n¶ìps
+
ncompuãs
);

251 
	`k¥ötf
("\nThreadÅest 3 done\n");

252 
	}
}

255 
	$thªadã°3
(
«rgs
, **
¨gs
)

257 i‡(
«rgs
==1) {

258 
	`ru¡e°3
(5, 2);

260 i‡(
«rgs
==3) {

261 
	`ru¡e°3
(
	`©oi
(
¨gs
[1]),átoi(args[2]));

264 
	`k¥ötf
("Usage:Åt3 [sleepthreads computethreads]\n");

268 
	}
}

	@test/uw-tests.c

9 
	~<ty≥s.h
>

10 
	~<synch.h
>

11 
	~<thªad.h
>

12 
	~<ã°.h
>

13 
	~<uw-vm°©s.h
>

15 
	#NAME_LEN
 (30)

	)

17 
lock
 *
	gã°lock
 = 
NULL
;

18 
£m≠h‹e
 *
	gd⁄e£m
 = 
NULL
;

20 
	#NTESTLOOPS
 (5000Ë

	)

21 
	#NTESTTHREADS
 (8)

	)

22 
	#START_VALUE
 (0)

	)

23 vﬁ©ûê
	gã°_vÆue
 = 
START_VALUE
;

24 
	gu£_locks
 = 1;

28 
	$˛ónôems
()

30 
	`k¥ötf
("cleanitems: Destroying semsándÜocks\n");

31 
	`lock_de°roy
(
ã°lock
);

32 
ã°lock
 = 
NULL
;

33 
	`£m_de°roy
(
d⁄e£m
);

34 
d⁄e£m
 = 
NULL
;

35 
ã°_vÆue
 = 
START_VALUE
;

36 
	}
}

40 
	$öôôems
()

42 i‡(
ã°lock
==
NULL
) {

43 
ã°lock
 = 
	`lock_¸óã
("testlock");

44 i‡(
ã°lock
 =
NULL
) {

45 
	`∑nic
("synchtest:Üock_create failed\n");

49 i‡(
d⁄e£m
==
NULL
) {

50 
d⁄e£m
 = 
	`£m_¸óã
("donesem", 0);

51 i‡(
d⁄e£m
 =
NULL
) {

52 
	`∑nic
("synchtest: sem_create failed\n");

55 
	}
}

60 
	$add_thªad
(*
junk
, 
num
)

62 
i
;

63 (Ë
num
;

64 (Ë
junk
;

66 
i
=0; i<
NTESTLOOPS
; i++) {

67 i‡(
u£_locks
) {

68 
	`lock_acquúe
(
ã°lock
);

75 
ã°_vÆue
 =Åest_value + 1;

76 
ã°_vÆue
 =Åest_value + 1;

77 
ã°_vÆue
 =Åest_value + 1;

78 
ã°_vÆue
 =Åest_value + 1;

79 
ã°_vÆue
 =Åest_value + 1;

81 i‡(
u£_locks
) {

82 
	`lock_ªÀa£
(
ã°lock
);

86 
	`V
(
d⁄e£m
);

87 
	`thªad_exô
();

88 
	}
}

93 
	$sub_thªad
(*
junk
, 
num
)

95 
i
;

96 ()
num
;

97 ()
junk
;

99 
i
=0; i<
NTESTLOOPS
; i++) {

100 i‡(
u£_locks
) {

101 
	`lock_acquúe
(
ã°lock
);

108 
ã°_vÆue
 =Åest_value - 1;

109 
ã°_vÆue
 =Åest_value - 1;

110 
ã°_vÆue
 =Åest_value - 1;

111 
ã°_vÆue
 =Åest_value - 1;

112 
ã°_vÆue
 =Åest_value - 1;

114 i‡(
u£_locks
) {

115 
	`lock_ªÀa£
(
ã°lock
);

119 
	`V
(
d⁄e£m
);

120 
	`thªad_exô
();

121 
	}
}

124 
	$uwlockã°1
(
«rgs
, **
¨gs
)

126 
i
, 
ªsu…
;

127 
«me
[
NAME_LEN
];

129 ()
«rgs
;

130 ()
¨gs
;

132 
	`öôôems
();

133 
	`k¥ötf
("Starting uwlocktest1...\n");

135 
i
=0; i<
NTESTTHREADS
; i++) {

136 
	`¢¥ötf
(
«me
, 
NAME_LEN
, "add_thªad %d", 
i
);

137 
ªsu…
 = 
	`thªad_f‹k
(
«me
, 
NULL
, 
add_thªad
, NULL, 
i
);

138 i‡(
ªsu…
) {

139 
	`∑nic
("uwlocktest1:Åhread_fork failed: %s\n",

140 
	`°ªº‹
(
ªsu…
));

144 
i
=0; i<
NTESTTHREADS
; i++) {

145 
	`¢¥ötf
(
«me
, 
NAME_LEN
, "sub_thªad %d", 
i
);

146 
ªsu…
 = 
	`thªad_f‹k
(
«me
, 
NULL
, 
sub_thªad
, NULL, 
i
);

147 i‡(
ªsu…
) {

148 
	`∑nic
("uwlocktest1:Åhread_fork failed: %s\n",

149 
	`°ªº‹
(
ªsu…
));

153 
i
=0; i<
NTESTTHREADS
*2; i++) {

154 
	`P
(
d⁄e£m
);

157 
	`k¥ötf
("vÆuêo‡ã°_vÆuê%d should bê%d\n", 
ã°_vÆue
, 
START_VALUE
);

158 i‡(
ã°_vÆue
 =
START_VALUE
) {

159 
	`k¥ötf
("TEST SUCCEEDED\n");

161 
	`k¥ötf
("TEST FAILED\n");

163 
	`KASSERT
(
ã°_vÆue
 =
START_VALUE
);

165 
	`˛ónôems
();

166 
	`k¥ötf
("uwlocktest1 done.\n");

169 
	}
}

176 
	$vm°©s_thªad
(*
junk
, 
num
)

178 
i
;

179 
j
;

180 ()
num
;

181 ()
junk
;

183 
i
=0; i<
NTESTLOOPS
; i++) {

184 
j
=0; j<
VMSTAT_COUNT
; j++) {

188 
j
) {

190 
VMSTAT_TLB_FAULT
:

191 
	`vm°©s_öc
(
j
);

192 
	`vm°©s_öc
(
j
);

195 
VMSTAT_TLB_FAULT_FREE
:

196 
	`vm°©s_öc
(
j
);

199 
VMSTAT_TLB_FAULT_REPLACE
:

200 
	`vm°©s_öc
(
j
);

204 
VMSTAT_TLB_INVALIDATE
:

205 i‡(
i
 % 2 == 0) {

206 
	`vm°©s_öc
(
j
);

210 
VMSTAT_TLB_RELOAD
:

211 
	`vm°©s_öc
(
j
);

215 
VMSTAT_PAGE_FAULT_ZERO
:

216 i‡(
i
 % 2 == 0) {

217 
	`vm°©s_öc
(
j
);

222 
VMSTAT_PAGE_FAULT_DISK
:

223 i‡(
i
 % 2 == 0) {

224 
	`vm°©s_öc
(
j
);

228 
VMSTAT_ELF_FILE_READ
:

229 i‡(
i
 % 4 == 0) {

230 
	`vm°©s_öc
(
j
);

234 
VMSTAT_SWAP_FILE_READ
:

235 i‡(
i
 % 4 == 0) {

236 
	`vm°©s_öc
(
j
);

240 
VMSTAT_SWAP_FILE_WRITE
:

241 i‡(
i
 % 8 == 0) {

242 
	`vm°©s_öc
(
j
);

247 
	`k¥ötf
("Unknow¿°© %d\n", 
j
);

253 
	`V
(
d⁄e£m
);

254 
	`thªad_exô
();

255 
	}
}

258 
	$uwvm°©°e°
(
«rgs
, **
¨gs
)

260 
i
, 
ªsu…
;

261 
«me
[
NAME_LEN
];

263 ()
«rgs
;

264 ()
¨gs
;

266 
	`öôôems
();

267 
	`k¥ötf
("Starting uwvmstatstest...\n");

269 
	`k¥ötf
("Initializing vmstats\n");

270 
	`vm°©s_öô
();

272 
i
=0; i<
NTESTTHREADS
; i++) {

273 
	`¢¥ötf
(
«me
, 
NAME_LEN
, "vm°©°hªad %d", 
i
);

274 
ªsu…
 = 
	`thªad_f‹k
(
«me
, 
NULL
, 
vm°©s_thªad
, NULL, 
i
);

275 i‡(
ªsu…
) {

276 
	`∑nic
("uwvmstatstest:Åhread_fork failed: %s\n",

277 
	`°ªº‹
(
ªsu…
));

281 
i
=0; i<
NTESTTHREADS
; i++) {

282 
	`P
(
d⁄e£m
);

285 
	`vm°©s_¥öt
();

287 
	`˛ónôems
();

288 
	`k¥ötf
("uwvmstatstest done.\n");

291 
	}
}

	@thread/clock.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<˝u.h
>

33 
	~<wch™.h
>

34 
	~<˛ock.h
>

35 
	~<thªad.h
>

36 
	~<cuºít.h
>

53 
	#SCHEDULE_HARDCLOCKS
 4

	)

54 
	#MIGRATE_HARDCLOCKS
 16

	)

59 
wch™
 *
	glbﬁt
;

65 
	$h¨d˛ock_boŸ°øp
()

67 
lbﬁt
 = 
	`wch™_¸óã
("lbolt");

68 i‡(
lbﬁt
 =
NULL
) {

69 
	`∑nic
("Couldn't createÜbolt\n");

71 
	}
}

78 
	$timî˛ock
()

81 
	`wch™_wakóŒ
(
lbﬁt
);

82 
	}
}

89 
	$h¨d˛ock
()

95 
cur˝u
->
c_h¨d˛ocks
++;

96 i‡((
cur˝u
->
c_h¨d˛ocks
 % 
SCHEDULE_HARDCLOCKS
) == 0) {

97 
	`scheduÀ
();

99 i‡((
cur˝u
->
c_h¨d˛ocks
 % 
MIGRATE_HARDCLOCKS
) == 0) {

100 
	`thªad_c⁄sidî_migøti⁄
();

102 
	`thªad_yõld
();

103 
	}
}

109 
	$˛ock¶ìp
(
num_£cs
)

111 
num_£cs
 > 0) {

112 
	`wch™_lock
(
lbﬁt
);

113 
	`wch™_¶ìp
(
lbﬁt
);

114 
num_£cs
--;

116 
	}
}

	@thread/spinlock.c

31 
	#SPINLOCK_INLINE


	)

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<˝u.h
>

36 
	~<•l.h
>

37 
	~<•ölock.h
>

38 
	~<cuºít.h
>

49 
	$•ölock_öô
(
•ölock
 *
lk
)

51 
	`•ölock_d©a_£t
(&
lk
->
lk_lock
, 0);

52 
lk
->
lk_hﬁdî
 = 
NULL
;

53 
	}
}

59 
	$•ölock_˛ónup
(
•ölock
 *
lk
)

61 
	`KASSERT
(
lk
->
lk_hﬁdî
 =
NULL
);

62 
	`KASSERT
(
	`•ölock_d©a_gë
(&
lk
->
lk_lock
) == 0);

63 
	}
}

73 
	$•ölock_acquúe
(
•ölock
 *
lk
)

75 
˝u
 *
my˝u
;

77 
	`•Ãai£
(
IPL_NONE
, 
IPL_HIGH
);

80 i‡(
	`CURCPU_EXISTS
()) {

81 
my˝u
 = 
cur˝u
->
c_£lf
;

82 i‡(
lk
->
lk_hﬁdî
 =
my˝u
) {

83 
	`∑nic
("Dódlock o¿•ölock %p\n", 
lk
);

87 
my˝u
 = 
NULL
;

101 i‡(
	`•ölock_d©a_gë
(&
lk
->
lk_lock
) != 0) {

104 i‡(
	`•ölock_d©a_ã°™d£t
(&
lk
->
lk_lock
) != 0) {

110 
lk
->
lk_hﬁdî
 = 
my˝u
;

111 
	}
}

117 
	$•ölock_ªÀa£
(
•ölock
 *
lk
)

120 i‡(
	`CURCPU_EXISTS
()) {

121 
	`KASSERT
(
lk
->
lk_hﬁdî
 =
cur˝u
->
c_£lf
);

124 
lk
->
lk_hﬁdî
 = 
NULL
;

125 
	`•ölock_d©a_£t
(&
lk
->
lk_lock
, 0);

126 
	`•Œowî
(
IPL_HIGH
, 
IPL_NONE
);

127 
	}
}

132 
boﬁ


133 
	$•ölock_do_i_hﬁd
(
•ölock
 *
lk
)

135 i‡(!
	`CURCPU_EXISTS
()) {

136  
åue
;

140  (
lk
->
lk_hﬁdî
 =
cur˝u
->
c_£lf
);

141 
	}
}

	@thread/spl.c

31 
	#SPL_INLINE


	)

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<˝u.h
>

36 
	~<•l.h
>

37 
	~<thªad.h
>

38 
	~<cuºít.h
>

87 
	$•Ãai£
(
ﬁd•l
, 
√w•l
)

89 
thªad
 *
cur
 = 
cuπhªad
;

92 
	`KASSERT
(
ﬁd•l
 =
IPL_NONE
);

93 
	`KASSERT
(
√w•l
 =
IPL_HIGH
);

95 i‡(!
	`CURCPU_EXISTS
()) {

100 i‡(
cur
->
t_ùlhigh_cou¡
 == 0) {

101 
	`˝u_úqoff
();

103 
cur
->
t_ùlhigh_cou¡
++;

104 
	}
}

107 
	$•Œowî
(
ﬁd•l
, 
√w•l
)

109 
thªad
 *
cur
 = 
cuπhªad
;

112 
	`KASSERT
(
ﬁd•l
 =
IPL_HIGH
);

113 
	`KASSERT
(
√w•l
 =
IPL_NONE
);

115 i‡(!
	`CURCPU_EXISTS
()) {

120 
cur
->
t_ùlhigh_cou¡
--;

121 i‡(
cur
->
t_ùlhigh_cou¡
 == 0) {

122 
	`˝u_úq⁄
();

124 
	}
}

132 
	$•lx
(
•l
)

134 
thªad
 *
cur
 = 
cuπhªad
;

135 
ªt
;

137 i‡(
cur
->
t_cur•l
 < 
•l
) {

139 
	`•Ãai£
(
cur
->
t_cur•l
, 
•l
);

140 
ªt
 = 
cur
->
t_cur•l
;

141 
cur
->
t_cur•l
 = 
•l
;

143 i‡(
cur
->
t_cur•l
 > 
•l
) {

145 
ªt
 = 
cur
->
t_cur•l
;

146 
cur
->
t_cur•l
 = 
•l
;

147 
	`•Œowî
(
ªt
, 
•l
);

151 
ªt
 = 
•l
;

154  
ªt
;

155 
	}
}

	@thread/synch.c

35 
	~<ty≥s.h
>

36 
	~<lib.h
>

37 
	~<•ölock.h
>

38 
	~<wch™.h
>

39 
	~<thªad.h
>

40 
	~<cuºít.h
>

41 
	~<synch.h
>

47 
£m≠h‹e
 *

48 
	$£m_¸óã
(c⁄° *
«me
, 
öôül_cou¡
)

50 
£m≠h‹e
 *
£m
;

52 
	`KASSERT
(
öôül_cou¡
 >= 0);

54 
£m
 = 
	`kmÆloc
((
£m≠h‹e
));

55 i‡(
£m
 =
NULL
) {

56  
NULL
;

59 
£m
->
£m_«me
 = 
	`k°rdup
(
«me
);

60 i‡(
£m
->
£m_«me
 =
NULL
) {

61 
	`k‰ì
(
£m
);

62  
NULL
;

65 
£m
->
£m_wch™
 = 
	`wch™_¸óã
(£m->
£m_«me
);

66 i‡(
£m
->
£m_wch™
 =
NULL
) {

67 
	`k‰ì
(
£m
->
£m_«me
);

68 
	`k‰ì
(
£m
);

69  
NULL
;

72 
	`•ölock_öô
(&
£m
->
£m_lock
);

73 
£m
->
£m_cou¡
 = 
öôül_cou¡
;

75  
£m
;

76 
	}
}

79 
	$£m_de°roy
(
£m≠h‹e
 *
£m
)

81 
	`KASSERT
(
£m
 !
NULL
);

84 
	`•ölock_˛ónup
(&
£m
->
£m_lock
);

85 
	`wch™_de°roy
(
£m
->
£m_wch™
);

86 
	`k‰ì
(
£m
->
£m_«me
);

87 
	`k‰ì
(
£m
);

88 
	}
}

91 
	$P
(
£m≠h‹e
 *
£m
)

93 
	`KASSERT
(
£m
 !
NULL
);

101 
	`KASSERT
(
cuπhªad
->
t_ö_öãºu±
 =
Ál£
);

103 
	`•ölock_acquúe
(&
£m
->
£m_lock
);

104 
£m
->
£m_cou¡
 == 0) {

121 
	`wch™_lock
(
£m
->
£m_wch™
);

122 
	`•ölock_ªÀa£
(&
£m
->
£m_lock
);

123 
	`wch™_¶ìp
(
£m
->
£m_wch™
);

125 
	`•ölock_acquúe
(&
£m
->
£m_lock
);

127 
	`KASSERT
(
£m
->
£m_cou¡
 > 0);

128 
£m
->
£m_cou¡
--;

129 
	`•ölock_ªÀa£
(&
£m
->
£m_lock
);

130 
	}
}

133 
	$V
(
£m≠h‹e
 *
£m
)

135 
	`KASSERT
(
£m
 !
NULL
);

137 
	`•ölock_acquúe
(&
£m
->
£m_lock
);

139 
£m
->
£m_cou¡
++;

140 
	`KASSERT
(
£m
->
£m_cou¡
 > 0);

141 
	`wch™_wake⁄e
(
£m
->
£m_wch™
);

143 
	`•ölock_ªÀa£
(&
£m
->
£m_lock
);

144 
	}
}

150 
lock
 *

151 
	$lock_¸óã
(c⁄° *
«me
)

153 
lock
 *lock;

155 
lock
 = 
	`kmÆloc
((lock));

156 i‡(
lock
 =
NULL
) {

157  
NULL
;

160 
lock
->
lk_«me
 = 
	`k°rdup
(
«me
);

161 i‡(
lock
->
lk_«me
 =
NULL
) {

162 
	`k‰ì
(
lock
);

163  
NULL
;

168 
lock
->
lk_wch™
 = 
	`wch™_¸óã
÷ock->
lk_«me
);

169 i‡(
lock
->
lk_wch™
 =
NULL
) {

170 
	`k‰ì
(
lock
->
lk_«me
);

171 
	`k‰ì
(
lock
);

172  
NULL
;

175 
	`•ölock_öô
(&
lock
->
lk_lock
);

176 
lock
->
lk_thªad
 = 
NULL
;

177 
lock
->
lk_cou¡
 = 1;

181  
lock
;

182 
	}
}

185 
	$lock_de°roy
(
lock
 *lock)

187 
	`KASSERT
(
lock
 !
NULL
);

191 
	`•ölock_˛ónup
(&
lock
->
lk_lock
);

192 
	`wch™_de°roy
(
lock
->
lk_wch™
);

196 
	`k‰ì
(
lock
->
lk_«me
);

197 
	`k‰ì
(
lock
);

198 
	}
}

201 
	$lock_acquúe
(
lock
 *lock)

204 
	`KASSERT
(
lock
 !
NULL
);

205 
	`KASSERT
(
cuπhªad
->
t_ö_öãºu±
 =
Ál£
);

206 
	`KASSERT
(!
	`lock_do_i_hﬁd
(
lock
));

208 
	`•ölock_acquúe
(&
lock
->
lk_lock
);

210 
lock
->
lk_cou¡
 == 0){

211 
	`wch™_lock
(
lock
->
lk_wch™
);

212 
	`•ölock_ªÀa£
(&
lock
->
lk_lock
);

213 
	`wch™_¶ìp
(
lock
->
lk_wch™
);

214 
	`•ölock_acquúe
(&
lock
->
lk_lock
);

217 
	`KASSERT
(
lock
->
lk_cou¡
 == 1);

218 
lock
->
lk_thªad
 = 
cuπhªad
;

219 
lock
->
lk_cou¡
 --;

220 
	`•ölock_ªÀa£
(&
lock
->
lk_lock
);

224 
	}
}

227 
	$lock_ªÀa£
(
lock
 *lock)

230 
	`KASSERT
(
lock
 !
NULL
);

231 
	`KASSERT
(
	`lock_do_i_hﬁd
(
lock
));

233 
	`•ölock_acquúe
(&
lock
->
lk_lock
);

235 
lock
->
lk_cou¡
 ++;

236 
	`KASSERT
(
lock
->
lk_cou¡
 == 1);

237 
	`wch™_wake⁄e
(
lock
->
lk_wch™
);

239 
lock
->
lk_thªad
 = 
NULL
;

240 
	`•ölock_ªÀa£
(&
lock
->
lk_lock
);

244 
	}
}

246 
boﬁ


247 
	$lock_do_i_hﬁd
(
lock
 *lock)

250 
	`KASSERT
(
lock
 !
NULL
);

252 if(
lock
->
lk_thªad
 =
cuπhªad
){

253  
åue
;

256  
Ál£
;

263 
	}
}

270 
cv
 *

271 
	$cv_¸óã
(c⁄° *
«me
)

273 
cv
 *cv;

275 
cv
 = 
	`kmÆloc
((cv));

276 i‡(
cv
 =
NULL
) {

277  
NULL
;

280 
cv
->
cv_«me
 = 
	`k°rdup
(
«me
);

281 i‡(
cv
->
cv_«me
==
NULL
) {

282 
	`k‰ì
(
cv
);

283  
NULL
;

288 
cv
->
cv_wch™
 = 
	`wch™_¸óã
(cv->
cv_«me
);

289 i‡(
cv
->
cv_wch™
 =
NULL
) {

290 
	`k‰ì
(
cv
->
cv_«me
);

291 
	`k‰ì
(
cv
);

292  
NULL
;

296  
cv
;

297 
	}
}

300 
	$cv_de°roy
(
cv
 *cv)

302 
	`KASSERT
(
cv
 !
NULL
);

305 
	`wch™_de°roy
(
cv
->
cv_wch™
);

308 
	`k‰ì
(
cv
->
cv_«me
);

309 
	`k‰ì
(
cv
);

310 
	}
}

313 
	$cv_waô
(
cv
 *cv, 
lock
 *lock)

316 
	`KASSERT
(
cv
 !
NULL
);

317 
	`KASSERT
(
lock
 !
NULL
);

318 
	`KASSERT
(
	`lock_do_i_hﬁd
(
lock
));

320 
	`wch™_lock
(
cv
->
cv_wch™
);

321 
	`lock_ªÀa£
(
lock
);

322 
	`wch™_¶ìp
(
cv
->
cv_wch™
);

323 
	`lock_acquúe
(
lock
);

328 
	}
}

331 
	$cv_sig«l
(
cv
 *cv, 
lock
 *lock)

334 
	`KASSERT
(
cv
 !
NULL
);

335 
	`KASSERT
(
lock
 !
NULL
);

336 
	`KASSERT
(
	`lock_do_i_hﬁd
(
lock
));

338 
	`wch™_wake⁄e
(
cv
->
cv_wch™
);

343 
	}
}

346 
	$cv_brﬂdˇ°
(
cv
 *cv, 
lock
 *lock)

349 
	`KASSERT
(
cv
 !
NULL
);

350 
	`KASSERT
(
lock
 !
NULL
);

351 
	`KASSERT
(
	`lock_do_i_hﬁd
(
lock
));

353 
	`wch™_wakóŒ
(
cv
->
cv_wch™
);

358 
	}
}

	@thread/thread.c

34 
	#THREADINLINE


	)

36 
	~<ty≥s.h
>

37 
	~<kîn/î∫o.h
>

38 
	~<lib.h
>

39 
	~<¨øy.h
>

40 
	~<˝u.h
>

41 
	~<•l.h
>

42 
	~<•ölock.h
>

43 
	~<wch™.h
>

44 
	~<thªad.h
>

45 
	~<thªadli°.h
>

46 
	~<thªad¥iv©e.h
>

47 
	~<¥oc.h
>

48 
	~<cuºít.h
>

49 
	~<synch.h
>

50 
	~<addr•a˚.h
>

51 
	~<maöbus.h
>

52 
	~<vnode.h
>

54 
	~"›t-synch¥obs.h
"

58 
	#THREAD_STACK_MAGIC
 0xbØdf00d

	)

61 
	swch™
 {

62 c⁄° *
	mwc_«me
;

63 
thªadli°
 
	mwc_thªads
;

64 
•ölock
 
	mwc_lock
;

68 
DECLARRAY
(
˝u
);

69 
DEFARRAY
(
˝u
, );

70 
˝u¨øy
 
	gÆl˝us
;

73 
£m≠h‹e
 *
	g˝u_°¨tup_£m
;

84 
	$thªad_check°ack_öô
(
thªad
 *thread)

86 ((
uöt32_t
 *)
thªad
->
t_°ack
)[0] = 
THREAD_STACK_MAGIC
;

87 ((
uöt32_t
 *)
thªad
->
t_°ack
)[1] = 
THREAD_STACK_MAGIC
;

88 ((
uöt32_t
 *)
thªad
->
t_°ack
)[2] = 
THREAD_STACK_MAGIC
;

89 ((
uöt32_t
 *)
thªad
->
t_°ack
)[3] = 
THREAD_STACK_MAGIC
;

90 
	}
}

104 
	$thªad_check°ack
(
thªad
 *thread)

106 i‡(
thªad
->
t_°ack
 !
NULL
) {

107 
	`KASSERT
(((
uöt32_t
*)
thªad
->
t_°ack
)[0] =
THREAD_STACK_MAGIC
);

108 
	`KASSERT
(((
uöt32_t
*)
thªad
->
t_°ack
)[1] =
THREAD_STACK_MAGIC
);

109 
	`KASSERT
(((
uöt32_t
*)
thªad
->
t_°ack
)[2] =
THREAD_STACK_MAGIC
);

110 
	`KASSERT
(((
uöt32_t
*)
thªad
->
t_°ack
)[3] =
THREAD_STACK_MAGIC
);

112 
	}
}

119 
thªad
 *

120 
	$thªad_¸óã
(c⁄° *
«me
)

122 
thªad
 *thread;

124 
	`DEBUGASSERT
(
«me
 !
NULL
);

126 
thªad
 = 
	`kmÆloc
((*thread));

127 i‡(
thªad
 =
NULL
) {

128  
NULL
;

131 
thªad
->
t_«me
 = 
	`k°rdup
(
«me
);

132 i‡(
thªad
->
t_«me
 =
NULL
) {

133 
	`k‰ì
(
thªad
);

134  
NULL
;

136 
thªad
->
t_wch™_«me
 = "NEW";

137 
thªad
->
t_°©e
 = 
S_READY
;

140 
	`thªad_machdï_öô
(&
thªad
->
t_machdï
);

141 
	`thªadli°node_öô
(&
thªad
->
t_li°node
,Åhread);

142 
thªad
->
t_°ack
 = 
NULL
;

143 
thªad
->
t_c⁄ãxt
 = 
NULL
;

144 
thªad
->
t_˝u
 = 
NULL
;

145 
thªad
->
t_¥oc
 = 
NULL
;

148 
thªad
->
t_ö_öãºu±
 = 
Ál£
;

149 
thªad
->
t_cur•l
 = 
IPL_HIGH
;

150 
thªad
->
t_ùlhigh_cou¡
 = 1;

154  
thªad
;

155 
	}
}

165 
˝u
 *

166 
	$˝u_¸óã
(
h¨dw¨e_numbî
)

168 
˝u
 *
c
;

169 
ªsu…
;

170 
«mebuf
[16];

172 
c
 = 
	`kmÆloc
((*c));

173 i‡(
c
 =
NULL
) {

174 
	`∑nic
("cpu_create: Out of memory\n");

177 
c
->
c_£lf
 = c;

178 
c
->
c_h¨dw¨e_numbî
 = 
h¨dw¨e_numbî
;

180 
c
->
c_cuπhªad
 = 
NULL
;

181 
	`thªadli°_öô
(&
c
->
c_zombõs
);

182 
c
->
c_h¨d˛ocks
 = 0;

184 
c
->
c_isidÀ
 = 
Ál£
;

185 
	`thªadli°_öô
(&
c
->
c_runqueue
);

186 
	`•ölock_öô
(&
c
->
c_runqueue_lock
);

188 
c
->
c_ùi_≥ndög
 = 0;

189 
c
->
c_numshoŸdown
 = 0;

190 
	`•ölock_öô
(&
c
->
c_ùi_lock
);

192 
ªsu…
 = 
	`˝u¨øy_add
(&
Æl˝us
, 
c
, &c->
c_numbî
);

193 i‡(
ªsu…
 != 0) {

194 
	`∑nic
("˝u_¸óã:áºay_add: %s\n", 
	`°ªº‹
(
ªsu…
));

197 
	`¢¥ötf
(
«mebuf
, “amebuf), "<boŸ #%d>", 
c
->
c_numbî
);

198 
c
->
c_cuπhªad
 = 
	`thªad_¸óã
(
«mebuf
);

199 i‡(
c
->
c_cuπhªad
 =
NULL
) {

200 
	`∑nic
("cpu_create:Åhread_create failed\n");

202 
ªsu…
 = 
	`¥oc_addthªad
(
k¥oc
, 
c
->
c_cuπhªad
);

203 i‡(
ªsu…
) {

204 
	`∑nic
("˝u_¸óã:Öroc_addthªad:: %s\n", 
	`°ªº‹
(
ªsu…
));

207 i‡(
c
->
c_numbî
 == 0) {

217 
c
->
c_cuπhªad
->
t_°ack
 = 
	`kmÆloc
(
STACK_SIZE
);

218 i‡(
c
->
c_cuπhªad
->
t_°ack
 =
NULL
) {

219 
	`∑nic
("cpu_create: couldn'tállocate stack");

221 
	`thªad_check°ack_öô
(
c
->
c_cuπhªad
);

223 
c
->
c_cuπhªad
->
t_˝u
 = c;

225 
	`˝u_machdï_öô
(
c
);

227  
c
;

228 
	}
}

240 
	$thªad_de°roy
(
thªad
 *thread)

242 
	`KASSERT
(
thªad
 !
cuπhªad
);

243 
	`KASSERT
(
thªad
->
t_°©e
 !
S_RUN
);

251 
	`KASSERT
(
thªad
->
t_¥oc
 =
NULL
);

252 i‡(
thªad
->
t_°ack
 !
NULL
) {

253 
	`k‰ì
(
thªad
->
t_°ack
);

255 
	`thªadli°node_˛ónup
(&
thªad
->
t_li°node
);

256 
	`thªad_machdï_˛ónup
(&
thªad
->
t_machdï
);

259 
thªad
->
t_wch™_«me
 = "DESTROYED";

261 
	`k‰ì
(
thªad
->
t_«me
);

262 
	`k‰ì
(
thªad
);

263 
	}
}

273 
	$ex‹ci£
()

275 
thªad
 *
z
;

277 (
z
 = 
	`thªadli°_ªmhód
(&
cur˝u
->
c_zombõs
)Ë!
NULL
) {

278 
	`KASSERT
(
z
 !
cuπhªad
);

279 
	`KASSERT
(
z
->
t_°©e
 =
S_ZOMBIE
);

280 
	`thªad_de°roy
(
z
);

282 
	}
}

290 
	$thªad_∑nic
()

297 
	`ùi_brﬂdˇ°
(
IPI_PANIC
);

306 
cur˝u
->
c_runqueue
.
é_cou¡
 = 0;

307 
cur˝u
->
c_runqueue
.
é_hód
.
én_√xt
 = 
NULL
;

308 
cur˝u
->
c_runqueue
.
é_èû
.
én_¥ev
 = 
NULL
;

326 
	}
}

332 
	$thªad_shutdown
()

340 
	`ùi_brﬂdˇ°
(
IPI_OFFLINE
);

341 
	}
}

347 
	$thªad_boŸ°øp
()

349 
˝u
 *
boŸ˝u
;

350 
thªad
 *
boŸthªad
;

352 
	`˝u¨øy_öô
(&
Æl˝us
);

362 
boŸ˝u
 = 
	`˝u_¸óã
(0);

363 
boŸthªad
 = 
boŸ˝u
->
c_cuπhªad
;

370 
	`INIT_CURCPU
(
boŸ˝u
, 
boŸthªad
);

377 
cuπhªad
->
t_˝u
 = 
cur˝u
;

378 
cur˝u
->
c_cuπhªad
 = 
cuπhªad
;

381 
	`KASSERT
(
cuπhªad
->
t_¥oc
 !
NULL
);

384 
	}
}

395 
	$˝u_h©ch
(
so·w¨e_numbî
)

397 
	`KASSERT
(
cur˝u
 !
NULL
);

398 
	`KASSERT
(
cuπhªad
 !
NULL
);

399 
	`KASSERT
(
cur˝u
->
c_numbî
 =
so·w¨e_numbî
);

401 
	`•l0
();

403 
	`k¥ötf
("˝u%u: %s\n", 
so·w¨e_numbî
, 
	`˝u_idítify
());

405 
	`V
(
˝u_°¨tup_£m
);

406 
	`thªad_exô
();

407 
	}
}

413 
	$thªad_°¨t_˝us
()

415 
i
;

417 
	`k¥ötf
("˝u0: %s\n", 
	`˝u_idítify
());

419 
˝u_°¨tup_£m
 = 
	`£m_¸óã
("cpu_hatch", 0);

420 
	`maöbus_°¨t_˝us
();

422 
i
=0; i<
	`˝u¨øy_num
(&
Æl˝us
) - 1; i++) {

423 
	`P
(
˝u_°¨tup_£m
);

425 
	`£m_de°roy
(
˝u_°¨tup_£m
);

426 
˝u_°¨tup_£m
 = 
NULL
;

427 
	}
}

436 
	$thªad_make_ru¬abÀ
(
thªad
 *
èrgë
, 
boﬁ
 
Æªady_have_lock
)

438 
˝u
 *
èrgë˝u
;

439 
boﬁ
 
isidÀ
;

442 
èrgë˝u
 = 
èrgë
->
t_˝u
;

444 i‡(
Æªady_have_lock
) {

446 
	`KASSERT
(
	`•ölock_do_i_hﬁd
(&
èrgë˝u
->
c_runqueue_lock
));

449 
	`•ölock_acquúe
(&
èrgë˝u
->
c_runqueue_lock
);

452 
isidÀ
 = 
èrgë˝u
->
c_isidÀ
;

453 
	`thªadli°_addèû
(&
èrgë˝u
->
c_runqueue
, 
èrgë
);

454 i‡(
isidÀ
) {

459 
	`ùi_£nd
(
èrgë˝u
, 
IPI_UNIDLE
);

462 i‡(!
Æªady_have_lock
) {

463 
	`•ölock_ªÀa£
(&
èrgë˝u
->
c_runqueue_lock
);

465 
	}
}

478 
thªad_f‹k
(c⁄° *
«me
,

479 
¥oc
 *proc,

480 (*
íåypoöt
)(*
d©a1
, 
d©a2
),

481 *
d©a1
, 
d©a2
)

483 
thªad
 *
√wthªad
;

484 
ªsu…
;

486 #ifde‡
UW


487 
	`DEBUG
(
DB_THREADS
,"F‹kögÅhªad: %s\n",
«me
);

490 
√wthªad
 = 
	`thªad_¸óã
(
«me
);

491 i‡(
√wthªad
 =
NULL
) {

492  
ENOMEM
;

496 
√wthªad
->
t_°ack
 = 
	`kmÆloc
(
STACK_SIZE
);

497 i‡(
√wthªad
->
t_°ack
 =
NULL
) {

498 
	`thªad_de°roy
(
√wthªad
);

499  
ENOMEM
;

501 
	`thªad_check°ack_öô
(
√wthªad
);

508 
√wthªad
->
t_˝u
 = 
cuπhªad
->t_cpu;

511 i‡(
¥oc
 =
NULL
) {

512 
¥oc
 = 
cuπhªad
->
t_¥oc
;

514 
ªsu…
 = 
	`¥oc_addthªad
(
¥oc
, 
√wthªad
);

515 i‡(
ªsu…
) {

517 
	`thªad_de°roy
(
√wthªad
);

518  
ªsu…
;

526 
√wthªad
->
t_ùlhigh_cou¡
++;

529 
	`swôch‰ame_öô
(
√wthªad
, 
íåypoöt
, 
d©a1
, 
d©a2
);

532 
	`thªad_make_ru¬abÀ
(
√wthªad
, 
Ál£
);

535 
	}
}

548 
	$thªad_swôch
(
thªad°©e_t
 
√w°©e
, 
wch™
 *
wc
)

550 
thªad
 *
cur
, *
√xt
;

551 
•l
;

553 
	`DEBUGASSERT
(
cur˝u
->
c_cuπhªad
 =
cuπhªad
);

554 
	`DEBUGASSERT
(
cuπhªad
->
t_˝u
 =
cur˝u
->
c_£lf
);

557 
•l
 = 
	`•lhigh
();

559 
cur
 = 
cuπhªad
;

565 i‡(
cur˝u
->
c_isidÀ
) {

566 
	`•lx
(
•l
);

571 
	`thªad_check°ack
(
cur
);

574 
	`•ölock_acquúe
(&
cur˝u
->
c_runqueue_lock
);

577 i‡(
√w°©e
 =
S_READY
 && 
	`thªadli°_i£m±y
(&
cur˝u
->
c_runqueue
)) {

578 
	`•ölock_ªÀa£
(&
cur˝u
->
c_runqueue_lock
);

579 
	`•lx
(
•l
);

584 
√w°©e
) {

585 
S_RUN
:

586 
	`∑nic
("Illegal S_RUN inÅhread_switch\n");

587 
S_READY
:

588 
	`thªad_make_ru¬abÀ
(
cur
, 
åue
 );

590 
S_SLEEP
:

591 
cur
->
t_wch™_«me
 = 
wc
->
wc_«me
;

605 
	`thªadli°_addèû
(&
wc
->
wc_thªads
, 
cur
);

606 
	`wch™_u∆ock
(
wc
);

608 
S_ZOMBIE
:

609 
cur
->
t_wch™_«me
 = "ZOMBIE";

610 
	`thªadli°_addèû
(&
cur˝u
->
c_zombõs
, 
cur
);

613 
cur
->
t_°©e
 = 
√w°©e
;

633 
cur˝u
->
c_isidÀ
 = 
åue
;

635 
√xt
 = 
	`thªadli°_ªmhód
(&
cur˝u
->
c_runqueue
);

636 i‡(
√xt
 =
NULL
) {

637 
	`•ölock_ªÀa£
(&
cur˝u
->
c_runqueue_lock
);

638 
	`˝u_idÀ
();

639 
	`•ölock_acquúe
(&
cur˝u
->
c_runqueue_lock
);

641 } 
√xt
 =
NULL
);

642 
cur˝u
->
c_isidÀ
 = 
Ál£
;

651 
cur˝u
->
c_cuπhªad
 = 
√xt
;

652 
cuπhªad
 = 
√xt
;

655 
	`swôch‰ame_swôch
(&
cur
->
t_c⁄ãxt
, &
√xt
->t_context);

705 
cur
->
t_wch™_«me
 = 
NULL
;

706 
cur
->
t_°©e
 = 
S_RUN
;

709 
	`•ölock_ªÀa£
(&
cur˝u
->
c_runqueue_lock
);

712 
	`as_a˘iv©e
();

715 
	`ex‹ci£
();

718 
	`•lx
(
•l
);

719 
	}
}

730 
thªad_°¨tup
((*
íåypoöt
)(*
d©a1
, 
d©a2
),

731 *
d©a1
, 
d©a2
)

733 
thªad
 *
cur
;

735 
cur
 = 
cuπhªad
;

738 
cur
->
t_wch™_«me
 = 
NULL
;

739 
cur
->
t_°©e
 = 
S_RUN
;

742 
	`•ölock_ªÀa£
(&
cur˝u
->
c_runqueue_lock
);

745 
	`as_a˘iv©e
();

748 
	`ex‹ci£
();

751 
	`•l0
();

753 #i‡
OPT_SYNCHPROBS


756 
i
, 
n
;

757 
n
 = 
	`øndom
()%161 +Ñandom()%161;

758 
i
=0; i<
n
; i++) {

759 
	`thªad_yõld
();

765 
	`íåypoöt
(
d©a1
, 
d©a2
);

768 
	`thªad_exô
();

769 
	}
}

781 
	$thªad_exô
()

783 
thªad
 *
cur
;

785 
cur
 = 
cuπhªad
;

787 #ifde‡
UW


790 
	`KASSERT
(
cuΩroc
 =
k¥oc
 || cuΩro¯=
NULL
);

792 i‡(
cuΩroc
 =
k¥oc
) {

793 
	`¥oc_ªmthªad
(
cur
);

796 
	`¥oc_ªmthªad
(
cur
);

800 
	`KASSERT
(
cur
->
t_¥oc
 =
NULL
);

803 
	`thªad_check°ack
(
cur
);

806 
	`•lhigh
();

807 
	`thªad_swôch
(
S_ZOMBIE
, 
NULL
);

808 
	`∑nic
("The zombie walks!\n");

809 
	}
}

815 
	$thªad_yõld
()

817 
	`thªad_swôch
(
S_READY
, 
NULL
);

818 
	}
}

830 
	$scheduÀ
()

836 
	}
}

856 
	$thªad_c⁄sidî_migøti⁄
()

858 
my_cou¡
, 
tŸÆ_cou¡
, 
⁄e_sh¨e
, 
to_£nd
;

859 
i
, 
num˝us
;

860 
˝u
 *
c
;

861 
thªadli°
 
vi˘ims
;

862 
thªad
 *
t
;

864 
my_cou¡
 = 
tŸÆ_cou¡
 = 0;

865 
num˝us
 = 
	`˝u¨øy_num
(&
Æl˝us
);

866 
i
=0; i<
num˝us
; i++) {

867 
c
 = 
	`˝u¨øy_gë
(&
Æl˝us
, 
i
);

868 
	`•ölock_acquúe
(&
c
->
c_runqueue_lock
);

869 
tŸÆ_cou¡
 +
c
->
c_runqueue
.
é_cou¡
;

870 i‡(
c
 =
cur˝u
->
c_£lf
) {

871 
my_cou¡
 = 
c
->
c_runqueue
.
é_cou¡
;

873 
	`•ölock_ªÀa£
(&
c
->
c_runqueue_lock
);

876 
⁄e_sh¨e
 = 
	`DIVROUNDUP
(
tŸÆ_cou¡
, 
num˝us
);

877 i‡(
my_cou¡
 < 
⁄e_sh¨e
) {

881 
to_£nd
 = 
my_cou¡
 - 
⁄e_sh¨e
;

882 
	`thªadli°_öô
(&
vi˘ims
);

883 
	`•ölock_acquúe
(&
cur˝u
->
c_runqueue_lock
);

884 
i
=0; i<
to_£nd
; i++) {

885 
t
 = 
	`thªadli°_ªmèû
(&
cur˝u
->
c_runqueue
);

886 
	`thªadli°_addhód
(&
vi˘ims
, 
t
);

888 
	`•ölock_ªÀa£
(&
cur˝u
->
c_runqueue_lock
);

890 
i
=0; i < 
num˝us
 && 
to_£nd
 > 0; i++) {

891 
c
 = 
	`˝u¨øy_gë
(&
Æl˝us
, 
i
);

892 i‡(
c
 =
cur˝u
->
c_£lf
) {

895 
	`•ölock_acquúe
(&
c
->
c_runqueue_lock
);

896 
c
->
c_runqueue
.
é_cou¡
 < 
⁄e_sh¨e
 && 
to_£nd
 > 0) {

897 
t
 = 
	`thªadli°_ªmhód
(&
vi˘ims
);

920 i‡(
t
 =
cuπhªad
) {

921 
	`thªadli°_addèû
(&
vi˘ims
, 
t
);

922 
to_£nd
--;

926 
t
->
t_˝u
 = 
c
;

927 
	`thªadli°_addèû
(&
c
->
c_runqueue
, 
t
);

928 
	`DEBUG
(
DB_THREADS
,

930 
t
->
t_«me
, 
cur˝u
->
c_numbî
, 
c
->c_number);

931 
to_£nd
--;

932 i‡(
c
->
c_isidÀ
) {

937 
	`ùi_£nd
(
c
, 
IPI_UNIDLE
);

940 
	`•ölock_ªÀa£
(&
c
->
c_runqueue_lock
);

948 i‡(!
	`thªadli°_i£m±y
(&
vi˘ims
)) {

949 
	`•ölock_acquúe
(&
cur˝u
->
c_runqueue_lock
);

950 (
t
 = 
	`thªadli°_ªmhód
(&
vi˘ims
)Ë!
NULL
) {

951 
	`thªadli°_addèû
(&
cur˝u
->
c_runqueue
, 
t
);

953 
	`•ölock_ªÀa£
(&
cur˝u
->
c_runqueue_lock
);

956 
	`KASSERT
(
	`thªadli°_i£m±y
(&
vi˘ims
));

957 
	`thªadli°_˛ónup
(&
vi˘ims
);

958 
	}
}

974 
wch™
 *

975 
	$wch™_¸óã
(c⁄° *
«me
)

977 
wch™
 *
wc
;

979 
wc
 = 
	`kmÆloc
((*wc));

980 i‡(
wc
 =
NULL
) {

981  
NULL
;

983 
	`•ölock_öô
(&
wc
->
wc_lock
);

984 
	`thªadli°_öô
(&
wc
->
wc_thªads
);

985 
wc
->
wc_«me
 = 
«me
;

986  
wc
;

987 
	}
}

994 
	$wch™_de°roy
(
wch™
 *
wc
)

996 
	`•ölock_˛ónup
(&
wc
->
wc_lock
);

997 
	`thªadli°_˛ónup
(&
wc
->
wc_thªads
);

998 
	`k‰ì
(
wc
);

999 
	}
}

1005 
	$wch™_lock
(
wch™
 *
wc
)

1007 
	`•ölock_acquúe
(&
wc
->
wc_lock
);

1008 
	}
}

1011 
	$wch™_u∆ock
(
wch™
 *
wc
)

1013 
	`•ölock_ªÀa£
(&
wc
->
wc_lock
);

1014 
	}
}

1023 
	$wch™_¶ìp
(
wch™
 *
wc
)

1026 
	`KASSERT
(!
cuπhªad
->
t_ö_öãºu±
);

1028 
	`thªad_swôch
(
S_SLEEP
, 
wc
);

1029 
	}
}

1035 
	$wch™_wake⁄e
(
wch™
 *
wc
)

1037 
thªad
 *
èrgë
;

1040 
	`•ölock_acquúe
(&
wc
->
wc_lock
);

1041 
èrgë
 = 
	`thªadli°_ªmhód
(&
wc
->
wc_thªads
);

1046 
	`•ölock_ªÀa£
(&
wc
->
wc_lock
);

1048 i‡(
èrgë
 =
NULL
) {

1053 
	`thªad_make_ru¬abÀ
(
èrgë
, 
Ál£
);

1054 
	}
}

1060 
	$wch™_wakóŒ
(
wch™
 *
wc
)

1062 
thªad
 *
èrgë
;

1063 
thªadli°
 
li°
;

1065 
	`thªadli°_öô
(&
li°
);

1071 
	`•ölock_acquúe
(&
wc
->
wc_lock
);

1072 (
èrgë
 = 
	`thªadli°_ªmhód
(&
wc
->
wc_thªads
)Ë!
NULL
) {

1073 
	`thªadli°_addèû
(&
li°
, 
èrgë
);

1079 
	`•ölock_ªÀa£
(&
wc
->
wc_lock
);

1086 (
èrgë
 = 
	`thªadli°_ªmhód
(&
li°
)Ë!
NULL
) {

1087 
	`thªad_make_ru¬abÀ
(
èrgë
, 
Ál£
);

1090 
	`thªadli°_˛ónup
(&
li°
);

1091 
	}
}

1097 
boﬁ


1098 
	$wch™_i£m±y
(
wch™
 *
wc
)

1100 
boﬁ
 
ªt
;

1102 
	`•ölock_acquúe
(&
wc
->
wc_lock
);

1103 
ªt
 = 
	`thªadli°_i£m±y
(&
wc
->
wc_thªads
);

1104 
	`•ölock_ªÀa£
(&
wc
->
wc_lock
);

1106  
ªt
;

1107 
	}
}

1119 
	$ùi_£nd
(
˝u
 *
èrgë
, 
code
)

1121 
	`KASSERT
(
code
 >= 0 && code < 32);

1123 
	`•ölock_acquúe
(&
èrgë
->
c_ùi_lock
);

1124 
èrgë
->
c_ùi_≥ndög
 |(
uöt32_t
)1 << 
code
;

1125 
	`maöbus_£nd_ùi
(
èrgë
);

1126 
	`•ölock_ªÀa£
(&
èrgë
->
c_ùi_lock
);

1127 
	}
}

1130 
	$ùi_brﬂdˇ°
(
code
)

1132 
i
;

1133 
˝u
 *
c
;

1135 
i
=0; i < 
	`˝u¨øy_num
(&
Æl˝us
); i++) {

1136 
c
 = 
	`˝u¨øy_gë
(&
Æl˝us
, 
i
);

1137 i‡(
c
 !
cur˝u
->
c_£lf
) {

1138 
	`ùi_£nd
(
c
, 
code
);

1141 
	}
}

1144 
	$ùi_ébshoŸdown
(
˝u
 *
èrgë
, c⁄° 
ébshoŸdown
 *
m≠pög
)

1146 
n
;

1148 
	`•ölock_acquúe
(&
èrgë
->
c_ùi_lock
);

1150 
n
 = 
èrgë
->
c_numshoŸdown
;

1151 i‡(
n
 =
TLBSHOOTDOWN_MAX
) {

1152 
èrgë
->
c_numshoŸdown
 = 
TLBSHOOTDOWN_ALL
;

1155 
èrgë
->
c_shoŸdown
[
n
] = *
m≠pög
;

1156 
èrgë
->
c_numshoŸdown
 = 
n
+1;

1159 
èrgë
->
c_ùi_≥ndög
 |(
uöt32_t
)1 << 
IPI_TLBSHOOTDOWN
;

1160 
	`maöbus_£nd_ùi
(
èrgë
);

1162 
	`•ölock_ªÀa£
(&
èrgë
->
c_ùi_lock
);

1163 
	}
}

1166 
	$öãΩro˚ss‹_öãºu±
()

1168 
uöt32_t
 
bôs
;

1169 
i
;

1171 
	`•ölock_acquúe
(&
cur˝u
->
c_ùi_lock
);

1172 
bôs
 = 
cur˝u
->
c_ùi_≥ndög
;

1174 i‡(
bôs
 & (1U << 
IPI_PANIC
)) {

1176 
	`˝u_hÆt
();

1178 i‡(
bôs
 & (1U << 
IPI_OFFLINE
)) {

1180 
	`•ölock_acquúe
(&
cur˝u
->
c_runqueue_lock
);

1181 i‡(!
cur˝u
->
c_isidÀ
) {

1182 
	`k¥ötf
("cpu%d: offline: warning:Çot idle\n",

1183 
cur˝u
->
c_numbî
);

1185 
	`•ölock_ªÀa£
(&
cur˝u
->
c_runqueue_lock
);

1186 
	`k¥ötf
("˝u%d: ofÊöe.\n", 
cur˝u
->
c_numbî
);

1187 
	`˝u_hÆt
();

1189 i‡(
bôs
 & (1U << 
IPI_UNIDLE
)) {

1195 i‡(
bôs
 & (1U << 
IPI_TLBSHOOTDOWN
)) {

1196 i‡(
cur˝u
->
c_numshoŸdown
 =
TLBSHOOTDOWN_ALL
) {

1197 
	`vm_ébshoŸdown_Æl
();

1200 
i
=0; i<
cur˝u
->
c_numshoŸdown
; i++) {

1201 
	`vm_ébshoŸdown
(&
cur˝u
->
c_shoŸdown
[
i
]);

1204 
cur˝u
->
c_numshoŸdown
 = 0;

1207 
cur˝u
->
c_ùi_≥ndög
 = 0;

1208 
	`•ölock_ªÀa£
(&
cur˝u
->
c_ùi_lock
);

1209 
	}
}

	@thread/threadlist.c

34 
	~<ty≥s.h
>

35 
	~<lib.h
>

36 
	~<thªad.h
>

37 
	~<thªadli°.h
>

40 
	$thªadli°node_öô
(
thªadli°node
 *
én
, 
thªad
 *
t
)

42 
	`DEBUGASSERT
(
én
 !
NULL
);

43 
	`KASSERT
(
t
 !
NULL
);

45 
én
->
én_√xt
 = 
NULL
;

46 
én
->
én_¥ev
 = 
NULL
;

47 
én
->
én_£lf
 = 
t
;

48 
	}
}

51 
	$thªadli°node_˛ónup
(
thªadli°node
 *
én
)

53 
	`DEBUGASSERT
(
én
 !
NULL
);

55 
	`KASSERT
(
én
->
én_√xt
 =
NULL
);

56 
	`KASSERT
(
én
->
én_¥ev
 =
NULL
);

57 
	`KASSERT
(
én
->
én_£lf
 !
NULL
);

58 
	}
}

61 
	$thªadli°_öô
(
thªadli°
 *
é
)

63 
	`DEBUGASSERT
(
é
 !
NULL
);

65 
é
->
é_hód
.
én_√xt
 = &é->
é_èû
;

66 
é
->
é_hód
.
én_¥ev
 = 
NULL
;

67 
é
->
é_èû
.
én_√xt
 = 
NULL
;

68 
é
->
é_èû
.
én_¥ev
 = &é->
é_hód
;

69 
é
->
é_hód
.
én_£lf
 = 
NULL
;

70 
é
->
é_èû
.
én_£lf
 = 
NULL
;

71 
é
->
é_cou¡
 = 0;

72 
	}
}

75 
	$thªadli°_˛ónup
(
thªadli°
 *
é
)

77 
	`DEBUGASSERT
(
é
 !
NULL
);

78 
	`DEBUGASSERT
(
é
->
é_hód
.
én_√xt
 =&é->
é_èû
);

79 
	`DEBUGASSERT
(
é
->
é_hód
.
én_¥ev
 =
NULL
);

80 
	`DEBUGASSERT
(
é
->
é_èû
.
én_√xt
 =
NULL
);

81 
	`DEBUGASSERT
(
é
->
é_èû
.
én_¥ev
 =&é->
é_hód
);

82 
	`DEBUGASSERT
(
é
->
é_hód
.
én_£lf
 =
NULL
);

83 
	`DEBUGASSERT
(
é
->
é_èû
.
én_£lf
 =
NULL
);

85 
	`KASSERT
(
	`thªadli°_i£m±y
(
é
));

86 
	`KASSERT
(
é
->
é_cou¡
 == 0);

89 
	}
}

91 
boﬁ


92 
	$thªadli°_i£m±y
(
thªadli°
 *
é
)

94 
	`DEBUGASSERT
(
é
 !
NULL
);

96  (
é
->
é_cou¡
 == 0);

97 
	}
}

107 
	$thªadli°_ö£πa·înode
(
thªadli°node
 *
⁄li°
, 
thªad
 *
t
)

109 
thªadli°node
 *
addì
;

111 
addì
 = &
t
->
t_li°node
;

113 
	`DEBUGASSERT
(
addì
->
én_¥ev
 =
NULL
);

114 
	`DEBUGASSERT
(
addì
->
én_√xt
 =
NULL
);

116 
addì
->
én_¥ev
 = 
⁄li°
;

117 
addì
->
én_√xt
 = 
⁄li°
->tln_next;

118 
addì
->
én_¥ev
->
én_√xt
 =áddee;

119 
addì
->
én_√xt
->
én_¥ev
 =áddee;

120 
	}
}

127 
	$thªadli°_ö£πbef‹íode
(
thªad
 *
t
, 
thªadli°node
 *
⁄li°
)

129 
thªadli°node
 *
addì
;

131 
addì
 = &
t
->
t_li°node
;

133 
	`DEBUGASSERT
(
addì
->
én_¥ev
 =
NULL
);

134 
	`DEBUGASSERT
(
addì
->
én_√xt
 =
NULL
);

136 
addì
->
én_¥ev
 = 
⁄li°
->tln_prev;

137 
addì
->
én_√xt
 = 
⁄li°
;

138 
addì
->
én_¥ev
->
én_√xt
 =áddee;

139 
addì
->
én_√xt
->
én_¥ev
 =áddee;

140 
	}
}

147 
	$thªadli°_ªmovíode
(
thªadli°node
 *
én
)

149 
	`DEBUGASSERT
(
én
 !
NULL
);

150 
	`DEBUGASSERT
(
én
->
én_¥ev
 !
NULL
);

151 
	`DEBUGASSERT
(
én
->
én_√xt
 !
NULL
);

153 
én
->
én_¥ev
->
én_√xt
 =Åln->tln_next;

154 
én
->
én_√xt
->
én_¥ev
 =Åln->tln_prev;

155 
én
->
én_¥ev
 = 
NULL
;

156 
én
->
én_√xt
 = 
NULL
;

157 
	}
}

163 
	$thªadli°_addhód
(
thªadli°
 *
é
, 
thªad
 *
t
)

165 
	`DEBUGASSERT
(
é
 !
NULL
);

166 
	`DEBUGASSERT
(
t
 !
NULL
);

168 
	`thªadli°_ö£πa·înode
(&
é
->
é_hód
, 
t
);

169 
é
->
é_cou¡
++;

170 
	}
}

173 
	$thªadli°_addèû
(
thªadli°
 *
é
, 
thªad
 *
t
)

175 
	`DEBUGASSERT
(
é
 !
NULL
);

176 
	`DEBUGASSERT
(
t
 !
NULL
);

178 
	`thªadli°_ö£πbef‹íode
(
t
, &
é
->
é_èû
);

179 
é
->
é_cou¡
++;

180 
	}
}

182 
thªad
 *

183 
	$thªadli°_ªmhód
(
thªadli°
 *
é
)

185 
thªadli°node
 *
én
;

187 
	`DEBUGASSERT
(
é
 !
NULL
);

189 
én
 = 
é
->
é_hód
.
én_√xt
;

190 i‡(
én
->
én_√xt
 =
NULL
) {

192  
NULL
;

194 
	`thªadli°_ªmovíode
(
én
);

195 
	`DEBUGASSERT
(
é
->
é_cou¡
 > 0);

196 
é
->
é_cou¡
--;

197  
én
->
én_£lf
;

198 
	}
}

200 
thªad
 *

201 
	$thªadli°_ªmèû
(
thªadli°
 *
é
)

203 
thªadli°node
 *
én
;

205 
	`DEBUGASSERT
(
é
 !
NULL
);

207 
én
 = 
é
->
é_èû
.
én_¥ev
;

208 i‡(
én
->
én_¥ev
 =
NULL
) {

210  
NULL
;

212 
	`thªadli°_ªmovíode
(
én
);

213 
	`DEBUGASSERT
(
é
->
é_cou¡
 > 0);

214 
é
->
é_cou¡
--;

215  
én
->
én_£lf
;

216 
	}
}

219 
	$thªadli°_ö£πa·î
(
thªadli°
 *
é
,

220 
thªad
 *
⁄li°
, thªad *
addì
)

222 
	`thªadli°_ö£πa·înode
(&
⁄li°
->
t_li°node
, 
addì
);

223 
é
->
é_cou¡
++;

224 
	}
}

227 
	$thªadli°_ö£πbef‹e
(
thªadli°
 *
é
,

228 
thªad
 *
addì
, thªad *
⁄li°
)

230 
	`thªadli°_ö£πbef‹íode
(
addì
, &
⁄li°
->
t_li°node
);

231 
é
->
é_cou¡
++;

232 
	}
}

235 
	$thªadli°_ªmove
(
thªadli°
 *
é
, 
thªad
 *
t
)

237 
	`thªadli°_ªmovíode
(&
t
->
t_li°node
);

238 
	`DEBUGASSERT
(
é
->
é_cou¡
 > 0);

239 
é
->
é_cou¡
--;

240 
	}
}

	@vfs/device.c

36 
	~<ty≥s.h
>

37 
	~<kîn/î∫o.h
>

38 
	~<kîn/f˙é.h
>

39 
	~<°©.h
>

40 
	~<lib.h
>

41 
	~<uio.h
>

42 
	~<synch.h
>

43 
	~<vnode.h
>

44 
	~<devi˚.h
>

53 
	$dev_›í
(
vnode
 *
v
, 
Êags
)

55 
devi˚
 *
d
 = 
v
->
vn_d©a
;

57 i‡(
Êags
 & (
O_CREAT
 | 
O_TRUNC
 | 
O_EXCL
 | 
O_APPEND
)) {

58  
EINVAL
;

61  
d
->
	`d_›í
(d, 
Êags
);

62 
	}
}

70 
	$dev_˛o£
(
vnode
 *
v
)

72 
devi˚
 *
d
 = 
v
->
vn_d©a
;

73  
d
->
	`d_˛o£
(d);

74 
	}
}

82 
	$dev_ª˛aim
(
vnode
 *
v
)

84 ()
v
;

87 
	}
}

94 
	$dev_ªad
(
vnode
 *
v
, 
uio
 *uio)

96 
devi˚
 *
d
 = 
v
->
vn_d©a
;

97 
	`KASSERT
(
uio
->
uio_rw
 =
UIO_READ
);

98  
d
->
	`d_io
(d, 
uio
);

99 
	}
}

107 
	$nuŒ_io
(
vnode
 *
v
, 
uio
 *uio)

109 ()
v
;

110 ()
uio
;

111  
EINVAL
;

112 
	}
}

119 
	$dev_wrôe
(
vnode
 *
v
, 
uio
 *uio)

121 
devi˚
 *
d
 = 
v
->
vn_d©a
;

122 
	`KASSERT
(
uio
->
uio_rw
 =
UIO_WRITE
);

123  
d
->
	`d_io
(d, 
uio
);

124 
	}
}

131 
	$dev_io˘l
(
vnode
 *
v
, 
›
, 
u£Ωå_t
 
d©a
)

133 
devi˚
 *
d
 = 
v
->
vn_d©a
;

134  
d
->
	`d_io˘l
(d, 
›
, 
d©a
);

135 
	}
}

144 
	$dev_°©
(
vnode
 *
v
, 
°©
 *
°©buf
)

146 
devi˚
 *
d
 = 
v
->
vn_d©a
;

147 
ªsu…
;

149 
	`bzîo
(
°©buf
, (
°©
));

151 i‡(
d
->
d_blocks
 > 0) {

152 
°©buf
->
°_size
 = 
d
->
d_blocks
 * d->
d_blocksize
;

153 
°©buf
->
°_blksize
 = 
d
->
d_blocksize
;

156 
°©buf
->
°_size
 = 0;

159 
ªsu…
 = 
	`VOP_GETTYPE
(
v
, &
°©buf
->
°_mode
);

160 i‡(
ªsu…
) {

161  
ªsu…
;

164 
°©buf
->
°_mode
 |= 0600;

166 
°©buf
->
°_∆ök
 = 1;

167 
°©buf
->
°_blocks
 = 
d
->
d_blocks
;

170 
°©buf
->
°_dev
 = 0;

173 
°©buf
->
°_rdev
 = 
d
->
d_devnumbî
;

176 
	}
}

185 
	$dev_gëty≥
(
vnode
 *
v
, 
mode_t
 *
ªt
)

187 
devi˚
 *
d
 = 
v
->
vn_d©a
;

188 i‡(
d
->
d_blocks
 > 0) {

189 *
ªt
 = 
S_IFBLK
;

192 *
ªt
 = 
S_IFCHR
;

195 
	}
}

204 
	$dev_åy£ek
(
vnode
 *
v
, 
off_t
 
pos
)

206 
devi˚
 *
d
 = 
v
->
vn_d©a
;

207 i‡(
d
->
d_blocks
 > 0) {

208 i‡((
pos
 % 
d
->
d_blocksize
)!=0) {

210  
EINVAL
;

212 i‡(
pos
 < 0) {

219  
EINVAL
;

221 i‡(
pos
 / 
d
->
d_blocksize
 >d->
d_blocks
) {

223  
EINVAL
;

227  
ESPIPE
;

230 
	}
}

237 
	$nuŒ_fsync
(
vnode
 *
v
)

239 ()
v
;

241 
	}
}

249 
	$dev_mm≠
(
vnode
 *
v
 )

251 ()
v
;

252  
EUNIMP
;

253 
	}
}

260 
	$dev_åunˇã
(
vnode
 *
v
, 
off_t
 
Àn
)

262 
devi˚
 *
d
 = 
v
->
vn_d©a
;

267 i‡(
d
->
d_blocks
 > 0 && (
off_t
)(d->d_blocks*d->
d_blocksize
Ë=
Àn
) {

271  
EINVAL
;

272 
	}
}

282 
	$dev_«mefûe
(
vnode
 *
v
, 
uio
 *uio)

290 ()
v
;

291 ()
uio
;

294 
	}
}

302 
	$nuŒ_¸ót
(
vnode
 *
v
, c⁄° *
«me
, 
boﬁ
 
ex˛
, 
mode_t
 
mode
,

303 
vnode
 **
ªsu…
)

305 ()
v
;

306 ()
«me
;

307 ()
ex˛
;

308 ()
mode
;

309 ()
ªsu…
;

310  
ENOTDIR
;

311 
	}
}

315 
	$nuŒ_mkdú
(
vnode
 *
v
, c⁄° *
«me
, 
mode_t
 
mode
)

317 ()
v
;

318 ()
«me
;

319 ()
mode
;

320  
ENOTDIR
;

321 
	}
}

325 
	$nuŒ_symlök
(
vnode
 *
v
, c⁄° *
c⁄ã¡s
, c⁄° *
«me
)

327 ()
v
;

328 ()
c⁄ã¡s
;

329 ()
«me
;

330  
ENOTDIR
;

331 
	}
}

335 
	$nuŒ_«me›
(
vnode
 *
v
, c⁄° *
«me
)

337 ()
v
;

338 ()
«me
;

339  
ENOTDIR
;

340 
	}
}

344 
	$nuŒ_lök
(
vnode
 *
v
, c⁄° *
«me
, vnodê*
fûe
)

346 ()
v
;

347 ()
«me
;

348 ()
fûe
;

349  
ENOTDIR
;

350 
	}
}

354 
	$nuŒ_ª«me
(
vnode
 *
v
, c⁄° *
n1
, vnodê*
v2
, c⁄° *
n2
)

356 ()
v
;

357 ()
n1
;

358 ()
v2
;

359 ()
n2
;

360  
ENOTDIR
;

361 
	}
}

378 
	$dev_lookup
(
vnode
 *
dú
,

379 *
∑th«me
, 
vnode
 **
ªsu…
)

386 i‡(
	`°æí
(
∑th«me
)>0) {

387  
ENOENT
;

389 
	`VOP_INCREF
(
dú
);

390 *
ªsu…
 = 
dú
;

392 
	}
}

396 
	$dev_look∑ª¡
(
vnode
 *
dú
,

397 *
∑th«me
, 
vnode
 **
ªsu…
,

398 *
«mebuf
, 
size_t
 
buÊí
)

403 ()
dú
;

404 ()
∑th«me
;

405 ()
ªsu…
;

406 ()
«mebuf
;

407 ()
buÊí
;

409  
ENOTDIR
;

410 
	}
}

415 c⁄° 
vnode_›s
 
	gdev_vnode_›s
 = {

416 
VOP_MAGIC
,

418 
dev_›í
,

419 
dev_˛o£
,

420 
dev_ª˛aim
,

421 
dev_ªad
,

422 
nuŒ_io
,

423 
nuŒ_io
,

424 
dev_wrôe
,

425 
dev_io˘l
,

426 
dev_°©
,

427 
dev_gëty≥
,

428 
dev_åy£ek
,

429 
nuŒ_fsync
,

430 
dev_mm≠
,

431 
dev_åunˇã
,

432 
dev_«mefûe
,

433 
nuŒ_¸ót
,

434 
nuŒ_symlök
,

435 
nuŒ_mkdú
,

436 
nuŒ_lök
,

437 
nuŒ_«me›
,

438 
nuŒ_«me›
,

439 
nuŒ_ª«me
,

440 
dev_lookup
,

441 
dev_look∑ª¡
,

447 
vnode
 *

448 
	$dev_¸óã_vnode
(
devi˚
 *
dev
)

450 
ªsu…
;

451 
vnode
 *
v
;

453 
v
 = 
	`kmÆloc
((
vnode
));

454 i‡(
v
==
NULL
) {

455  
NULL
;

458 
ªsu…
 = 
	`VOP_INIT
(
v
, &
dev_vnode_›s
, 
NULL
, 
dev
);

459 i‡(
ªsu…
 != 0) {

460 
	`∑nic
("While creating vnode for device: VOP_INIT: %s\n",

461 
	`°ªº‹
(
ªsu…
));

464  
v
;

465 
	}
}

	@vfs/devnull.c

34 
	~<ty≥s.h
>

35 
	~<kîn/î∫o.h
>

36 
	~<lib.h
>

37 
	~<uio.h
>

38 
	~<vfs.h
>

39 
	~<devi˚.h
>

44 
	$nuŒ›í
(
devi˚
 *
dev
, 
›íÊags
)

46 ()
dev
;

47 ()
›íÊags
;

50 
	}
}

55 
	$nuŒ˛o£
(
devi˚
 *
dev
)

57 ()
dev
;

59 
	}
}

64 
	$nuŒio
(
devi˚
 *
dev
, 
uio
 *uio)

71 ()
dev
;

73 i‡(
uio
->
uio_rw
 =
UIO_WRITE
) {

74 
uio
->
uio_ªsid
 = 0;

78 
	}
}

83 
	$nuŒio˘l
(
devi˚
 *
dev
, 
›
, 
u£Ωå_t
 
d©a
)

89 ()
dev
;

90 ()
›
;

91 ()
d©a
;

93  
EINVAL
;

94 
	}
}

100 
	$devnuŒ_¸óã
()

102 
ªsu…
;

103 
devi˚
 *
dev
;

105 
dev
 = 
	`kmÆloc
((*dev));

106 i‡(
dev
==
NULL
) {

107 
	`∑nic
("CouldÇotáddÇull device: out of memory\n");

111 
dev
->
d_›í
 = 
nuŒ›í
;

112 
dev
->
d_˛o£
 = 
nuŒ˛o£
;

113 
dev
->
d_io
 = 
nuŒio
;

114 
dev
->
d_io˘l
 = 
nuŒio˘l
;

116 
dev
->
d_blocks
 = 0;

117 
dev
->
d_blocksize
 = 1;

119 
dev
->
d_devnumbî
 = 0;

121 
dev
->
d_d©a
 = 
NULL
;

123 
ªsu…
 = 
	`vfs_adddev
("nuŒ", 
dev
, 0);

124 i‡(
ªsu…
) {

125 
	`∑nic
("CouldÇŸáddÇuŒ devi˚: %s\n", 
	`°ªº‹
(
ªsu…
));

127 
	}
}

	@vfs/vfscwd.c

34 
	~<ty≥s.h
>

35 
	~<kîn/î∫o.h
>

36 
	~<°©.h
>

37 
	~<lib.h
>

38 
	~<uio.h
>

39 
	~<¥oc.h
>

40 
	~<cuºít.h
>

41 
	~<vfs.h
>

42 
	~<fs.h
>

43 
	~<vnode.h
>

49 
	$vfs_gëcurdú
(
vnode
 **
ªt
)

51 
rv
 = 0;

53 
	`•ölock_acquúe
(&
cuΩroc
->
p_lock
);

54 i‡(
cuΩroc
->
p_cwd
!=
NULL
) {

55 
	`VOP_INCREF
(
cuΩroc
->
p_cwd
);

56 *
ªt
 = 
cuΩroc
->
p_cwd
;

59 
rv
 = 
ENOENT
;

61 
	`•ölock_ªÀa£
(&
cuΩroc
->
p_lock
);

63  
rv
;

64 
	}
}

71 
	$vfs_£tcurdú
(
vnode
 *
dú
)

73 
vnode
 *
ﬁd
;

74 
mode_t
 
vty≥
;

75 
ªsu…
;

77 
ªsu…
 = 
	`VOP_GETTYPE
(
dú
, &
vty≥
);

78 i‡(
ªsu…
) {

79  
ªsu…
;

81 i‡(
vty≥
 !
S_IFDIR
) {

82  
ENOTDIR
;

85 
	`VOP_INCREF
(
dú
);

87 
	`•ölock_acquúe
(&
cuΩroc
->
p_lock
);

88 
ﬁd
 = 
cuΩroc
->
p_cwd
;

89 
cuΩroc
->
p_cwd
 = 
dú
;

90 
	`•ölock_ªÀa£
(&
cuΩroc
->
p_lock
);

92 i‡(
ﬁd
!=
NULL
) {

93 
	`VOP_DECREF
(
ﬁd
);

97 
	}
}

103 
	$vfs_˛órcurdú
()

105 
vnode
 *
ﬁd
;

107 
	`•ölock_acquúe
(&
cuΩroc
->
p_lock
);

108 
ﬁd
 = 
cuΩroc
->
p_cwd
;

109 
cuΩroc
->
p_cwd
 = 
NULL
;

110 
	`•ölock_ªÀa£
(&
cuΩroc
->
p_lock
);

112 i‡(
ﬁd
!=
NULL
) {

113 
	`VOP_DECREF
(
ﬁd
);

117 
	}
}

124 
	$vfs_chdú
(*
∑th
)

126 
vnode
 *
vn
;

127 
ªsu…
;

129 
ªsu…
 = 
	`vfs_lookup
(
∑th
, &
vn
);

130 i‡(
ªsu…
) {

131  
ªsu…
;

133 
ªsu…
 = 
	`vfs_£tcurdú
(
vn
);

134 
	`VOP_DECREF
(
vn
);

135  
ªsu…
;

136 
	}
}

144 
	$vfs_gëcwd
(
uio
 *uio)

146 
vnode
 *
cwd
;

147 
ªsu…
;

148 c⁄° *
«me
;

149 
cﬁ⁄
=':';

151 
	`KASSERT
(
uio
->
uio_rw
==
UIO_READ
);

153 
ªsu…
 = 
	`vfs_gëcurdú
(&
cwd
);

154 i‡(
ªsu…
) {

155  
ªsu…
;

159 
	`KASSERT
(
cwd
->
vn_fs
 !
NULL
);

161 
«me
 = 
	`FSOP_GETVOLNAME
(
cwd
->
vn_fs
);

162 i‡(
«me
==
NULL
) {

163 
	`vfs_biglock_acquúe
();

164 
«me
 = 
	`vfs_gëdev«me
(
cwd
->
vn_fs
);

165 
	`vfs_biglock_ªÀa£
();

167 
	`KASSERT
(
«me
 !
NULL
);

169 
ªsu…
 = 
	`uiomove
((*)
«me
, 
	`°æí
“ame), 
uio
);

170 i‡(
ªsu…
) {

171 
out
;

173 
ªsu…
 = 
	`uiomove
(&
cﬁ⁄
, 1, 
uio
);

174 i‡(
ªsu…
) {

175 
out
;

178 
ªsu…
 = 
	`VOP_NAMEFILE
(
cwd
, 
uio
);

180 
out
:

182 
	`VOP_DECREF
(
cwd
);

183  
ªsu…
;

184 
	}
}

	@vfs/vfslist.c

35 
	#VFSINLINE


	)

37 
	~<ty≥s.h
>

38 
	~<kîn/î∫o.h
>

39 
	~<lib.h
>

40 
	~<¨øy.h
>

41 
	~<synch.h
>

42 
	~<vfs.h
>

43 
	~<fs.h
>

44 
	~<vnode.h
>

45 
	~<devi˚.h
>

77 
	sknowndev
 {

78 *
	mkd_«me
;

79 *
	mkd_øw«me
;

80 
devi˚
 *
	mkd_devi˚
;

81 
vnode
 *
	mkd_vnode
;

82 
fs
 *
	mkd_fs
;

85 
DECLARRAY
(
knowndev
);

86 
DEFARRAY
(
knowndev
, );

88 
knowndev¨øy
 *
	gknowndevs
;

91 
lock
 *
	gvfs_biglock
;

92 
	gvfs_biglock_dïth
;

99 
	$vfs_boŸ°øp
()

101 
knowndevs
 = 
	`knowndev¨øy_¸óã
();

102 i‡(
knowndevs
==
NULL
) {

103 
	`∑nic
("vfs: CouldÇot create knowndevsárray\n");

106 
vfs_biglock
 = 
	`lock_¸óã
("vfs_biglock");

107 i‡(
vfs_biglock
==
NULL
) {

108 
	`∑nic
("vfs: CouldÇot create vfs bigÜock\n");

110 
vfs_biglock_dïth
 = 0;

112 
	`devnuŒ_¸óã
();

113 
	}
}

123 
	$vfs_biglock_acquúe
()

125 i‡(!
	`lock_do_i_hﬁd
(
vfs_biglock
)) {

126 
	`lock_acquúe
(
vfs_biglock
);

128 
vfs_biglock_dïth
++;

129 
	}
}

132 
	$vfs_biglock_ªÀa£
()

134 
	`KASSERT
(
	`lock_do_i_hﬁd
(
vfs_biglock
));

135 
	`KASSERT
(
vfs_biglock_dïth
 > 0);

136 
vfs_biglock_dïth
--;

137 i‡(
vfs_biglock_dïth
 == 0) {

138 
	`lock_ªÀa£
(
vfs_biglock
);

140 
	}
}

142 
boﬁ


143 
	$vfs_biglock_do_i_hﬁd
()

145  
	`lock_do_i_hﬁd
(
vfs_biglock
);

146 
	}
}

152 
	$vfs_sync
()

154 
knowndev
 *
dev
;

155 
i
, 
num
;

157 
	`vfs_biglock_acquúe
();

159 
num
 = 
	`knowndev¨øy_num
(
knowndevs
);

160 
i
=0; i<
num
; i++) {

161 
dev
 = 
	`knowndev¨øy_gë
(
knowndevs
, 
i
);

162 i‡(
dev
->
kd_fs
 !
NULL
) {

163  
	`FSOP_SYNC
(
dev
->
kd_fs
);

167 
	`vfs_biglock_ªÀa£
();

170 
	}
}

177 
	$vfs_gëroŸ
(c⁄° *
dev«me
, 
vnode
 **
ªsu…
)

179 
knowndev
 *
kd
;

180 
i
, 
num
;

182 
	`KASSERT
(
	`vfs_biglock_do_i_hﬁd
());

184 
num
 = 
	`knowndev¨øy_num
(
knowndevs
);

185 
i
=0; i<
num
; i++) {

186 
kd
 = 
	`knowndev¨øy_gë
(
knowndevs
, 
i
);

197 i‡(
kd
->
kd_fs
!=
NULL
) {

198 c⁄° *
vﬁ«me
;

199 
vﬁ«me
 = 
	`FSOP_GETVOLNAME
(
kd
->
kd_fs
);

201 i‡(!
	`°rcmp
(
kd
->
kd_«me
, 
dev«me
) ||

202 (
vﬁ«me
!=
NULL
 && !
	`°rcmp
(vﬁ«me, 
dev«me
))) {

203 *
ªsu…
 = 
	`FSOP_GETROOT
(
kd
->
kd_fs
);

208 i‡(
kd
->
kd_øw«me
!=
NULL
 &&

209 !
	`°rcmp
(
kd
->
kd_«me
, 
dev«me
)) {

210  
ENXIO
;

219 i‡(!
	`°rcmp
(
kd
->
kd_«me
, 
dev«me
)) {

220 
	`KASSERT
(
kd
->
kd_fs
==
NULL
);

221 
	`KASSERT
(
kd
->
kd_øw«me
==
NULL
);

222 
	`KASSERT
(
kd
->
kd_devi˚
 !
NULL
);

223 
	`VOP_INCREF
(
kd
->
kd_vnode
);

224 *
ªsu…
 = 
kd
->
kd_vnode
;

232 i‡(
kd
->
kd_øw«me
!=
NULL
 && !
	`°rcmp
(kd->kd_øw«me, 
dev«me
)) {

233 
	`KASSERT
(
kd
->
kd_devi˚
 !
NULL
);

234 
	`VOP_INCREF
(
kd
->
kd_vnode
);

235 *
ªsu…
 = 
kd
->
kd_vnode
;

250  
ENODEV
;

251 
	}
}

257 
	$vfs_gëdev«me
(
fs
 *fs)

259 
knowndev
 *
kd
;

260 
i
, 
num
;

262 
	`KASSERT
(
fs
 !
NULL
);

264 
	`KASSERT
(
	`vfs_biglock_do_i_hﬁd
());

266 
num
 = 
	`knowndev¨øy_num
(
knowndevs
);

267 
i
=0; i<
num
; i++) {

268 
kd
 = 
	`knowndev¨øy_gë
(
knowndevs
, 
i
);

270 i‡(
kd
->
kd_fs
 =
fs
) {

277  
kd
->
kd_«me
;

281  
NULL
;

282 
	}
}

289 
	$mkøw«me
(c⁄° *
«me
)

291 *
s
 = 
	`kmÆloc
(
	`°æí
(
«me
)+3+1);

292 i‡(!
s
) {

293  
NULL
;

295 
	`°r˝y
(
s
, 
«me
);

296 
	`°rˇt
(
s
, "raw");

297  
s
;

298 
	}
}

306 
ölöe


308 
	$ßme°rög
(c⁄° *
a
, c⁄° *
b
)

310 i‡(
a
==
NULL
 || 
b
==NULL) {

313  !
	`°rcmp
(
a
, 
b
);

314 
	}
}

321 
ölöe


323 
	$ßme°rög3
(c⁄° *
a
, c⁄° *
b
, c⁄° *
c
, c⁄° *
d
)

325  
	`ßme°rög
(
a
,
b
Ë|| same°rög◊,
c
Ë|| same°rög◊,
d
);

326 
	}
}

335 
	$bad«mes
(c⁄° *
n1
, c⁄° *
n2
, c⁄° *
n3
)

337 c⁄° *
vﬁ«me
;

338 
i
, 
num
;

339 
knowndev
 *
kd
;

341 
	`KASSERT
(
	`vfs_biglock_do_i_hﬁd
());

343 
num
 = 
	`knowndev¨øy_num
(
knowndevs
);

344 
i
=0; i<
num
; i++) {

345 
kd
 = 
	`knowndev¨øy_gë
(
knowndevs
, 
i
);

347 i‡(
kd
->
kd_fs
) {

348 
vﬁ«me
 = 
	`FSOP_GETVOLNAME
(
kd
->
kd_fs
);

349 i‡(
	`ßme°rög3
(
vﬁ«me
, 
n1
, 
n2
, 
n3
)) {

354 i‡(
	`ßme°rög3
(
kd
->
kd_øw«me
, 
n1
, 
n2
, 
n3
) ||

355 
	`ßme°rög3
(
kd
->
kd_«me
, 
n1
, 
n2
, 
n3
)) {

361 
	}
}

372 
	$vfs_dﬂdd
(c⁄° *
d«me
, 
mou¡abÀ
, 
devi˚
 *
dev
, 
fs
 *fs)

374 *
«me
=
NULL
, *
øw«me
=NULL;

375 
knowndev
 *
kd
=
NULL
;

376 
vnode
 *vnode=
NULL
;

377 c⁄° *
vﬁ«me
=
NULL
;

378 
ödex
;

379 
ªsu…
;

381 
	`vfs_biglock_acquúe
();

383 
«me
 = 
	`k°rdup
(
d«me
);

384 i‡(
«me
==
NULL
) {

385 
nomem
;

387 i‡(
mou¡abÀ
) {

388 
øw«me
 = 
	`mkøw«me
(
«me
);

389 i‡(
øw«me
==
NULL
) {

390 
nomem
;

394 
vnode
 = 
	`dev_¸óã_vnode
(
dev
);

395 i‡(
vnode
==
NULL
) {

396 
nomem
;

399 
kd
 = 
	`kmÆloc
((
knowndev
));

400 i‡(
kd
==
NULL
) {

401 
nomem
;

404 
kd
->
kd_«me
 = 
«me
;

405 
kd
->
kd_øw«me
 = 
øw«me
;

406 
kd
->
kd_devi˚
 = 
dev
;

407 
kd
->
kd_vnode
 = 
vnode
;

408 
kd
->
kd_fs
 = 
fs
;

410 i‡(
fs
!=
NULL
) {

411 
vﬁ«me
 = 
	`FSOP_GETVOLNAME
(
fs
);

414 i‡(
	`bad«mes
(
«me
, 
øw«me
, 
vﬁ«me
)) {

415 
	`vfs_biglock_ªÀa£
();

416  
EEXIST
;

419 
ªsu…
 = 
	`knowndev¨øy_add
(
knowndevs
, 
kd
, &
ödex
);

421 i‡(
ªsu…
 =0 && 
dev
 !
NULL
) {

423 
dev
->
d_devnumbî
 = 
ödex
+1;

426 
	`vfs_biglock_ªÀa£
();

427  
ªsu…
;

429 
nomem
:

431 i‡(
«me
) {

432 
	`k‰ì
(
«me
);

434 i‡(
øw«me
) {

435 
	`k‰ì
(
øw«me
);

437 i‡(
vnode
) {

438 
	`k‰ì
(
vnode
);

440 i‡(
kd
) {

441 
	`k‰ì
(
kd
);

444 
	`vfs_biglock_ªÀa£
();

445  
ENOMEM
;

446 
	}
}

453 
	$vfs_adddev
(c⁄° *
dev«me
, 
devi˚
 *
dev
, 
mou¡abÀ
)

455  
	`vfs_dﬂdd
(
dev«me
, 
mou¡abÀ
, 
dev
, 
NULL
);

456 
	}
}

464 
	$vfs_addfs
(c⁄° *
dev«me
, 
fs
 *fs)

466  
	`vfs_dﬂdd
(
dev«me
, 0, 
NULL
, 
fs
);

467 
	}
}

477 
	$födmou¡
(c⁄° *
dev«me
, 
knowndev
 **
ªsu…
)

479 
knowndev
 *
dev
;

480 
i
, 
num
;

481 
boﬁ
 
found
 = 
Ál£
;

483 
	`KASSERT
(
	`vfs_biglock_do_i_hﬁd
());

485 
num
 = 
	`knowndev¨øy_num
(
knowndevs
);

486 
i
=0; !
found
 && i<
num
; i++) {

487 
dev
 = 
	`knowndev¨øy_gë
(
knowndevs
, 
i
);

488 i‡(
dev
->
kd_øw«me
==
NULL
) {

493 i‡(!
	`°rcmp
(
dev«me
, 
dev
->
kd_«me
)) {

494 *
ªsu…
 = 
dev
;

495 
found
 = 
åue
;

499  
found
 ? 0 : 
ENODEV
;

500 
	}
}

509 
vfs_mou¡
(c⁄° *
dev«me
, *
d©a
,

510 (*
mou¡func
)(*
d©a
, 
devi˚
 *, 
fs
 **
ªt
))

512 c⁄° *
vﬁ«me
;

513 
knowndev
 *
kd
;

514 
fs
 *fs;

515 
ªsu…
;

517 
	`vfs_biglock_acquúe
();

519 
ªsu…
 = 
	`födmou¡
(
dev«me
, &
kd
);

520 i‡(
ªsu…
) {

521 
	`vfs_biglock_ªÀa£
();

522  
ªsu…
;

525 i‡(
kd
->
kd_fs
 !
NULL
) {

526 
	`vfs_biglock_ªÀa£
();

527  
EBUSY
;

529 
	`KASSERT
(
kd
->
kd_øw«me
 !
NULL
);

530 
	`KASSERT
(
kd
->
kd_devi˚
 !
NULL
);

532 
ªsu…
 = 
	`mou¡func
(
d©a
, 
kd
->
kd_devi˚
, &
fs
);

533 i‡(
ªsu…
) {

534 
	`vfs_biglock_ªÀa£
();

535  
ªsu…
;

538 
	`KASSERT
(
fs
 !
NULL
);

540 
kd
->
kd_fs
 = 
fs
;

542 
vﬁ«me
 = 
	`FSOP_GETVOLNAME
(
fs
);

543 
	`k¥ötf
("vfs: Mounted %s: on %s\n",

544 
vﬁ«me
 ? vﬁ«mê: 
kd
->
kd_«me
, kd->kd_name);

546 
	`vfs_biglock_ªÀa£
();

548 
	}
}

555 
	$vfs_unmou¡
(c⁄° *
dev«me
)

557 
knowndev
 *
kd
;

558 
ªsu…
;

560 
	`vfs_biglock_acquúe
();

562 
ªsu…
 = 
	`födmou¡
(
dev«me
, &
kd
);

563 i‡(
ªsu…
) {

564 
Áû
;

567 i‡(
kd
->
kd_fs
 =
NULL
) {

568 
ªsu…
 = 
EINVAL
;

569 
Áû
;

571 
	`KASSERT
(
kd
->
kd_øw«me
 !
NULL
);

572 
	`KASSERT
(
kd
->
kd_devi˚
 !
NULL
);

574 
ªsu…
 = 
	`FSOP_SYNC
(
kd
->
kd_fs
);

575 i‡(
ªsu…
) {

576 
Áû
;

579 
ªsu…
 = 
	`FSOP_UNMOUNT
(
kd
->
kd_fs
);

580 i‡(
ªsu…
) {

581 
Áû
;

584 
	`k¥ötf
("vfs: Unmou¡ed %s:\n", 
kd
->
kd_«me
);

587 
kd
->
kd_fs
 = 
NULL
;

589 
	`KASSERT
(
ªsu…
==0);

591 
Áû
:

592 
	`vfs_biglock_ªÀa£
();

593  
ªsu…
;

594 
	}
}

600 
	$vfs_unmou¡Æl
()

602 
knowndev
 *
dev
;

603 
i
, 
num
;

604 
ªsu…
;

606 
	`vfs_biglock_acquúe
();

608 
num
 = 
	`knowndev¨øy_num
(
knowndevs
);

609 
i
=0; i<
num
; i++) {

610 
dev
 = 
	`knowndev¨øy_gë
(
knowndevs
, 
i
);

611 i‡(
dev
->
kd_øw«me
 =
NULL
) {

615 i‡(
dev
->
kd_fs
 =
NULL
) {

620 
	`k¥ötf
("vfs: Unmou¡ög %s:\n", 
dev
->
kd_«me
);

622 
ªsu…
 = 
	`FSOP_SYNC
(
dev
->
kd_fs
);

623 i‡(
ªsu…
) {

624 
	`k¥ötf
("vfs: Warning: sync failed for %s: %s,Årying "

625 "agaö\n", 
dev
->
kd_«me
, 
	`°ªº‹
(
ªsu…
));

627 
ªsu…
 = 
	`FSOP_SYNC
(
dev
->
kd_fs
);

628 i‡(
ªsu…
) {

629 
	`k¥ötf
("vfs: Warning: sync failed secondÅime"

631 
dev
->
kd_«me
, 
	`°ªº‹
(
ªsu…
));

636 
ªsu…
 = 
	`FSOP_UNMOUNT
(
dev
->
kd_fs
);

637 i‡(
ªsu…
 =
EBUSY
) {

638 
	`k¥ötf
("vfs: Cannot unmount %s: (busy)\n",

639 
dev
->
kd_«me
);

642 i‡(
ªsu…
) {

643 
	`k¥ötf
("vfs: Warning: unmount failed for %s:"

645 
dev
->
kd_«me
, 
	`°ªº‹
(
ªsu…
));

650 
dev
->
kd_fs
 = 
NULL
;

653 
	`vfs_biglock_ªÀa£
();

656 
	}
}

	@vfs/vfslookup.c

34 
	~<ty≥s.h
>

35 
	~<kîn/î∫o.h
>

36 
	~<limôs.h
>

37 
	~<lib.h
>

38 
	~<synch.h
>

39 
	~<vfs.h
>

40 
	~<fs.h
>

41 
	~<vnode.h
>

43 
vnode
 *
	gboŸfs_vnode
 = 
NULL
;

50 
	$ch™ge_boŸfs
(
vnode
 *
√wvn
)

52 
vnode
 *
ﬁdvn
;

54 
ﬁdvn
 = 
boŸfs_vnode
;

55 
boŸfs_vnode
 = 
√wvn
;

57 i‡(
ﬁdvn
 !
NULL
) {

58 
	`VOP_DECREF
(
ﬁdvn
);

60 
	}
}

71 
	$vfs_£tboŸfs
(c⁄° *
f¢ame
)

73 
tmp
[
NAME_MAX
+1];

74 *
s
;

75 
ªsu…
;

76 
vnode
 *
√wguy
;

78 
	`vfs_biglock_acquúe
();

80 
	`¢¥ötf
(
tmp
, —mp)-1, "%s", 
f¢ame
);

81 
s
 = 
	`°rchr
(
tmp
, ':');

82 i‡(
s
) {

84 i‡(
	`°æí
(
s
)>0) {

85 
	`vfs_biglock_ªÀa£
();

86  
EINVAL
;

90 
	`°rˇt
(
tmp
, ":");

93 
ªsu…
 = 
	`vfs_chdú
(
tmp
);

94 i‡(
ªsu…
) {

95 
	`vfs_biglock_ªÀa£
();

96  
ªsu…
;

99 
ªsu…
 = 
	`vfs_gëcurdú
(&
√wguy
);

100 i‡(
ªsu…
) {

101 
	`vfs_biglock_ªÀa£
();

102  
ªsu…
;

105 
	`ch™ge_boŸfs
(
√wguy
);

107 
	`vfs_biglock_ªÀa£
();

109 
	}
}

115 
	$vfs_˛órboŸfs
()

117 
	`vfs_biglock_acquúe
();

118 
	`ch™ge_boŸfs
(
NULL
);

119 
	`vfs_biglock_ªÀa£
();

120 
	}
}

130 
	$gëdevi˚
(*
∑th
, **
sub∑th
, 
vnode
 **
°¨tvn
)

132 
¶ash
=-1, 
cﬁ⁄
=-1, 
i
;

133 
vnode
 *
vn
;

134 
ªsu…
;

136 
	`KASSERT
(
	`vfs_biglock_do_i_hﬁd
());

142 
i
=0; 
∑th
[i]; i++) {

143 i‡(
∑th
[
i
]==':') {

144 
cﬁ⁄
 = 
i
;

147 i‡(
∑th
[
i
]=='/') {

148 
¶ash
 = 
i
;

153 i‡(
cﬁ⁄
 < 0 && 
¶ash
 != 0) {

161 *
sub∑th
 = 
∑th
;

162  
	`vfs_gëcurdú
(
°¨tvn
);

165 i‡(
cﬁ⁄
>0) {

167 
∑th
[
cﬁ⁄
]=0;

168 
∑th
[
cﬁ⁄
+1]=='/') {

170 
cﬁ⁄
++;

172 *
sub∑th
 = &
∑th
[
cﬁ⁄
+1];

174 
ªsu…
 = 
	`vfs_gëroŸ
(
∑th
, 
°¨tvn
);

175 i‡(
ªsu…
) {

176  
ªsu…
;

188 
	`KASSERT
(
cﬁ⁄
==0 || 
¶ash
==0);

190 i‡(
∑th
[0]=='/') {

191 i‡(
boŸfs_vnode
==
NULL
) {

192  
ENOENT
;

194 
	`VOP_INCREF
(
boŸfs_vnode
);

195 *
°¨tvn
 = 
boŸfs_vnode
;

198 
	`KASSERT
(
∑th
[0]==':');

200 
ªsu…
 = 
	`vfs_gëcurdú
(&
vn
);

201 i‡(
ªsu…
) {

202  
ªsu…
;

209 
	`KASSERT
(
vn
->
vn_fs
!=
NULL
);

211 *
°¨tvn
 = 
	`FSOP_GETROOT
(
vn
->
vn_fs
);

213 
	`VOP_DECREF
(
vn
);

216 
∑th
[1]=='/') {

218 
∑th
++;

221 *
sub∑th
 = 
∑th
+1;

224 
	}
}

232 
	$vfs_look∑ª¡
(*
∑th
, 
vnode
 **
ªtvÆ
,

233 *
buf
, 
size_t
 
buÊí
)

235 
vnode
 *
°¨tvn
;

236 
ªsu…
;

238 
	`vfs_biglock_acquúe
();

240 
ªsu…
 = 
	`gëdevi˚
(
∑th
, &∑th, &
°¨tvn
);

241 i‡(
ªsu…
) {

242 
	`vfs_biglock_ªÀa£
();

243  
ªsu…
;

246 i‡(
	`°æí
(
∑th
)==0) {

252 
ªsu…
 = 
EINVAL
;

255 
ªsu…
 = 
	`VOP_LOOKPARENT
(
°¨tvn
, 
∑th
, 
ªtvÆ
, 
buf
, 
buÊí
);

258 
	`VOP_DECREF
(
°¨tvn
);

260 
	`vfs_biglock_ªÀa£
();

261  
ªsu…
;

262 
	}
}

265 
	$vfs_lookup
(*
∑th
, 
vnode
 **
ªtvÆ
)

267 
vnode
 *
°¨tvn
;

268 
ªsu…
;

270 
	`vfs_biglock_acquúe
();

272 
ªsu…
 = 
	`gëdevi˚
(
∑th
, &∑th, &
°¨tvn
);

273 i‡(
ªsu…
) {

274 
	`vfs_biglock_ªÀa£
();

275  
ªsu…
;

278 i‡(
	`°æí
(
∑th
)==0) {

279 *
ªtvÆ
 = 
°¨tvn
;

280 
	`vfs_biglock_ªÀa£
();

284 
ªsu…
 = 
	`VOP_LOOKUP
(
°¨tvn
, 
∑th
, 
ªtvÆ
);

286 
	`VOP_DECREF
(
°¨tvn
);

287 
	`vfs_biglock_ªÀa£
();

288  
ªsu…
;

289 
	}
}

	@vfs/vfspath.c

34 
	~<ty≥s.h
>

35 
	~<kîn/î∫o.h
>

36 
	~<kîn/f˙é.h
>

37 
	~<limôs.h
>

38 
	~<lib.h
>

39 
	~<vfs.h
>

40 
	~<vnode.h
>

45 
	$vfs_›í
(*
∑th
, 
›íÊags
, 
mode_t
 
mode
, 
vnode
 **
ªt
)

47 
how
;

48 
ªsu…
;

49 
ˇnwrôe
;

50 
vnode
 *
vn
 = 
NULL
;

52 
how
 = 
›íÊags
 & 
O_ACCMODE
;

54 
how
) {

55 
O_RDONLY
:

56 
ˇnwrôe
=0;

58 
O_WRONLY
:

59 
O_RDWR
:

60 
ˇnwrôe
=1;

63  
EINVAL
;

66 i‡(
›íÊags
 & 
O_CREAT
) {

67 
«me
[
NAME_MAX
+1];

68 
vnode
 *
dú
;

69 
ex˛
 = (
›íÊags
 & 
O_EXCL
)!=0;

71 
ªsu…
 = 
	`vfs_look∑ª¡
(
∑th
, &
dú
, 
«me
, (name));

72 i‡(
ªsu…
) {

73  
ªsu…
;

76 
ªsu…
 = 
	`VOP_CREAT
(
dú
, 
«me
, 
ex˛
, 
mode
, &
vn
);

78 
	`VOP_DECREF
(
dú
);

81 
ªsu…
 = 
	`vfs_lookup
(
∑th
, &
vn
);

84 i‡(
ªsu…
) {

85  
ªsu…
;

88 
	`KASSERT
(
vn
 !
NULL
);

90 
ªsu…
 = 
	`VOP_OPEN
(
vn
, 
›íÊags
);

91 i‡(
ªsu…
) {

92 
	`VOP_DECREF
(
vn
);

93  
ªsu…
;

96 
	`VOP_INCOPEN
(
vn
);

98 i‡(
›íÊags
 & 
O_TRUNC
) {

99 i‡(
ˇnwrôe
==0) {

100 
ªsu…
 = 
EINVAL
;

103 
ªsu…
 = 
	`VOP_TRUNCATE
(
vn
, 0);

105 i‡(
ªsu…
) {

106 
	`VOP_DECOPEN
(
vn
);

107 
	`VOP_DECREF
(
vn
);

108  
ªsu…
;

112 *
ªt
 = 
vn
;

115 
	}
}

119 
	$vfs_˛o£
(
vnode
 *
vn
)

135 
	`VOP_DECOPEN
(
vn
);

136 
	`VOP_DECREF
(
vn
);

137 
	}
}

141 
	$vfs_ªmove
(*
∑th
)

143 
vnode
 *
dú
;

144 
«me
[
NAME_MAX
+1];

145 
ªsu…
;

147 
ªsu…
 = 
	`vfs_look∑ª¡
(
∑th
, &
dú
, 
«me
, (name));

148 i‡(
ªsu…
) {

149  
ªsu…
;

152 
ªsu…
 = 
	`VOP_REMOVE
(
dú
, 
«me
);

153 
	`VOP_DECREF
(
dú
);

155  
ªsu…
;

156 
	}
}

160 
	$vfs_ª«me
(*
ﬁd∑th
, *
√w∑th
)

162 
vnode
 *
ﬁddú
;

163 
ﬁd«me
[
NAME_MAX
+1];

164 
vnode
 *
√wdú
;

165 
√w«me
[
NAME_MAX
+1];

166 
ªsu…
;

168 
ªsu…
 = 
	`vfs_look∑ª¡
(
ﬁd∑th
, &
ﬁddú
, 
ﬁd«me
, (oldname));

169 i‡(
ªsu…
) {

170  
ªsu…
;

172 
ªsu…
 = 
	`vfs_look∑ª¡
(
√w∑th
, &
√wdú
, 
√w«me
, (newname));

173 i‡(
ªsu…
) {

174 
	`VOP_DECREF
(
ﬁddú
);

175  
ªsu…
;

178 i‡(
ﬁddú
->
vn_fs
==
NULL
 || 
√wdú
->vn_fs==NULL ||

179 
ﬁddú
->
vn_fs
 !
√wdú
->vn_fs) {

180 
	`VOP_DECREF
(
√wdú
);

181 
	`VOP_DECREF
(
ﬁddú
);

182  
EXDEV
;

185 
ªsu…
 = 
	`VOP_RENAME
(
ﬁddú
, 
ﬁd«me
, 
√wdú
, 
√w«me
);

187 
	`VOP_DECREF
(
√wdú
);

188 
	`VOP_DECREF
(
ﬁddú
);

190  
ªsu…
;

191 
	}
}

195 
	$vfs_lök
(*
ﬁd∑th
, *
√w∑th
)

197 
vnode
 *
ﬁdfûe
;

198 
vnode
 *
√wdú
;

199 
√w«me
[
NAME_MAX
+1];

200 
ªsu…
;

202 
ªsu…
 = 
	`vfs_lookup
(
ﬁd∑th
, &
ﬁdfûe
);

203 i‡(
ªsu…
) {

204  
ªsu…
;

206 
ªsu…
 = 
	`vfs_look∑ª¡
(
√w∑th
, &
√wdú
, 
√w«me
, (newname));

207 i‡(
ªsu…
) {

208 
	`VOP_DECREF
(
ﬁdfûe
);

209  
ªsu…
;

212 i‡(
ﬁdfûe
->
vn_fs
==
NULL
 || 
√wdú
->vn_fs==NULL ||

213 
ﬁdfûe
->
vn_fs
 !
√wdú
->vn_fs) {

214 
	`VOP_DECREF
(
√wdú
);

215 
	`VOP_DECREF
(
ﬁdfûe
);

216  
EXDEV
;

219 
ªsu…
 = 
	`VOP_LINK
(
√wdú
, 
√w«me
, 
ﬁdfûe
);

221 
	`VOP_DECREF
(
√wdú
);

222 
	`VOP_DECREF
(
ﬁdfûe
);

224  
ªsu…
;

225 
	}
}

235 
	$vfs_symlök
(c⁄° *
c⁄ã¡s
, *
∑th
)

237 
vnode
 *
√wdú
;

238 
√w«me
[
NAME_MAX
+1];

239 
ªsu…
;

241 
ªsu…
 = 
	`vfs_look∑ª¡
(
∑th
, &
√wdú
, 
√w«me
, (newname));

242 i‡(
ªsu…
) {

243  
ªsu…
;

246 
ªsu…
 = 
	`VOP_SYMLINK
(
√wdú
, 
√w«me
, 
c⁄ã¡s
);

247 
	`VOP_DECREF
(
√wdú
);

249  
ªsu…
;

250 
	}
}

260 
	$vfs_ªadlök
(*
∑th
, 
uio
 *uio)

262 
vnode
 *
vn
;

263 
ªsu…
;

265 
ªsu…
 = 
	`vfs_lookup
(
∑th
, &
vn
);

266 i‡(
ªsu…
) {

267  
ªsu…
;

270 
ªsu…
 = 
	`VOP_READLINK
(
vn
, 
uio
);

272 
	`VOP_DECREF
(
vn
);

274  
ªsu…
;

275 
	}
}

281 
	$vfs_mkdú
(*
∑th
, 
mode_t
 
mode
)

283 
vnode
 *
∑ª¡
;

284 
«me
[
NAME_MAX
+1];

285 
ªsu…
;

287 
ªsu…
 = 
	`vfs_look∑ª¡
(
∑th
, &
∑ª¡
, 
«me
, (name));

288 i‡(
ªsu…
) {

289  
ªsu…
;

292 
ªsu…
 = 
	`VOP_MKDIR
(
∑ª¡
, 
«me
, 
mode
);

294 
	`VOP_DECREF
(
∑ª¡
);

296  
ªsu…
;

297 
	}
}

303 
	$vfs_rmdú
(*
∑th
)

305 
vnode
 *
∑ª¡
;

306 
«me
[
NAME_MAX
+1];

307 
ªsu…
;

309 
ªsu…
 = 
	`vfs_look∑ª¡
(
∑th
, &
∑ª¡
, 
«me
, (name));

310 i‡(
ªsu…
) {

311  
ªsu…
;

314 
ªsu…
 = 
	`VOP_RMDIR
(
∑ª¡
, 
«me
);

316 
	`VOP_DECREF
(
∑ª¡
);

318  
ªsu…
;

319 
	}
}

	@vfs/vnode.c

33 
	~<ty≥s.h
>

34 
	~<kîn/î∫o.h
>

35 
	~<lib.h
>

36 
	~<synch.h
>

37 
	~<vfs.h
>

38 
	~<vnode.h
>

45 
	$vnode_öô
(
vnode
 *
vn
, c⁄° 
vnode_›s
 *
›s
,

46 
fs
 *fs, *
fsd©a
)

48 
	`KASSERT
(
vn
!=
NULL
);

49 
	`KASSERT
(
›s
!=
NULL
);

51 
vn
->
vn_›s
 = 
›s
;

52 
vn
->
vn_ªfcou¡
 = 1;

53 
vn
->
vn_›ícou¡
 = 0;

54 
vn
->
vn_fs
 = 
fs
;

55 
vn
->
vn_d©a
 = 
fsd©a
;

57 
	}
}

64 
	$vnode_˛ónup
(
vnode
 *
vn
)

66 
	`KASSERT
(
vn
->
vn_ªfcou¡
==1);

67 
	`KASSERT
(
vn
->
vn_›ícou¡
==0);

69 
vn
->
vn_›s
 = 
NULL
;

70 
vn
->
vn_ªfcou¡
 = 0;

71 
vn
->
vn_›ícou¡
 = 0;

72 
vn
->
vn_fs
 = 
NULL
;

73 
vn
->
vn_d©a
 = 
NULL
;

74 
	}
}

82 
	$vnode_ö¸ef
(
vnode
 *
vn
)

84 
	`KASSERT
(
vn
 !
NULL
);

86 
	`vfs_biglock_acquúe
();

88 
vn
->
vn_ªfcou¡
++;

90 
	`vfs_biglock_ªÀa£
();

91 
	}
}

99 
	$vnode_de¸ef
(
vnode
 *
vn
)

101 
ªsu…
;

103 
	`KASSERT
(
vn
 !
NULL
);

105 
	`vfs_biglock_acquúe
();

107 
	`KASSERT
(
vn
->
vn_ªfcou¡
>0);

108 i‡(
vn
->
vn_ªfcou¡
>1) {

109 
vn
->
vn_ªfcou¡
--;

112 
ªsu…
 = 
	`VOP_RECLAIM
(
vn
);

113 i‡(
ªsu…
 !0 &&Ñesu… !
EBUSY
) {

115 
	`k¥ötf
("vfs: Warning: VOP_RECLAIM: %s\n",

116 
	`°ªº‹
(
ªsu…
));

120 
	`vfs_biglock_ªÀa£
();

121 
	}
}

128 
	$vnode_öc›í
(
vnode
 *
vn
)

130 
	`KASSERT
(
vn
 !
NULL
);

132 
	`vfs_biglock_acquúe
();

133 
vn
->
vn_›ícou¡
++;

134 
	`vfs_biglock_ªÀa£
();

135 
	}
}

142 
	$vnode_dec›í
(
vnode
 *
vn
)

144 
ªsu…
;

146 
	`KASSERT
(
vn
 !
NULL
);

148 
	`vfs_biglock_acquúe
();

150 
	`KASSERT
(
vn
->
vn_›ícou¡
>0);

151 
vn
->
vn_›ícou¡
--;

153 i‡(
vn
->
vn_›ícou¡
 > 0) {

154 
	`vfs_biglock_ªÀa£
();

158 
ªsu…
 = 
	`VOP_CLOSE
(
vn
);

159 i‡(
ªsu…
) {

163 
	`k¥ötf
("vfs: W¨nög: VOP_CLOSE: %s\n", 
	`°ªº‹
(
ªsu…
));

166 
	`vfs_biglock_ªÀa£
();

167 
	}
}

174 
	$vnode_check
(
vnode
 *
v
, c⁄° *
›°r
)

176 
	`vfs_biglock_acquúe
();

178 i‡(
v
 =
NULL
) {

179 
	`∑nic
("vnode_check: v›_%s:ÇuŒ vnode\n", 
›°r
);

181 i‡(
v
 == (*)0xdeadbeef) {

182 
	`∑nic
("vnode_check: v›_%s: dódbì‡vnode\n", 
›°r
);

185 i‡(
v
->
vn_›s
 =
NULL
) {

186 
	`∑nic
("vnode_check: v›_%s:ÇuŒ op†poöãr\n", 
›°r
);

188 i‡(
v
->
vn_›s
 == (*)0xdeadbeef) {

189 
	`∑nic
("vnode_check: v›_%s: dódbì‡›†poöãr\n", 
›°r
);

192 i‡(
v
->
vn_›s
->
v›_magic
 !
VOP_MAGIC
) {

193 
	`∑nic
("vnode_check: vop_%s: ops with bad magicÇumber %lx\n",

194 
›°r
, 
v
->
vn_›s
->
v›_magic
);

201 i‡(
v
->
vn_fs
 == (*)0xdeadbeef) {

202 
	`∑nic
("vnode_check: v›_%s: dódbì‡f†poöãr\n", 
›°r
);

205 i‡(
v
->
vn_ªfcou¡
 < 0) {

206 
	`∑nic
("vnode_check: v›_%s:Çeg©ivêªfcou¡ %d\n", 
›°r
,

207 
v
->
vn_ªfcou¡
);

209 i‡(
v
->
vn_ªfcou¡
 =0 && 
	`°rcmp
(
›°r
, "reclaim")) {

210 
	`∑nic
("vnode_check: v›_%s: zîÿªfcou¡\n", 
›°r
);

212 i‡(
v
->
vn_ªfcou¡
 > 0x100000) {

213 
	`k¥ötf
("vnode_check: vop_%s: warning:ÜargeÑefcount %d\n",

214 
›°r
, 
v
->
vn_ªfcou¡
);

217 i‡(
v
->
vn_›ícou¡
 < 0) {

218 
	`∑nic
("vnode_check: v›_%s:Çeg©ivê›ícou¡ %d\n", 
›°r
,

219 
v
->
vn_›ícou¡
);

221 i‡(
v
->
vn_›ícou¡
 > 0x100000) {

222 
	`k¥ötf
("vnode_check: vop_%s: warning:Üarge opencount %d\n",

223 
›°r
, 
v
->
vn_›ícou¡
);

226 
	`vfs_biglock_ªÀa£
();

227 
	}
}

	@vm/copyinout.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<lib.h
>

33 
	~<£tjmp.h
>

34 
	~<thªad.h
>

35 
	~<cuºít.h
>

36 
	~<vm.h
>

37 
	~<c›yöout.h
>

100 
	$c›yÁû
()

102 
	`l⁄gjmp
(
cuπhªad
->
t_machdï
.
tm_c›yjmp
, 1);

103 
	}
}

118 
	$c›ycheck
(
c⁄°_u£Ωå_t
 
u£Ωå
, 
size_t
 
Àn
, size_à*
°›Àn
)

120 
vaddr_t
 
bŸ
, 
t›
;

122 *
°›Àn
 = 
Àn
;

124 
bŸ
 = (
vaddr_t
Ë
u£Ωå
;

125 
t›
 = 
bŸ
+
Àn
-1;

127 i‡(
t›
 < 
bŸ
) {

129  
EFAULT
;

132 i‡(
bŸ
 >
USERSPACETOP
) {

134  
EFAULT
;

137 i‡(
t›
 >
USERSPACETOP
) {

139 *
°›Àn
 = 
USERSPACETOP
 - 
bŸ
;

143 
	}
}

153 
	$c›yö
(
c⁄°_u£Ωå_t
 
u£r§c
, *
de°
, 
size_t
 
Àn
)

155 
ªsu…
;

156 
size_t
 
°›Àn
;

158 
ªsu…
 = 
	`c›ycheck
(
u£r§c
, 
Àn
, &
°›Àn
);

159 i‡(
ªsu…
) {

160  
ªsu…
;

162 i‡(
°›Àn
 !
Àn
) {

164  
EFAULT
;

167 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
c›yÁû
;

169 
ªsu…
 = 
	`£tjmp
(
cuπhªad
->
t_machdï
.
tm_c›yjmp
);

170 i‡(
ªsu…
) {

171 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
NULL
;

172  
EFAULT
;

175 
	`mem˝y
(
de°
, (c⁄° *)
u£r§c
, 
Àn
);

177 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
NULL
;

179 
	}
}

189 
	$c›yout
(c⁄° *
§c
, 
u£Ωå_t
 
u£rde°
, 
size_t
 
Àn
)

191 
ªsu…
;

192 
size_t
 
°›Àn
;

194 
ªsu…
 = 
	`c›ycheck
(
u£rde°
, 
Àn
, &
°›Àn
);

195 i‡(
ªsu…
) {

196  
ªsu…
;

198 i‡(
°›Àn
 !
Àn
) {

200  
EFAULT
;

203 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
c›yÁû
;

205 
ªsu…
 = 
	`£tjmp
(
cuπhªad
->
t_machdï
.
tm_c›yjmp
);

206 i‡(
ªsu…
) {

207 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
NULL
;

208  
EFAULT
;

211 
	`mem˝y
((*)
u£rde°
, 
§c
, 
Àn
);

213 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
NULL
;

215 
	}
}

235 
	$c›y°r
(*
de°
, c⁄° *
§c
, 
size_t
 
maxÀn
, size_à
°›Àn
,

236 
size_t
 *
gŸÀn
)

238 
size_t
 
i
;

240 
i
=0; i<
maxÀn
 && i<
°›Àn
; i++) {

241 
de°
[
i
] = 
§c
[i];

242 i‡(
§c
[
i
] == 0) {

243 i‡(
gŸÀn
 !
NULL
) {

244 *
gŸÀn
 = 
i
+1;

249 i‡(
°›Àn
 < 
maxÀn
) {

251  
EFAULT
;

254  
ENAMETOOLONG
;

255 
	}
}

266 
	$c›yö°r
(
c⁄°_u£Ωå_t
 
u£r§c
, *
de°
, 
size_t
 
Àn
, size_à*
a˘uÆ
)

268 
ªsu…
;

269 
size_t
 
°›Àn
;

271 
ªsu…
 = 
	`c›ycheck
(
u£r§c
, 
Àn
, &
°›Àn
);

272 i‡(
ªsu…
) {

273  
ªsu…
;

276 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
c›yÁû
;

278 
ªsu…
 = 
	`£tjmp
(
cuπhªad
->
t_machdï
.
tm_c›yjmp
);

279 i‡(
ªsu…
) {

280 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
NULL
;

281  
EFAULT
;

284 
ªsu…
 = 
	`c›y°r
(
de°
, (c⁄° *)
u£r§c
, 
Àn
, 
°›Àn
, 
a˘uÆ
);

286 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
NULL
;

287  
ªsu…
;

288 
	}
}

299 
	$c›yout°r
(c⁄° *
§c
, 
u£Ωå_t
 
u£rde°
, 
size_t
 
Àn
, size_à*
a˘uÆ
)

301 
ªsu…
;

302 
size_t
 
°›Àn
;

304 
ªsu…
 = 
	`c›ycheck
(
u£rde°
, 
Àn
, &
°›Àn
);

305 i‡(
ªsu…
) {

306  
ªsu…
;

309 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
c›yÁû
;

311 
ªsu…
 = 
	`£tjmp
(
cuπhªad
->
t_machdï
.
tm_c›yjmp
);

312 i‡(
ªsu…
) {

313 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
NULL
;

314  
EFAULT
;

317 
ªsu…
 = 
	`c›y°r
((*)
u£rde°
, 
§c
, 
Àn
, 
°›Àn
, 
a˘uÆ
);

319 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
NULL
;

320  
ªsu…
;

321 
	}
}

	@vm/kmalloc.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<•ölock.h
>

33 
	~<vm.h
>

42 
	$fûl_dódbìf
(*
v±r
, 
size_t
 
Àn
)

44 
uöt32_t
 *
±r
 = 
v±r
;

45 
size_t
 
i
;

47 
i
=0; i<
Àn
/(
uöt32_t
); i++) {

48 
±r
[
i
] = 0xdeadbeef;

50 
	}
}

79 #unde‡
SLOW


80 #unde‡
SLOWER


84 #i‡
PAGE_SIZE
 == 4096

86 
	#NSIZES
 8

	)

87 c⁄° 
size_t
 
	gsizes
[
NSIZES
] = { 16, 32, 64, 128, 256, 512, 1024, 2048 };

89 
	#SMALLEST_SUBPAGE_SIZE
 16

	)

90 
	#LARGEST_SUBPAGE_SIZE
 2048

	)

92 #ñi‡
PAGE_SIZE
 == 8192

100 
	s‰ìli°
 {

101 
‰ìli°
 *
	m√xt
;

104 
	s∑gîef
 {

105 
∑gîef
 *
	m√xt_ßmesize
;

106 
∑gîef
 *
	m√xt_Æl
;

107 
vaddr_t
 
	m∑góddr_™d_blockty≥
;

108 
uöt16_t
 
	m‰ìli°_off£t
;

109 
uöt16_t
 
	mn‰ì
;

112 
	#INVALID_OFFSET
 (0xffff)

	)

114 
	#PR_PAGEADDR
(
¥
Ë(’r)->
∑góddr_™d_blockty≥
 & 
PAGE_FRAME
)

	)

115 
	#PR_BLOCKTYPE
(
¥
Ë(’r)->
∑góddr_™d_blockty≥
 & ~
PAGE_FRAME
)

	)

116 
	#MKPAB
(
∑
, 
blk
Ë((’a)&
PAGE_FRAME
Ë| ((blkË& ~PAGE_FRAME))

	)

138 
	#NPAGEREFS
 (
PAGE_SIZE
 / (
∑gîef
))

	)

139 
∑gîef
 
	g∑gîefs
[
NPAGEREFS
];

141 
	#INUSE_WORDS
 (
NPAGEREFS
/32)

	)

142 
uöt32_t
 
	g∑gîefs_öu£
[
INUSE_WORDS
];

145 
∑gîef
 *

146 
	$Ælo˝agîef
()

148 
i
,
j
;

149 
uöt32_t
 
k
;

151 
i
=0; i<
INUSE_WORDS
; i++) {

152 i‡(
∑gîefs_öu£
[
i
]==0xffffffff) {

156 
k
=1,
j
=0; k!=0; k<<=1,j++) {

157 i‡((
∑gîefs_öu£
[
i
] & 
k
)==0) {

158 
∑gîefs_öu£
[
i
] |
k
;

159  &
∑gîefs
[
i
*32 + 
j
];

162 
	`KASSERT
(0);

166  
NULL
;

167 
	}
}

171 
	$‰ì∑gîef
(
∑gîef
 *
p
)

173 
size_t
 
i
, 
j
;

174 
uöt32_t
 
k
;

176 
j
 = 
p
-
∑gîefs
;

177 
	`KASSERT
(
j
 < 
NPAGEREFS
);

178 
i
 = 
j
/32;

179 
k
 = ((
uöt32_t
)1Ë<< (
j
%32);

180 
	`KASSERT
((
∑gîefs_öu£
[
i
] & 
k
) != 0);

181 
∑gîefs_öu£
[
i
] &~
k
;

182 
	}
}

186 
∑gîef
 *
	gsizeba£s
[
NSIZES
];

187 
∑gîef
 *
	gÆlba£
;

198 
•ölock
 
	gkmÆloc_•ölock
 = 
SPINLOCK_INITIALIZER
;

203 #ifde‡
SLOWER


204 #i‚de‡
SLOW


205 
	#SLOW


	)

209 #ifde‡
SLOW


212 
	$checksub∑ge
(
∑gîef
 *
¥
)

214 
vaddr_t
 
¥∑ge
, 
Êa
;

215 
‰ìli°
 *
Ê
;

216 
blkty≥
;

217 
n‰ì
=0;

219 
	`KASSERT
(
	`•ölock_do_i_hﬁd
(&
kmÆloc_•ölock
));

221 i‡(
¥
->
‰ìli°_off£t
 =
INVALID_OFFSET
) {

222 
	`KASSERT
(
¥
->
n‰ì
==0);

226 
¥∑ge
 = 
	`PR_PAGEADDR
(
¥
);

227 
blkty≥
 = 
	`PR_BLOCKTYPE
(
¥
);

229 
	`KASSERT
(
¥
->
‰ìli°_off£t
 < 
PAGE_SIZE
);

230 
	`KASSERT
(
¥
->
‰ìli°_off£t
 % 
sizes
[
blkty≥
] == 0);

232 
Êa
 = 
¥∑ge
 + 
¥
->
‰ìli°_off£t
;

233 
Ê
 = (
‰ìli°
 *)
Êa
;

235 ; 
Ê
 !
NULL
; f»Ê->
√xt
) {

236 
Êa
 = (
vaddr_t
)
Ê
;

237 
	`KASSERT
(
Êa
 >
¥∑ge
 && fœ <ÖΩagê+ 
PAGE_SIZE
);

238 
	`KASSERT
((
Êa
-
¥∑ge
Ë% 
sizes
[
blkty≥
] == 0);

239 
	`KASSERT
(
Êa
 >
MIPS_KSEG0
);

240 
	`KASSERT
(
Êa
 < 
MIPS_KSEG1
);

241 
n‰ì
++;

243 
	`KASSERT
(
n‰ì
==
¥
->nfree);

244 
	}
}

246 
	#checksub∑ge
(
¥
Ë(()’r))

	)

249 #ifde‡
SLOWER


252 
	$checksub∑ges
()

254 
∑gîef
 *
¥
;

255 
i
;

256 
sc
=0, 
ac
=0;

258 
	`KASSERT
(
	`•ölock_do_i_hﬁd
(&
kmÆloc_•ölock
));

260 
i
=0; i<
NSIZES
; i++) {

261 
¥
 = 
sizeba£s
[
i
];Ö∏!
NULL
;Ö∏¥->
√xt_ßmesize
) {

262 
	`checksub∑ge
(
¥
);

263 
	`KASSERT
(
sc
 < 
NPAGEREFS
);

264 
sc
++;

268 
¥
 = 
Ælba£
;Ö∏!
NULL
;Ö∏¥->
√xt_Æl
) {

269 
	`checksub∑ge
(
¥
);

270 
	`KASSERT
(
ac
 < 
NPAGEREFS
);

271 
ac
++;

274 
	`KASSERT
(
sc
==
ac
);

275 
	}
}

277 
	#checksub∑ges
()

	)

284 
	$dumpsub∑ge
(
∑gîef
 *
¥
)

286 
vaddr_t
 
¥∑ge
, 
Êa
;

287 
‰ìli°
 *
Ê
;

288 
blkty≥
;

289 
i
, 
n
, 
ödex
;

290 
uöt32_t
 
‰ìm≠
[
PAGE_SIZE
 / (
SMALLEST_SUBPAGE_SIZE
*32)];

292 
	`checksub∑ge
(
¥
);

293 
	`KASSERT
(
	`•ölock_do_i_hﬁd
(&
kmÆloc_•ölock
));

296 
i
=0; i<(
‰ìm≠
)/(freemap[0]); i++) {

297 
‰ìm≠
[
i
] = 0;

300 
¥∑ge
 = 
	`PR_PAGEADDR
(
¥
);

301 
blkty≥
 = 
	`PR_BLOCKTYPE
(
¥
);

304 
n
 = 
PAGE_SIZE
 / 
sizes
[
blkty≥
];

305 
	`KASSERT
(
n
 <32*(
‰ìm≠
)/(freemap[0]));

307 i‡(
¥
->
‰ìli°_off£t
 !
INVALID_OFFSET
) {

308 
Êa
 = 
¥∑ge
 + 
¥
->
‰ìli°_off£t
;

309 
Ê
 = (
‰ìli°
 *)
Êa
;

311 ; 
Ê
 !
NULL
; f»Ê->
√xt
) {

312 
Êa
 = (
vaddr_t
)
Ê
;

313 
ödex
 = (
Êa
-
¥∑ge
Ë/ 
sizes
[
blkty≥
];

314 
	`KASSERT
(
ödex
<
n
);

315 
‰ìm≠
[
ödex
/32] |= (1<<(index%32));

319 
	`k¥ötf
("at 0x%08lx: size %-4lu %u/%u free\n",

320 ()
¥∑ge
, (Ë
sizes
[
blkty≥
],

321 (Ë
¥
->
n‰ì
, 
n
);

322 
	`k¥ötf
(" ");

323 
i
=0; i<
n
; i++) {

324 
vÆ
 = (
‰ìm≠
[
i
/32] & (1<<(i%32)))!=0;

325 
	`k¥ötf
("%c", 
vÆ
 ? '.' : '*');

326 i‡(
i
%64==63 && i<
n
-1) {

327 
	`k¥ötf
("\n ");

330 
	`k¥ötf
("\n");

331 
	}
}

334 
	$khóp_¥öt°©s
()

336 
∑gîef
 *
¥
;

339 
	`•ölock_acquúe
(&
kmÆloc_•ölock
);

341 
	`k¥ötf
("Subpageállocator status:\n");

343 
¥
 = 
Ælba£
;Ö∏!
NULL
;Ö∏¥->
√xt_Æl
) {

344 
	`dumpsub∑ge
(
¥
);

347 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

348 
	}
}

354 
	$ªmove_li°s
(
∑gîef
 *
¥
, 
blkty≥
)

356 
∑gîef
 **
guy
;

358 
	`KASSERT
(
blkty≥
>=0 && blkty≥<
NSIZES
);

360 
guy
 = &
sizeba£s
[
blkty≥
]; *guy; guy = &(*guy)->
√xt_ßmesize
) {

361 
	`checksub∑ge
(*
guy
);

362 i‡(*
guy
 =
¥
) {

363 *
guy
 = 
¥
->
√xt_ßmesize
;

368 
guy
 = &
Ælba£
; *guy; guy = &(*guy)->
√xt_Æl
) {

369 
	`checksub∑ge
(*
guy
);

370 i‡(*
guy
 =
¥
) {

371 *
guy
 = 
¥
->
√xt_Æl
;

375 
	}
}

378 
ölöe


379 
	$blockty≥
(
size_t
 
sz
)

381 
i
;

382 
i
=0; i<
NSIZES
; i++) {

383 i‡(
sz
 <
sizes
[
i
]) {

384  
i
;

388 
	`∑nic
("Subpageállocator cannot handleállocation of size %lu\n",

389 ()
sz
);

393 
	}
}

397 
	$sub∑ge_kmÆloc
(
size_t
 
sz
)

399 
blkty≥
;

400 
∑gîef
 *
¥
;

401 
vaddr_t
 
¥∑ge
;

402 
vaddr_t
 
Êa
;

403 
‰ìli°
 *vﬁ©ûê
Ê
;

404 *
ªçå
;

406 vﬁ©ûê
i
;

409 
blkty≥
 = 
	`blockty≥
(
sz
);

410 
sz
 = 
sizes
[
blkty≥
];

412 
	`•ölock_acquúe
(&
kmÆloc_•ölock
);

414 
	`checksub∑ges
();

416 
¥
 = 
sizeba£s
[
blkty≥
];Ö∏!
NULL
;Ö∏¥->
√xt_ßmesize
) {

419 
	`KASSERT
(
	`PR_BLOCKTYPE
(
¥
Ë=
blkty≥
);

420 
	`checksub∑ge
(
¥
);

422 i‡(
¥
->
n‰ì
 > 0) {

424 
dﬂŒoc
:

426 
	`KASSERT
(
¥
->
‰ìli°_off£t
 < 
PAGE_SIZE
);

427 
¥∑ge
 = 
	`PR_PAGEADDR
(
¥
);

428 
Êa
 = 
¥∑ge
 + 
¥
->
‰ìli°_off£t
;

429 
Ê
 = (
‰ìli°
 *)
Êa
;

431 
ªçå
 = 
Ê
;

432 
Ê
 = fl->
√xt
;

433 
¥
->
n‰ì
--;

435 i‡(
Ê
 !
NULL
) {

436 
	`KASSERT
(
¥
->
n‰ì
 > 0);

437 
Êa
 = (
vaddr_t
)
Ê
;

438 
	`KASSERT
(
Êa
 - 
¥∑ge
 < 
PAGE_SIZE
);

439 
¥
->
‰ìli°_off£t
 = 
Êa
 - 
¥∑ge
;

442 
	`KASSERT
(
¥
->
n‰ì
 == 0);

443 
¥
->
‰ìli°_off£t
 = 
INVALID_OFFSET
;

446 
	`checksub∑ges
();

448 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

449  
ªçå
;

462 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

463 
¥∑ge
 = 
	`Æloc_k∑ges
(1);

464 i‡(
¥∑ge
==0) {

466 
	`k¥ötf
("kmalloc: Subpageállocator couldn't getáÖage\n");

467  
NULL
;

469 
	`•ölock_acquúe
(&
kmÆloc_•ölock
);

471 
¥
 = 
	`Ælo˝agîef
();

472 i‡(
¥
==
NULL
) {

474 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

475 
	`‰ì_k∑ges
(
¥∑ge
);

476 
	`k¥ötf
("kmalloc: Subpageállocator couldn't getÖageref\n");

477  
NULL
;

480 
¥
->
∑góddr_™d_blockty≥
 = 
	`MKPAB
(
¥∑ge
, 
blkty≥
);

481 
¥
->
n‰ì
 = 
PAGE_SIZE
 / 
sizes
[
blkty≥
];

489 
Êa
 = 
¥∑ge
;

490 
Ê
 = (
‰ìli°
 *)
Êa
;

491 
Ê
->
√xt
 = 
NULL
;

492 
i
=1; i<
¥
->
n‰ì
; i++) {

493 
Ê
 = (
‰ìli°
 *)(
Êa
 + 
i
*
sizes
[
blkty≥
]);

494 
Ê
->
√xt
 = (
‰ìli°
 *)(
Êa
 + (
i
-1)*
sizes
[
blkty≥
]);

495 
	`KASSERT
(
Ê
 !Ê->
√xt
);

497 
Êa
 = (
vaddr_t
Ë
Ê
;

498 
¥
->
‰ìli°_off£t
 = 
Êa
 - 
¥∑ge
;

499 
	`KASSERT
(
¥
->
‰ìli°_off£t
 =’r->
n‰ì
-1)*
sizes
[
blkty≥
]);

501 
¥
->
√xt_ßmesize
 = 
sizeba£s
[
blkty≥
];

502 
sizeba£s
[
blkty≥
] = 
¥
;

504 
¥
->
√xt_Æl
 = 
Ælba£
;

505 
Ælba£
 = 
¥
;

508 
dﬂŒoc
;

509 
	}
}

513 
	$sub∑ge_k‰ì
(*
±r
)

515 
blkty≥
;

516 
vaddr_t
 
±øddr
;

517 
∑gîef
 *
¥
;

518 
vaddr_t
 
¥∑ge
;

519 
vaddr_t
 
Êa
;

520 
‰ìli°
 *
Ê
;

521 
vaddr_t
 
off£t
;

523 
±øddr
 = (
vaddr_t
)
±r
;

525 
	`•ölock_acquúe
(&
kmÆloc_•ölock
);

527 
	`checksub∑ges
();

529 
¥
 = 
Ælba£
;Ör;Ö∏¥->
√xt_Æl
) {

530 
¥∑ge
 = 
	`PR_PAGEADDR
(
¥
);

531 
blkty≥
 = 
	`PR_BLOCKTYPE
(
¥
);

534 
	`KASSERT
(
blkty≥
>=0 && blkty≥<
NSIZES
);

535 
	`checksub∑ge
(
¥
);

537 i‡(
±øddr
 >
¥∑ge
 &&Öåadd∏<ÖΩagê+ 
PAGE_SIZE
) {

542 i‡(
¥
==
NULL
) {

544 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

548 
off£t
 = 
±øddr
 - 
¥∑ge
;

551 i‡(
off£t
 >
PAGE_SIZE
 || off£à% 
sizes
[
blkty≥
] != 0) {

552 
	`∑nic
("k‰ì: sub∑gê‰ì o‡övÆidádd∏%p\n", 
±r
);

559 
	`fûl_dódbìf
(
±r
, 
sizes
[
blkty≥
]);

566 
Êa
 = 
¥∑ge
 + 
off£t
;

567 
Ê
 = (
‰ìli°
 *)
Êa
;

568 i‡(
¥
->
‰ìli°_off£t
 =
INVALID_OFFSET
) {

569 
Ê
->
√xt
 = 
NULL
;

571 
Ê
->
√xt
 = (
‰ìli°
 *)(
¥∑ge
 + 
¥
->
‰ìli°_off£t
);

573 
¥
->
‰ìli°_off£t
 = 
off£t
;

574 
¥
->
n‰ì
++;

576 
	`KASSERT
(
¥
->
n‰ì
 <
PAGE_SIZE
 / 
sizes
[
blkty≥
]);

577 i‡(
¥
->
n‰ì
 =
PAGE_SIZE
 / 
sizes
[
blkty≥
]) {

579 
	`ªmove_li°s
(
¥
, 
blkty≥
);

580 
	`‰ì∑gîef
(
¥
);

582 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

583 
	`‰ì_k∑ges
(
¥∑ge
);

586 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

589 #ifde‡
SLOWER


590 
	`•ölock_acquúe
(&
kmÆloc_•ölock
);

591 
	`checksub∑ges
();

592 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

596 
	}
}

602 
	$kmÆloc
(
size_t
 
sz
)

604 i‡(
sz
>=
LARGEST_SUBPAGE_SIZE
) {

605 
≈ages
;

606 
vaddr_t
 
addªss
;

609 
≈ages
 = (
sz
 + 
PAGE_SIZE
 - 1)/PAGE_SIZE;

610 
addªss
 = 
	`Æloc_k∑ges
(
≈ages
);

611 i‡(
addªss
==0) {

612  
NULL
;

615  (*)
addªss
;

618  
	`sub∑ge_kmÆloc
(
sz
);

619 
	}
}

622 
	$k‰ì
(*
±r
)

627 i‡(
±r
 =
NULL
) {

629 } i‡(
	`sub∑ge_k‰ì
(
±r
)) {

630 
	`KASSERT
((
vaddr_t
)
±r
%
PAGE_SIZE
==0);

631 
	`‰ì_k∑ges
((
vaddr_t
)
±r
);

633 
	}
}

	@vm/uw-vmstats.c

13 
	~<ty≥s.h
>

14 
	~<lib.h
>

15 
	~<synch.h
>

16 
	~<•l.h
>

17 
	~<uw-vm°©s.h
>

20 
	g°©s_cou¡s
[
VMSTAT_COUNT
];

22 
•ölock
 
	g°©s_lock
 = 
SPINLOCK_INITIALIZER
;

25 c⁄° *
	g°©s_«mes
[] = {

42 
	$vm°©s_öc
(
ödex
)

44 
	`•ölock_acquúe
(&
°©s_lock
);

45 
	`_vm°©s_öc
(
ödex
);

46 
	`•ölock_ªÀa£
(&
°©s_lock
);

47 
	}
}

51 
	$vm°©s_öô
()

56 
	`•ölock_öô
(&
°©s_lock
);

58 
	`•ölock_acquúe
(&
°©s_lock
);

59 
	`_vm°©s_öô
();

60 
	`•ölock_ªÀa£
(&
°©s_lock
);

61 
	}
}

65 
	$_vm°©s_öc
(
ödex
)

67 
	`KASSERT
(
ödex
 < 
VMSTAT_COUNT
);

68 
°©s_cou¡s
[
ödex
]++;

69 
	}
}

73 
	$_vm°©s_öô
()

75 
i
 = 0;

77 i‡((
°©s_«mes
Ë/ (*Ë!
VMSTAT_COUNT
) {

78 
	`k¥ötf
("vmstats_init:Çumber of stats_names = %d != VMSTAT_COUNT = %d\n",

79 ((
°©s_«mes
Ë/ (*)), 
VMSTAT_COUNT
);

80 
	`∑nic
("ShouldÑeally fixÅhis beforeÖroceeding\n");

83 
i
=0; i<
VMSTAT_COUNT
; i++) {

84 
°©s_cou¡s
[
i
] = 0;

87 
	}
}

97 
	$vm°©s_¥öt
()

99 
i
 = 0;

100 
‰ì_∂us_ª∂a˚
 = 0;

101 
disk_∂us_zî€d_∂us_ªlﬂd
 = 0;

102 
éb_Áu…s
 = 0;

103 
ñf_∂us_sw≠_ªads
 = 0;

104 
disk_ªads
 = 0;

106 
	`k¥ötf
("VMSTATS:\n");

107 
i
=0; i<
VMSTAT_COUNT
; i++) {

108 
	`k¥ötf
("VMSTAT %25†%10d\n", 
°©s_«mes
[
i
], 
°©s_cou¡s
[i]);

111 
éb_Áu…s
 = 
°©s_cou¡s
[
VMSTAT_TLB_FAULT
];

112 
‰ì_∂us_ª∂a˚
 = 
°©s_cou¡s
[
VMSTAT_TLB_FAULT_FREE
] + sèts_cou¡s[
VMSTAT_TLB_FAULT_REPLACE
];

113 
disk_∂us_zî€d_∂us_ªlﬂd
 = 
°©s_cou¡s
[
VMSTAT_PAGE_FAULT_DISK
] +

114 
°©s_cou¡s
[
VMSTAT_PAGE_FAULT_ZERO
] + sèts_cou¡s[
VMSTAT_TLB_RELOAD
];

115 
ñf_∂us_sw≠_ªads
 = 
°©s_cou¡s
[
VMSTAT_ELF_FILE_READ
] + sèts_cou¡s[
VMSTAT_SWAP_FILE_READ
];

116 
disk_ªads
 = 
°©s_cou¡s
[
VMSTAT_PAGE_FAULT_DISK
];

118 
	`k¥ötf
("VMSTAT TLB Fau…†wôh Fªê+ TLB Fau…†wôh Rïœ˚ = %d\n", 
‰ì_∂us_ª∂a˚
);

119 i‡(
éb_Áu…s
 !
‰ì_∂us_ª∂a˚
) {

120 
	`k¥ötf
("WARNING: TLB Faults (%d) != TLB Faults with Free + TLB Faults with Replace (%d)\n",

121 
éb_Áu…s
, 
‰ì_∂us_ª∂a˚
);

124 
	`k¥ötf
("VMSTAT TLB Reloads + Page Faults (Zeroed) + Page Faults (Disk) = %d\n",

125 
disk_∂us_zî€d_∂us_ªlﬂd
);

126 i‡(
éb_Áu…s
 !
disk_∂us_zî€d_∂us_ªlﬂd
) {

127 
	`k¥ötf
("WARNING: TLB Faults (%d) != TLB Reloads + Page Faults (Zeroed) + Page Faults (Disk) (%d)\n",

128 
éb_Áu…s
, 
disk_∂us_zî€d_∂us_ªlﬂd
);

131 
	`k¥ötf
("VMSTAT ELF Fûêªad†+ Sw≠fûêªad†%d\n", 
ñf_∂us_sw≠_ªads
);

132 i‡(
disk_ªads
 !
ñf_∂us_sw≠_ªads
) {

133 
	`k¥ötf
("WARNING: ELF FileÑeads + SwapfileÑeads != Page Faults (Disk) %d\n",

134 
ñf_∂us_sw≠_ªads
);

136 
	}
}

	@/usr/include/elf.h

21 #i‚de‡
_ELF_H


22 
	#_ELF_H
 1

	)

24 
	~<„©uªs.h
>

26 
	g__BEGIN_DECLS


30 
	~<°döt.h
>

33 
uöt16_t
 
	tElf32_HÆf
;

34 
uöt16_t
 
	tElf64_HÆf
;

37 
uöt32_t
 
	tElf32_W‹d
;

38 
öt32_t
 
	tElf32_Sw‹d
;

39 
uöt32_t
 
	tElf64_W‹d
;

40 
öt32_t
 
	tElf64_Sw‹d
;

43 
uöt64_t
 
	tElf32_Xw‹d
;

44 
öt64_t
 
	tElf32_Sxw‹d
;

45 
uöt64_t
 
	tElf64_Xw‹d
;

46 
öt64_t
 
	tElf64_Sxw‹d
;

49 
uöt32_t
 
	tElf32_Addr
;

50 
uöt64_t
 
	tElf64_Addr
;

53 
uöt32_t
 
	tElf32_Off
;

54 
uöt64_t
 
	tElf64_Off
;

57 
uöt16_t
 
	tElf32_Se˘i⁄
;

58 
uöt16_t
 
	tElf64_Se˘i⁄
;

61 
Elf32_HÆf
 
	tElf32_Vîsym
;

62 
Elf64_HÆf
 
	tElf64_Vîsym
;

67 
	#EI_NIDENT
 (16)

	)

71 
	me_idít
[
EI_NIDENT
];

72 
Elf32_HÆf
 
	me_ty≥
;

73 
Elf32_HÆf
 
	me_machöe
;

74 
Elf32_W‹d
 
	me_vîsi⁄
;

75 
Elf32_Addr
 
	me_íåy
;

76 
Elf32_Off
 
	me_phoff
;

77 
Elf32_Off
 
	me_shoff
;

78 
Elf32_W‹d
 
	me_Êags
;

79 
Elf32_HÆf
 
	me_ehsize
;

80 
Elf32_HÆf
 
	me_phítsize
;

81 
Elf32_HÆf
 
	me_phnum
;

82 
Elf32_HÆf
 
	me_shítsize
;

83 
Elf32_HÆf
 
	me_shnum
;

84 
Elf32_HÆf
 
	me_sh°∫dx
;

85 } 
	tElf32_Ehdr
;

89 
	me_idít
[
EI_NIDENT
];

90 
Elf64_HÆf
 
	me_ty≥
;

91 
Elf64_HÆf
 
	me_machöe
;

92 
Elf64_W‹d
 
	me_vîsi⁄
;

93 
Elf64_Addr
 
	me_íåy
;

94 
Elf64_Off
 
	me_phoff
;

95 
Elf64_Off
 
	me_shoff
;

96 
Elf64_W‹d
 
	me_Êags
;

97 
Elf64_HÆf
 
	me_ehsize
;

98 
Elf64_HÆf
 
	me_phítsize
;

99 
Elf64_HÆf
 
	me_phnum
;

100 
Elf64_HÆf
 
	me_shítsize
;

101 
Elf64_HÆf
 
	me_shnum
;

102 
Elf64_HÆf
 
	me_sh°∫dx
;

103 } 
	tElf64_Ehdr
;

109 
	#EI_MAG0
 0

	)

110 
	#ELFMAG0
 0x7‡

	)

112 
	#EI_MAG1
 1

	)

113 
	#ELFMAG1
 'E'

	)

115 
	#EI_MAG2
 2

	)

116 
	#ELFMAG2
 'L'

	)

118 
	#EI_MAG3
 3

	)

119 
	#ELFMAG3
 'F'

	)

122 
	#ELFMAG
 "\177ELF"

	)

123 
	#SELFMAG
 4

	)

125 
	#EI_CLASS
 4

	)

126 
	#ELFCLASSNONE
 0

	)

127 
	#ELFCLASS32
 1

	)

128 
	#ELFCLASS64
 2

	)

129 
	#ELFCLASSNUM
 3

	)

131 
	#EI_DATA
 5

	)

132 
	#ELFDATANONE
 0

	)

133 
	#ELFDATA2LSB
 1

	)

134 
	#ELFDATA2MSB
 2

	)

135 
	#ELFDATANUM
 3

	)

137 
	#EI_VERSION
 6

	)

140 
	#EI_OSABI
 7

	)

141 
	#ELFOSABI_NONE
 0

	)

142 
	#ELFOSABI_SYSV
 0

	)

143 
	#ELFOSABI_HPUX
 1

	)

144 
	#ELFOSABI_NETBSD
 2

	)

145 
	#ELFOSABI_GNU
 3

	)

146 
	#ELFOSABI_LINUX
 
ELFOSABI_GNU


	)

147 
	#ELFOSABI_SOLARIS
 6

	)

148 
	#ELFOSABI_AIX
 7

	)

149 
	#ELFOSABI_IRIX
 8

	)

150 
	#ELFOSABI_FREEBSD
 9

	)

151 
	#ELFOSABI_TRU64
 10

	)

152 
	#ELFOSABI_MODESTO
 11

	)

153 
	#ELFOSABI_OPENBSD
 12

	)

154 
	#ELFOSABI_ARM_AEABI
 64

	)

155 
	#ELFOSABI_ARM
 97

	)

156 
	#ELFOSABI_STANDALONE
 255

	)

158 
	#EI_ABIVERSION
 8

	)

160 
	#EI_PAD
 9

	)

164 
	#ET_NONE
 0

	)

165 
	#ET_REL
 1

	)

166 
	#ET_EXEC
 2

	)

167 
	#ET_DYN
 3

	)

168 
	#ET_CORE
 4

	)

169 
	#ET_NUM
 5

	)

170 
	#ET_LOOS
 0x„00

	)

171 
	#ET_HIOS
 0x„f‡

	)

172 
	#ET_LOPROC
 0xff00

	)

173 
	#ET_HIPROC
 0xfff‡

	)

177 
	#EM_NONE
 0

	)

178 
	#EM_M32
 1

	)

179 
	#EM_SPARC
 2

	)

180 
	#EM_386
 3

	)

181 
	#EM_68K
 4

	)

182 
	#EM_88K
 5

	)

183 
	#EM_860
 7

	)

184 
	#EM_MIPS
 8

	)

185 
	#EM_S370
 9

	)

186 
	#EM_MIPS_RS3_LE
 10

	)

188 
	#EM_PARISC
 15

	)

189 
	#EM_VPP500
 17

	)

190 
	#EM_SPARC32PLUS
 18

	)

191 
	#EM_960
 19

	)

192 
	#EM_PPC
 20

	)

193 
	#EM_PPC64
 21

	)

194 
	#EM_S390
 22

	)

196 
	#EM_V800
 36

	)

197 
	#EM_FR20
 37

	)

198 
	#EM_RH32
 38

	)

199 
	#EM_RCE
 39

	)

200 
	#EM_ARM
 40

	)

201 
	#EM_FAKE_ALPHA
 41

	)

202 
	#EM_SH
 42

	)

203 
	#EM_SPARCV9
 43

	)

204 
	#EM_TRICORE
 44

	)

205 
	#EM_ARC
 45

	)

206 
	#EM_H8_300
 46

	)

207 
	#EM_H8_300H
 47

	)

208 
	#EM_H8S
 48

	)

209 
	#EM_H8_500
 49

	)

210 
	#EM_IA_64
 50

	)

211 
	#EM_MIPS_X
 51

	)

212 
	#EM_COLDFIRE
 52

	)

213 
	#EM_68HC12
 53

	)

214 
	#EM_MMA
 54

	)

215 
	#EM_PCP
 55

	)

216 
	#EM_NCPU
 56

	)

217 
	#EM_NDR1
 57

	)

218 
	#EM_STARCORE
 58

	)

219 
	#EM_ME16
 59

	)

220 
	#EM_ST100
 60

	)

221 
	#EM_TINYJ
 61

	)

222 
	#EM_X86_64
 62

	)

223 
	#EM_PDSP
 63

	)

225 
	#EM_FX66
 66

	)

226 
	#EM_ST9PLUS
 67

	)

227 
	#EM_ST7
 68

	)

228 
	#EM_68HC16
 69

	)

229 
	#EM_68HC11
 70

	)

230 
	#EM_68HC08
 71

	)

231 
	#EM_68HC05
 72

	)

232 
	#EM_SVX
 73

	)

233 
	#EM_ST19
 74

	)

234 
	#EM_VAX
 75

	)

235 
	#EM_CRIS
 76

	)

236 
	#EM_JAVELIN
 77

	)

237 
	#EM_FIREPATH
 78

	)

238 
	#EM_ZSP
 79

	)

239 
	#EM_MMIX
 80

	)

240 
	#EM_HUANY
 81

	)

241 
	#EM_PRISM
 82

	)

242 
	#EM_AVR
 83

	)

243 
	#EM_FR30
 84

	)

244 
	#EM_D10V
 85

	)

245 
	#EM_D30V
 86

	)

246 
	#EM_V850
 87

	)

247 
	#EM_M32R
 88

	)

248 
	#EM_MN10300
 89

	)

249 
	#EM_MN10200
 90

	)

250 
	#EM_PJ
 91

	)

251 
	#EM_OPENRISC
 92

	)

252 
	#EM_ARC_A5
 93

	)

253 
	#EM_XTENSA
 94

	)

254 
	#EM_NUM
 95

	)

260 
	#EM_ALPHA
 0x9026

	)

264 
	#EV_NONE
 0

	)

265 
	#EV_CURRENT
 1

	)

266 
	#EV_NUM
 2

	)

272 
Elf32_W‹d
 
	msh_«me
;

273 
Elf32_W‹d
 
	msh_ty≥
;

274 
Elf32_W‹d
 
	msh_Êags
;

275 
Elf32_Addr
 
	msh_addr
;

276 
Elf32_Off
 
	msh_off£t
;

277 
Elf32_W‹d
 
	msh_size
;

278 
Elf32_W‹d
 
	msh_lök
;

279 
Elf32_W‹d
 
	msh_öfo
;

280 
Elf32_W‹d
 
	msh_addølign
;

281 
Elf32_W‹d
 
	msh_ítsize
;

282 } 
	tElf32_Shdr
;

286 
Elf64_W‹d
 
	msh_«me
;

287 
Elf64_W‹d
 
	msh_ty≥
;

288 
Elf64_Xw‹d
 
	msh_Êags
;

289 
Elf64_Addr
 
	msh_addr
;

290 
Elf64_Off
 
	msh_off£t
;

291 
Elf64_Xw‹d
 
	msh_size
;

292 
Elf64_W‹d
 
	msh_lök
;

293 
Elf64_W‹d
 
	msh_öfo
;

294 
Elf64_Xw‹d
 
	msh_addølign
;

295 
Elf64_Xw‹d
 
	msh_ítsize
;

296 } 
	tElf64_Shdr
;

300 
	#SHN_UNDEF
 0

	)

301 
	#SHN_LORESERVE
 0xff00

	)

302 
	#SHN_LOPROC
 0xff00

	)

303 
	#SHN_BEFORE
 0xff00

	)

305 
	#SHN_AFTER
 0xff01

	)

307 
	#SHN_HIPROC
 0xff1‡

	)

308 
	#SHN_LOOS
 0xff20

	)

309 
	#SHN_HIOS
 0xff3‡

	)

310 
	#SHN_ABS
 0xfff1

	)

311 
	#SHN_COMMON
 0xfff2

	)

312 
	#SHN_XINDEX
 0xfff‡

	)

313 
	#SHN_HIRESERVE
 0xfff‡

	)

317 
	#SHT_NULL
 0

	)

318 
	#SHT_PROGBITS
 1

	)

319 
	#SHT_SYMTAB
 2

	)

320 
	#SHT_STRTAB
 3

	)

321 
	#SHT_RELA
 4

	)

322 
	#SHT_HASH
 5

	)

323 
	#SHT_DYNAMIC
 6

	)

324 
	#SHT_NOTE
 7

	)

325 
	#SHT_NOBITS
 8

	)

326 
	#SHT_REL
 9

	)

327 
	#SHT_SHLIB
 10

	)

328 
	#SHT_DYNSYM
 11

	)

329 
	#SHT_INIT_ARRAY
 14

	)

330 
	#SHT_FINI_ARRAY
 15

	)

331 
	#SHT_PREINIT_ARRAY
 16

	)

332 
	#SHT_GROUP
 17

	)

333 
	#SHT_SYMTAB_SHNDX
 18

	)

334 
	#SHT_NUM
 19

	)

335 
	#SHT_LOOS
 0x60000000

	)

336 
	#SHT_GNU_ATTRIBUTES
 0x6ffffff5

	)

337 
	#SHT_GNU_HASH
 0x6ffffff6

	)

338 
	#SHT_GNU_LIBLIST
 0x6ffffff7

	)

339 
	#SHT_CHECKSUM
 0x6ffffff8

	)

340 
	#SHT_LOSUNW
 0x6fffffÁ

	)

341 
	#SHT_SUNW_move
 0x6fffffÁ

	)

342 
	#SHT_SUNW_COMDAT
 0x6ffffffb

	)

343 
	#SHT_SUNW_symöfo
 0x6ffffffc

	)

344 
	#SHT_GNU_vîdef
 0x6ffffffd

	)

345 
	#SHT_GNU_vî√ed
 0x6fffff„

	)

346 
	#SHT_GNU_vîsym
 0x6ffffff‡

	)

347 
	#SHT_HISUNW
 0x6ffffff‡

	)

348 
	#SHT_HIOS
 0x6ffffff‡

	)

349 
	#SHT_LOPROC
 0x70000000

	)

350 
	#SHT_HIPROC
 0x7ffffff‡

	)

351 
	#SHT_LOUSER
 0x80000000

	)

352 
	#SHT_HIUSER
 0x8ffffff‡

	)

356 
	#SHF_WRITE
 (1 << 0Ë

	)

357 
	#SHF_ALLOC
 (1 << 1Ë

	)

358 
	#SHF_EXECINSTR
 (1 << 2Ë

	)

359 
	#SHF_MERGE
 (1 << 4Ë

	)

360 
	#SHF_STRINGS
 (1 << 5Ë

	)

361 
	#SHF_INFO_LINK
 (1 << 6Ë

	)

362 
	#SHF_LINK_ORDER
 (1 << 7Ë

	)

363 
	#SHF_OS_NONCONFORMING
 (1 << 8Ë

	)

365 
	#SHF_GROUP
 (1 << 9Ë

	)

366 
	#SHF_TLS
 (1 << 10Ë

	)

367 
	#SHF_MASKOS
 0x0ff00000

	)

368 
	#SHF_MASKPROC
 0xf0000000

	)

369 
	#SHF_ORDERED
 (1 << 30Ë

	)

371 
	#SHF_EXCLUDE
 (1 << 31Ë

	)

375 
	#GRP_COMDAT
 0x1

	)

381 
Elf32_W‹d
 
	m°_«me
;

382 
Elf32_Addr
 
	m°_vÆue
;

383 
Elf32_W‹d
 
	m°_size
;

384 
	m°_öfo
;

385 
	m°_Ÿhî
;

386 
Elf32_Se˘i⁄
 
	m°_shndx
;

387 } 
	tElf32_Sym
;

391 
Elf64_W‹d
 
	m°_«me
;

392 
	m°_öfo
;

393 
	m°_Ÿhî
;

394 
Elf64_Se˘i⁄
 
	m°_shndx
;

395 
Elf64_Addr
 
	m°_vÆue
;

396 
Elf64_Xw‹d
 
	m°_size
;

397 } 
	tElf64_Sym
;

404 
Elf32_HÆf
 
	msi_boundto
;

405 
Elf32_HÆf
 
	msi_Êags
;

406 } 
	tElf32_Symöfo
;

410 
Elf64_HÆf
 
	msi_boundto
;

411 
Elf64_HÆf
 
	msi_Êags
;

412 } 
	tElf64_Symöfo
;

415 
	#SYMINFO_BT_SELF
 0xfff‡

	)

416 
	#SYMINFO_BT_PARENT
 0xff„

	)

417 
	#SYMINFO_BT_LOWRESERVE
 0xff00

	)

420 
	#SYMINFO_FLG_DIRECT
 0x0001

	)

421 
	#SYMINFO_FLG_PASSTHRU
 0x0002

	)

422 
	#SYMINFO_FLG_COPY
 0x0004

	)

423 
	#SYMINFO_FLG_LAZYLOAD
 0x0008

	)

426 
	#SYMINFO_NONE
 0

	)

427 
	#SYMINFO_CURRENT
 1

	)

428 
	#SYMINFO_NUM
 2

	)

433 
	#ELF32_ST_BIND
(
vÆ
Ë(((Ë(vÆ)Ë>> 4)

	)

434 
	#ELF32_ST_TYPE
(
vÆ
Ë((vÆË& 0xf)

	)

435 
	#ELF32_ST_INFO
(
böd
, 
ty≥
Ë(((bödË<< 4Ë+ (—y≥Ë& 0xf))

	)

438 
	#ELF64_ST_BIND
(
vÆ
Ë
	`ELF32_ST_BIND
 (vÆ)

	)

439 
	#ELF64_ST_TYPE
(
vÆ
Ë
	`ELF32_ST_TYPE
 (vÆ)

	)

440 
	#ELF64_ST_INFO
(
böd
, 
ty≥
Ë
	`ELF32_ST_INFO
 ((böd), (ty≥))

	)

444 
	#STB_LOCAL
 0

	)

445 
	#STB_GLOBAL
 1

	)

446 
	#STB_WEAK
 2

	)

447 
	#STB_NUM
 3

	)

448 
	#STB_LOOS
 10

	)

449 
	#STB_GNU_UNIQUE
 10

	)

450 
	#STB_HIOS
 12

	)

451 
	#STB_LOPROC
 13

	)

452 
	#STB_HIPROC
 15

	)

456 
	#STT_NOTYPE
 0

	)

457 
	#STT_OBJECT
 1

	)

458 
	#STT_FUNC
 2

	)

459 
	#STT_SECTION
 3

	)

460 
	#STT_FILE
 4

	)

461 
	#STT_COMMON
 5

	)

462 
	#STT_TLS
 6

	)

463 
	#STT_NUM
 7

	)

464 
	#STT_LOOS
 10

	)

465 
	#STT_GNU_IFUNC
 10

	)

466 
	#STT_HIOS
 12

	)

467 
	#STT_LOPROC
 13

	)

468 
	#STT_HIPROC
 15

	)

475 
	#STN_UNDEF
 0

	)

480 
	#ELF32_ST_VISIBILITY
(
o
Ë((oË& 0x03)

	)

483 
	#ELF64_ST_VISIBILITY
(
o
Ë
	`ELF32_ST_VISIBILITY
 (o)

	)

486 
	#STV_DEFAULT
 0

	)

487 
	#STV_INTERNAL
 1

	)

488 
	#STV_HIDDEN
 2

	)

489 
	#STV_PROTECTED
 3

	)

496 
Elf32_Addr
 
	mr_off£t
;

497 
Elf32_W‹d
 
	mr_öfo
;

498 } 
	tElf32_Rñ
;

507 
Elf64_Addr
 
	mr_off£t
;

508 
Elf64_Xw‹d
 
	mr_öfo
;

509 } 
	tElf64_Rñ
;

515 
Elf32_Addr
 
	mr_off£t
;

516 
Elf32_W‹d
 
	mr_öfo
;

517 
Elf32_Sw‹d
 
	mr_addíd
;

518 } 
	tElf32_Rña
;

522 
Elf64_Addr
 
	mr_off£t
;

523 
Elf64_Xw‹d
 
	mr_öfo
;

524 
Elf64_Sxw‹d
 
	mr_addíd
;

525 } 
	tElf64_Rña
;

529 
	#ELF32_R_SYM
(
vÆ
Ë((vÆË>> 8)

	)

530 
	#ELF32_R_TYPE
(
vÆ
Ë((vÆË& 0xff)

	)

531 
	#ELF32_R_INFO
(
sym
, 
ty≥
Ë(((symË<< 8Ë+ (—y≥Ë& 0xff))

	)

533 
	#ELF64_R_SYM
(
i
Ë((iË>> 32)

	)

534 
	#ELF64_R_TYPE
(
i
Ë((iË& 0xffffffff)

	)

535 
	#ELF64_R_INFO
(
sym
,
ty≥
Ë((((
Elf64_Xw‹d
Ë(sym)Ë<< 32Ë+ (ty≥))

	)

541 
Elf32_W‹d
 
	mp_ty≥
;

542 
Elf32_Off
 
	mp_off£t
;

543 
Elf32_Addr
 
	mp_vaddr
;

544 
Elf32_Addr
 
	mp_∑ddr
;

545 
Elf32_W‹d
 
	mp_fûesz
;

546 
Elf32_W‹d
 
	mp_memsz
;

547 
Elf32_W‹d
 
	mp_Êags
;

548 
Elf32_W‹d
 
	mp_Æign
;

549 } 
	tElf32_Phdr
;

553 
Elf64_W‹d
 
	mp_ty≥
;

554 
Elf64_W‹d
 
	mp_Êags
;

555 
Elf64_Off
 
	mp_off£t
;

556 
Elf64_Addr
 
	mp_vaddr
;

557 
Elf64_Addr
 
	mp_∑ddr
;

558 
Elf64_Xw‹d
 
	mp_fûesz
;

559 
Elf64_Xw‹d
 
	mp_memsz
;

560 
Elf64_Xw‹d
 
	mp_Æign
;

561 } 
	tElf64_Phdr
;

567 
	#PN_XNUM
 0xffff

	)

571 
	#PT_NULL
 0

	)

572 
	#PT_LOAD
 1

	)

573 
	#PT_DYNAMIC
 2

	)

574 
	#PT_INTERP
 3

	)

575 
	#PT_NOTE
 4

	)

576 
	#PT_SHLIB
 5

	)

577 
	#PT_PHDR
 6

	)

578 
	#PT_TLS
 7

	)

579 
	#PT_NUM
 8

	)

580 
	#PT_LOOS
 0x60000000

	)

581 
	#PT_GNU_EH_FRAME
 0x6474e550

	)

582 
	#PT_GNU_STACK
 0x6474e551

	)

583 
	#PT_GNU_RELRO
 0x6474e552

	)

584 
	#PT_LOSUNW
 0x6fffffÁ

	)

585 
	#PT_SUNWBSS
 0x6fffffÁ

	)

586 
	#PT_SUNWSTACK
 0x6ffffffb

	)

587 
	#PT_HISUNW
 0x6fffffff

	)

588 
	#PT_HIOS
 0x6ffffff‡

	)

589 
	#PT_LOPROC
 0x70000000

	)

590 
	#PT_HIPROC
 0x7ffffff‡

	)

594 
	#PF_X
 (1 << 0Ë

	)

595 
	#PF_W
 (1 << 1Ë

	)

596 
	#PF_R
 (1 << 2Ë

	)

597 
	#PF_MASKOS
 0x0ff00000

	)

598 
	#PF_MASKPROC
 0xf0000000

	)

602 
	#NT_PRSTATUS
 1

	)

603 
	#NT_FPREGSET
 2

	)

604 
	#NT_PRPSINFO
 3

	)

605 
	#NT_PRXREG
 4

	)

606 
	#NT_TASKSTRUCT
 4

	)

607 
	#NT_PLATFORM
 5

	)

608 
	#NT_AUXV
 6

	)

609 
	#NT_GWINDOWS
 7

	)

610 
	#NT_ASRS
 8

	)

611 
	#NT_PSTATUS
 10

	)

612 
	#NT_PSINFO
 13

	)

613 
	#NT_PRCRED
 14

	)

614 
	#NT_UTSNAME
 15

	)

615 
	#NT_LWPSTATUS
 16

	)

616 
	#NT_LWPSINFO
 17

	)

617 
	#NT_PRFPXREG
 20

	)

618 
	#NT_PRXFPREG
 0x46e62b7‡

	)

619 
	#NT_PPC_VMX
 0x100

	)

620 
	#NT_PPC_SPE
 0x101

	)

621 
	#NT_PPC_VSX
 0x102

	)

622 
	#NT_386_TLS
 0x200

	)

623 
	#NT_386_IOPERM
 0x201

	)

624 
	#NT_X86_XSTATE
 0x202

	)

628 
	#NT_VERSION
 1

	)

635 
Elf32_Sw‹d
 
	md_èg
;

638 
Elf32_W‹d
 
	md_vÆ
;

639 
Elf32_Addr
 
	md_±r
;

640 } 
	md_un
;

641 } 
	tElf32_Dyn
;

645 
Elf64_Sxw‹d
 
	md_èg
;

648 
Elf64_Xw‹d
 
	md_vÆ
;

649 
Elf64_Addr
 
	md_±r
;

650 } 
	md_un
;

651 } 
	tElf64_Dyn
;

655 
	#DT_NULL
 0

	)

656 
	#DT_NEEDED
 1

	)

657 
	#DT_PLTRELSZ
 2

	)

658 
	#DT_PLTGOT
 3

	)

659 
	#DT_HASH
 4

	)

660 
	#DT_STRTAB
 5

	)

661 
	#DT_SYMTAB
 6

	)

662 
	#DT_RELA
 7

	)

663 
	#DT_RELASZ
 8

	)

664 
	#DT_RELAENT
 9

	)

665 
	#DT_STRSZ
 10

	)

666 
	#DT_SYMENT
 11

	)

667 
	#DT_INIT
 12

	)

668 
	#DT_FINI
 13

	)

669 
	#DT_SONAME
 14

	)

670 
	#DT_RPATH
 15

	)

671 
	#DT_SYMBOLIC
 16

	)

672 
	#DT_REL
 17

	)

673 
	#DT_RELSZ
 18

	)

674 
	#DT_RELENT
 19

	)

675 
	#DT_PLTREL
 20

	)

676 
	#DT_DEBUG
 21

	)

677 
	#DT_TEXTREL
 22

	)

678 
	#DT_JMPREL
 23

	)

679 
	#DT_BIND_NOW
 24

	)

680 
	#DT_INIT_ARRAY
 25

	)

681 
	#DT_FINI_ARRAY
 26

	)

682 
	#DT_INIT_ARRAYSZ
 27

	)

683 
	#DT_FINI_ARRAYSZ
 28

	)

684 
	#DT_RUNPATH
 29

	)

685 
	#DT_FLAGS
 30

	)

686 
	#DT_ENCODING
 32

	)

687 
	#DT_PREINIT_ARRAY
 32

	)

688 
	#DT_PREINIT_ARRAYSZ
 33

	)

689 
	#DT_NUM
 34

	)

690 
	#DT_LOOS
 0x6000000d

	)

691 
	#DT_HIOS
 0x6ffff000

	)

692 
	#DT_LOPROC
 0x70000000

	)

693 
	#DT_HIPROC
 0x7ffffff‡

	)

694 
	#DT_PROCNUM
 
DT_MIPS_NUM


	)

699 
	#DT_VALRNGLO
 0x6ffffd00

	)

700 
	#DT_GNU_PRELINKED
 0x6ffffdf5

	)

701 
	#DT_GNU_CONFLICTSZ
 0x6ffffdf6

	)

702 
	#DT_GNU_LIBLISTSZ
 0x6ffffdf7

	)

703 
	#DT_CHECKSUM
 0x6ffffdf8

	)

704 
	#DT_PLTPADSZ
 0x6ffffdf9

	)

705 
	#DT_MOVEENT
 0x6ffffdÁ

	)

706 
	#DT_MOVESZ
 0x6ffffdfb

	)

707 
	#DT_FEATURE_1
 0x6ffffdf¯

	)

708 
	#DT_POSFLAG_1
 0x6ffffdfd

	)

710 
	#DT_SYMINSZ
 0x6ffffd„

	)

711 
	#DT_SYMINENT
 0x6ffffdf‡

	)

712 
	#DT_VALRNGHI
 0x6ffffdff

	)

713 
	#DT_VALTAGIDX
(
èg
Ë(
DT_VALRNGHI
 - (èg)Ë

	)

714 
	#DT_VALNUM
 12

	)

721 
	#DT_ADDRRNGLO
 0x6fff„00

	)

722 
	#DT_GNU_HASH
 0x6fff„f5

	)

723 
	#DT_TLSDESC_PLT
 0x6fff„f6

	)

724 
	#DT_TLSDESC_GOT
 0x6fff„f7

	)

725 
	#DT_GNU_CONFLICT
 0x6fff„f8

	)

726 
	#DT_GNU_LIBLIST
 0x6fff„f9

	)

727 
	#DT_CONFIG
 0x6fff„Á

	)

728 
	#DT_DEPAUDIT
 0x6fff„fb

	)

729 
	#DT_AUDIT
 0x6fff„f¯

	)

730 
	#DT_PLTPAD
 0x6fff„fd

	)

731 
	#DT_MOVETAB
 0x6fff„„

	)

732 
	#DT_SYMINFO
 0x6fff„f‡

	)

733 
	#DT_ADDRRNGHI
 0x6fff„ff

	)

734 
	#DT_ADDRTAGIDX
(
èg
Ë(
DT_ADDRRNGHI
 - (èg)Ë

	)

735 
	#DT_ADDRNUM
 11

	)

739 
	#DT_VERSYM
 0x6ffffff0

	)

741 
	#DT_RELACOUNT
 0x6ffffff9

	)

742 
	#DT_RELCOUNT
 0x6fffffÁ

	)

745 
	#DT_FLAGS_1
 0x6ffffffb

	)

746 
	#DT_VERDEF
 0x6ffffff¯

	)

748 
	#DT_VERDEFNUM
 0x6ffffffd

	)

749 
	#DT_VERNEED
 0x6fffff„

	)

751 
	#DT_VERNEEDNUM
 0x6ffffff‡

	)

752 
	#DT_VERSIONTAGIDX
(
èg
Ë(
DT_VERNEEDNUM
 - (èg)Ë

	)

753 
	#DT_VERSIONTAGNUM
 16

	)

757 
	#DT_AUXILIARY
 0x7ffffffd

	)

758 
	#DT_FILTER
 0x7ffffff‡

	)

759 
	#DT_EXTRATAGIDX
(
èg
Ë((
Elf32_W‹d
)-((
Elf32_Sw‹d
Ë—agË<<1>>1)-1)

	)

760 
	#DT_EXTRANUM
 3

	)

763 
	#DF_ORIGIN
 0x00000001

	)

764 
	#DF_SYMBOLIC
 0x00000002

	)

765 
	#DF_TEXTREL
 0x00000004

	)

766 
	#DF_BIND_NOW
 0x00000008

	)

767 
	#DF_STATIC_TLS
 0x00000010

	)

771 
	#DF_1_NOW
 0x00000001

	)

772 
	#DF_1_GLOBAL
 0x00000002

	)

773 
	#DF_1_GROUP
 0x00000004

	)

774 
	#DF_1_NODELETE
 0x00000008

	)

775 
	#DF_1_LOADFLTR
 0x00000010

	)

776 
	#DF_1_INITFIRST
 0x00000020

	)

777 
	#DF_1_NOOPEN
 0x00000040

	)

778 
	#DF_1_ORIGIN
 0x00000080

	)

779 
	#DF_1_DIRECT
 0x00000100

	)

780 
	#DF_1_TRANS
 0x00000200

	)

781 
	#DF_1_INTERPOSE
 0x00000400

	)

782 
	#DF_1_NODEFLIB
 0x00000800

	)

783 
	#DF_1_NODUMP
 0x00001000

	)

784 
	#DF_1_CONFALT
 0x00002000

	)

785 
	#DF_1_ENDFILTEE
 0x00004000

	)

786 
	#DF_1_DISPRELDNE
 0x00008000

	)

787 
	#DF_1_DISPRELPND
 0x00010000

	)

790 
	#DTF_1_PARINIT
 0x00000001

	)

791 
	#DTF_1_CONFEXP
 0x00000002

	)

794 
	#DF_P1_LAZYLOAD
 0x00000001

	)

795 
	#DF_P1_GROUPPERM
 0x00000002

	)

802 
Elf32_HÆf
 
	mvd_vîsi⁄
;

803 
Elf32_HÆf
 
	mvd_Êags
;

804 
Elf32_HÆf
 
	mvd_ndx
;

805 
Elf32_HÆf
 
	mvd_˙t
;

806 
Elf32_W‹d
 
	mvd_hash
;

807 
Elf32_W‹d
 
	mvd_aux
;

808 
Elf32_W‹d
 
	mvd_√xt
;

810 } 
	tElf32_Vîdef
;

814 
Elf64_HÆf
 
	mvd_vîsi⁄
;

815 
Elf64_HÆf
 
	mvd_Êags
;

816 
Elf64_HÆf
 
	mvd_ndx
;

817 
Elf64_HÆf
 
	mvd_˙t
;

818 
Elf64_W‹d
 
	mvd_hash
;

819 
Elf64_W‹d
 
	mvd_aux
;

820 
Elf64_W‹d
 
	mvd_√xt
;

822 } 
	tElf64_Vîdef
;

826 
	#VER_DEF_NONE
 0

	)

827 
	#VER_DEF_CURRENT
 1

	)

828 
	#VER_DEF_NUM
 2

	)

831 
	#VER_FLG_BASE
 0x1

	)

832 
	#VER_FLG_WEAK
 0x2

	)

835 
	#VER_NDX_LOCAL
 0

	)

836 
	#VER_NDX_GLOBAL
 1

	)

837 
	#VER_NDX_LORESERVE
 0xff00

	)

838 
	#VER_NDX_ELIMINATE
 0xff01

	)

844 
Elf32_W‹d
 
	mvda_«me
;

845 
Elf32_W‹d
 
	mvda_√xt
;

847 } 
	tElf32_Vîdaux
;

851 
Elf64_W‹d
 
	mvda_«me
;

852 
Elf64_W‹d
 
	mvda_√xt
;

854 } 
	tElf64_Vîdaux
;

861 
Elf32_HÆf
 
	mvn_vîsi⁄
;

862 
Elf32_HÆf
 
	mvn_˙t
;

863 
Elf32_W‹d
 
	mvn_fûe
;

865 
Elf32_W‹d
 
	mvn_aux
;

866 
Elf32_W‹d
 
	mvn_√xt
;

868 } 
	tElf32_Vî√ed
;

872 
Elf64_HÆf
 
	mvn_vîsi⁄
;

873 
Elf64_HÆf
 
	mvn_˙t
;

874 
Elf64_W‹d
 
	mvn_fûe
;

876 
Elf64_W‹d
 
	mvn_aux
;

877 
Elf64_W‹d
 
	mvn_√xt
;

879 } 
	tElf64_Vî√ed
;

883 
	#VER_NEED_NONE
 0

	)

884 
	#VER_NEED_CURRENT
 1

	)

885 
	#VER_NEED_NUM
 2

	)

891 
Elf32_W‹d
 
	mv«_hash
;

892 
Elf32_HÆf
 
	mv«_Êags
;

893 
Elf32_HÆf
 
	mv«_Ÿhî
;

894 
Elf32_W‹d
 
	mv«_«me
;

895 
Elf32_W‹d
 
	mv«_√xt
;

897 } 
	tElf32_Vî«ux
;

901 
Elf64_W‹d
 
	mv«_hash
;

902 
Elf64_HÆf
 
	mv«_Êags
;

903 
Elf64_HÆf
 
	mv«_Ÿhî
;

904 
Elf64_W‹d
 
	mv«_«me
;

905 
Elf64_W‹d
 
	mv«_√xt
;

907 } 
	tElf64_Vî«ux
;

911 
	#VER_FLG_WEAK
 0x2

	)

925 
uöt32_t
 
	ma_ty≥
;

928 
uöt32_t
 
	ma_vÆ
;

932 } 
	ma_un
;

933 } 
	tElf32_auxv_t
;

937 
uöt64_t
 
	ma_ty≥
;

940 
uöt64_t
 
	ma_vÆ
;

944 } 
	ma_un
;

945 } 
	tElf64_auxv_t
;

949 
	#AT_NULL
 0

	)

950 
	#AT_IGNORE
 1

	)

951 
	#AT_EXECFD
 2

	)

952 
	#AT_PHDR
 3

	)

953 
	#AT_PHENT
 4

	)

954 
	#AT_PHNUM
 5

	)

955 
	#AT_PAGESZ
 6

	)

956 
	#AT_BASE
 7

	)

957 
	#AT_FLAGS
 8

	)

958 
	#AT_ENTRY
 9

	)

959 
	#AT_NOTELF
 10

	)

960 
	#AT_UID
 11

	)

961 
	#AT_EUID
 12

	)

962 
	#AT_GID
 13

	)

963 
	#AT_EGID
 14

	)

964 
	#AT_CLKTCK
 17

	)

967 
	#AT_PLATFORM
 15

	)

968 
	#AT_HWCAP
 16

	)

973 
	#AT_FPUCW
 18

	)

976 
	#AT_DCACHEBSIZE
 19

	)

977 
	#AT_ICACHEBSIZE
 20

	)

978 
	#AT_UCACHEBSIZE
 21

	)

982 
	#AT_IGNOREPPC
 22

	)

984 
	#AT_SECURE
 23

	)

986 
	#AT_BASE_PLATFORM
 24

	)

988 
	#AT_RANDOM
 25

	)

990 
	#AT_EXECFN
 31

	)

994 
	#AT_SYSINFO
 32

	)

995 
	#AT_SYSINFO_EHDR
 33

	)

999 
	#AT_L1I_CACHESHAPE
 34

	)

1000 
	#AT_L1D_CACHESHAPE
 35

	)

1001 
	#AT_L2_CACHESHAPE
 36

	)

1002 
	#AT_L3_CACHESHAPE
 37

	)

1009 
Elf32_W‹d
 
	mn_«mesz
;

1010 
Elf32_W‹d
 
	mn_descsz
;

1011 
Elf32_W‹d
 
	mn_ty≥
;

1012 } 
	tElf32_Nhdr
;

1016 
Elf64_W‹d
 
	mn_«mesz
;

1017 
Elf64_W‹d
 
	mn_descsz
;

1018 
Elf64_W‹d
 
	mn_ty≥
;

1019 } 
	tElf64_Nhdr
;

1024 
	#ELF_NOTE_SOLARIS
 "SUNW Sﬁ¨is"

	)

1027 
	#ELF_NOTE_GNU
 "GNU"

	)

1033 
	#ELF_NOTE_PAGESIZE_HINT
 1

	)

1044 
	#NT_GNU_ABI_TAG
 1

	)

1045 
	#ELF_NOTE_ABI
 
NT_GNU_ABI_TAG


	)

1049 
	#ELF_NOTE_OS_LINUX
 0

	)

1050 
	#ELF_NOTE_OS_GNU
 1

	)

1051 
	#ELF_NOTE_OS_SOLARIS2
 2

	)

1052 
	#ELF_NOTE_OS_FREEBSD
 3

	)

1060 
	#NT_GNU_HWCAP
 2

	)

1064 
	#NT_GNU_BUILD_ID
 3

	)

1067 
	#NT_GNU_GOLD_VERSION
 4

	)

1073 
Elf32_Xw‹d
 
	mm_vÆue
;

1074 
Elf32_W‹d
 
	mm_öfo
;

1075 
Elf32_W‹d
 
	mm_poff£t
;

1076 
Elf32_HÆf
 
	mm_ª≥©
;

1077 
Elf32_HÆf
 
	mm_°ride
;

1078 } 
	tElf32_Move
;

1082 
Elf64_Xw‹d
 
	mm_vÆue
;

1083 
Elf64_Xw‹d
 
	mm_öfo
;

1084 
Elf64_Xw‹d
 
	mm_poff£t
;

1085 
Elf64_HÆf
 
	mm_ª≥©
;

1086 
Elf64_HÆf
 
	mm_°ride
;

1087 } 
	tElf64_Move
;

1090 
	#ELF32_M_SYM
(
öfo
Ë((öfoË>> 8)

	)

1091 
	#ELF32_M_SIZE
(
öfo
Ë((Ë(öfo))

	)

1092 
	#ELF32_M_INFO
(
sym
, 
size
Ë(((symË<< 8Ë+ (Ë(size))

	)

1094 
	#ELF64_M_SYM
(
öfo
Ë
	`ELF32_M_SYM
 (öfo)

	)

1095 
	#ELF64_M_SIZE
(
öfo
Ë
	`ELF32_M_SIZE
 (öfo)

	)

1096 
	#ELF64_M_INFO
(
sym
, 
size
Ë
	`ELF32_M_INFO
 (sym, size)

	)

1102 
	#EF_CPU32
 0x00810000

	)

1106 
	#R_68K_NONE
 0

	)

1107 
	#R_68K_32
 1

	)

1108 
	#R_68K_16
 2

	)

1109 
	#R_68K_8
 3

	)

1110 
	#R_68K_PC32
 4

	)

1111 
	#R_68K_PC16
 5

	)

1112 
	#R_68K_PC8
 6

	)

1113 
	#R_68K_GOT32
 7

	)

1114 
	#R_68K_GOT16
 8

	)

1115 
	#R_68K_GOT8
 9

	)

1116 
	#R_68K_GOT32O
 10

	)

1117 
	#R_68K_GOT16O
 11

	)

1118 
	#R_68K_GOT8O
 12

	)

1119 
	#R_68K_PLT32
 13

	)

1120 
	#R_68K_PLT16
 14

	)

1121 
	#R_68K_PLT8
 15

	)

1122 
	#R_68K_PLT32O
 16

	)

1123 
	#R_68K_PLT16O
 17

	)

1124 
	#R_68K_PLT8O
 18

	)

1125 
	#R_68K_COPY
 19

	)

1126 
	#R_68K_GLOB_DAT
 20

	)

1127 
	#R_68K_JMP_SLOT
 21

	)

1128 
	#R_68K_RELATIVE
 22

	)

1129 
	#R_68K_TLS_GD32
 25

	)

1130 
	#R_68K_TLS_GD16
 26

	)

1131 
	#R_68K_TLS_GD8
 27

	)

1132 
	#R_68K_TLS_LDM32
 28

	)

1133 
	#R_68K_TLS_LDM16
 29

	)

1134 
	#R_68K_TLS_LDM8
 30

	)

1135 
	#R_68K_TLS_LDO32
 31

	)

1136 
	#R_68K_TLS_LDO16
 32

	)

1137 
	#R_68K_TLS_LDO8
 33

	)

1138 
	#R_68K_TLS_IE32
 34

	)

1139 
	#R_68K_TLS_IE16
 35

	)

1140 
	#R_68K_TLS_IE8
 36

	)

1141 
	#R_68K_TLS_LE32
 37

	)

1143 
	#R_68K_TLS_LE16
 38

	)

1145 
	#R_68K_TLS_LE8
 39

	)

1147 
	#R_68K_TLS_DTPMOD32
 40

	)

1148 
	#R_68K_TLS_DTPREL32
 41

	)

1149 
	#R_68K_TLS_TPREL32
 42

	)

1151 
	#R_68K_NUM
 43

	)

1157 
	#R_386_NONE
 0

	)

1158 
	#R_386_32
 1

	)

1159 
	#R_386_PC32
 2

	)

1160 
	#R_386_GOT32
 3

	)

1161 
	#R_386_PLT32
 4

	)

1162 
	#R_386_COPY
 5

	)

1163 
	#R_386_GLOB_DAT
 6

	)

1164 
	#R_386_JMP_SLOT
 7

	)

1165 
	#R_386_RELATIVE
 8

	)

1166 
	#R_386_GOTOFF
 9

	)

1167 
	#R_386_GOTPC
 10

	)

1168 
	#R_386_32PLT
 11

	)

1169 
	#R_386_TLS_TPOFF
 14

	)

1170 
	#R_386_TLS_IE
 15

	)

1172 
	#R_386_TLS_GOTIE
 16

	)

1174 
	#R_386_TLS_LE
 17

	)

1176 
	#R_386_TLS_GD
 18

	)

1178 
	#R_386_TLS_LDM
 19

	)

1181 
	#R_386_16
 20

	)

1182 
	#R_386_PC16
 21

	)

1183 
	#R_386_8
 22

	)

1184 
	#R_386_PC8
 23

	)

1185 
	#R_386_TLS_GD_32
 24

	)

1187 
	#R_386_TLS_GD_PUSH
 25

	)

1188 
	#R_386_TLS_GD_CALL
 26

	)

1190 
	#R_386_TLS_GD_POP
 27

	)

1191 
	#R_386_TLS_LDM_32
 28

	)

1193 
	#R_386_TLS_LDM_PUSH
 29

	)

1194 
	#R_386_TLS_LDM_CALL
 30

	)

1196 
	#R_386_TLS_LDM_POP
 31

	)

1197 
	#R_386_TLS_LDO_32
 32

	)

1198 
	#R_386_TLS_IE_32
 33

	)

1200 
	#R_386_TLS_LE_32
 34

	)

1202 
	#R_386_TLS_DTPMOD32
 35

	)

1203 
	#R_386_TLS_DTPOFF32
 36

	)

1204 
	#R_386_TLS_TPOFF32
 37

	)

1206 
	#R_386_TLS_GOTDESC
 39

	)

1207 
	#R_386_TLS_DESC_CALL
 40

	)

1210 
	#R_386_TLS_DESC
 41

	)

1214 
	#R_386_IRELATIVE
 42

	)

1216 
	#R_386_NUM
 43

	)

1222 
	#STT_SPARC_REGISTER
 13

	)

1226 
	#EF_SPARCV9_MM
 3

	)

1227 
	#EF_SPARCV9_TSO
 0

	)

1228 
	#EF_SPARCV9_PSO
 1

	)

1229 
	#EF_SPARCV9_RMO
 2

	)

1230 
	#EF_SPARC_LEDATA
 0x800000

	)

1231 
	#EF_SPARC_EXT_MASK
 0xFFFF00

	)

1232 
	#EF_SPARC_32PLUS
 0x000100

	)

1233 
	#EF_SPARC_SUN_US1
 0x000200

	)

1234 
	#EF_SPARC_HAL_R1
 0x000400

	)

1235 
	#EF_SPARC_SUN_US3
 0x000800

	)

1239 
	#R_SPARC_NONE
 0

	)

1240 
	#R_SPARC_8
 1

	)

1241 
	#R_SPARC_16
 2

	)

1242 
	#R_SPARC_32
 3

	)

1243 
	#R_SPARC_DISP8
 4

	)

1244 
	#R_SPARC_DISP16
 5

	)

1245 
	#R_SPARC_DISP32
 6

	)

1246 
	#R_SPARC_WDISP30
 7

	)

1247 
	#R_SPARC_WDISP22
 8

	)

1248 
	#R_SPARC_HI22
 9

	)

1249 
	#R_SPARC_22
 10

	)

1250 
	#R_SPARC_13
 11

	)

1251 
	#R_SPARC_LO10
 12

	)

1252 
	#R_SPARC_GOT10
 13

	)

1253 
	#R_SPARC_GOT13
 14

	)

1254 
	#R_SPARC_GOT22
 15

	)

1255 
	#R_SPARC_PC10
 16

	)

1256 
	#R_SPARC_PC22
 17

	)

1257 
	#R_SPARC_WPLT30
 18

	)

1258 
	#R_SPARC_COPY
 19

	)

1259 
	#R_SPARC_GLOB_DAT
 20

	)

1260 
	#R_SPARC_JMP_SLOT
 21

	)

1261 
	#R_SPARC_RELATIVE
 22

	)

1262 
	#R_SPARC_UA32
 23

	)

1266 
	#R_SPARC_PLT32
 24

	)

1267 
	#R_SPARC_HIPLT22
 25

	)

1268 
	#R_SPARC_LOPLT10
 26

	)

1269 
	#R_SPARC_PCPLT32
 27

	)

1270 
	#R_SPARC_PCPLT22
 28

	)

1271 
	#R_SPARC_PCPLT10
 29

	)

1272 
	#R_SPARC_10
 30

	)

1273 
	#R_SPARC_11
 31

	)

1274 
	#R_SPARC_64
 32

	)

1275 
	#R_SPARC_OLO10
 33

	)

1276 
	#R_SPARC_HH22
 34

	)

1277 
	#R_SPARC_HM10
 35

	)

1278 
	#R_SPARC_LM22
 36

	)

1279 
	#R_SPARC_PC_HH22
 37

	)

1280 
	#R_SPARC_PC_HM10
 38

	)

1281 
	#R_SPARC_PC_LM22
 39

	)

1282 
	#R_SPARC_WDISP16
 40

	)

1283 
	#R_SPARC_WDISP19
 41

	)

1284 
	#R_SPARC_GLOB_JMP
 42

	)

1285 
	#R_SPARC_7
 43

	)

1286 
	#R_SPARC_5
 44

	)

1287 
	#R_SPARC_6
 45

	)

1288 
	#R_SPARC_DISP64
 46

	)

1289 
	#R_SPARC_PLT64
 47

	)

1290 
	#R_SPARC_HIX22
 48

	)

1291 
	#R_SPARC_LOX10
 49

	)

1292 
	#R_SPARC_H44
 50

	)

1293 
	#R_SPARC_M44
 51

	)

1294 
	#R_SPARC_L44
 52

	)

1295 
	#R_SPARC_REGISTER
 53

	)

1296 
	#R_SPARC_UA64
 54

	)

1297 
	#R_SPARC_UA16
 55

	)

1298 
	#R_SPARC_TLS_GD_HI22
 56

	)

1299 
	#R_SPARC_TLS_GD_LO10
 57

	)

1300 
	#R_SPARC_TLS_GD_ADD
 58

	)

1301 
	#R_SPARC_TLS_GD_CALL
 59

	)

1302 
	#R_SPARC_TLS_LDM_HI22
 60

	)

1303 
	#R_SPARC_TLS_LDM_LO10
 61

	)

1304 
	#R_SPARC_TLS_LDM_ADD
 62

	)

1305 
	#R_SPARC_TLS_LDM_CALL
 63

	)

1306 
	#R_SPARC_TLS_LDO_HIX22
 64

	)

1307 
	#R_SPARC_TLS_LDO_LOX10
 65

	)

1308 
	#R_SPARC_TLS_LDO_ADD
 66

	)

1309 
	#R_SPARC_TLS_IE_HI22
 67

	)

1310 
	#R_SPARC_TLS_IE_LO10
 68

	)

1311 
	#R_SPARC_TLS_IE_LD
 69

	)

1312 
	#R_SPARC_TLS_IE_LDX
 70

	)

1313 
	#R_SPARC_TLS_IE_ADD
 71

	)

1314 
	#R_SPARC_TLS_LE_HIX22
 72

	)

1315 
	#R_SPARC_TLS_LE_LOX10
 73

	)

1316 
	#R_SPARC_TLS_DTPMOD32
 74

	)

1317 
	#R_SPARC_TLS_DTPMOD64
 75

	)

1318 
	#R_SPARC_TLS_DTPOFF32
 76

	)

1319 
	#R_SPARC_TLS_DTPOFF64
 77

	)

1320 
	#R_SPARC_TLS_TPOFF32
 78

	)

1321 
	#R_SPARC_TLS_TPOFF64
 79

	)

1322 
	#R_SPARC_GOTDATA_HIX22
 80

	)

1323 
	#R_SPARC_GOTDATA_LOX10
 81

	)

1324 
	#R_SPARC_GOTDATA_OP_HIX22
 82

	)

1325 
	#R_SPARC_GOTDATA_OP_LOX10
 83

	)

1326 
	#R_SPARC_GOTDATA_OP
 84

	)

1327 
	#R_SPARC_H34
 85

	)

1328 
	#R_SPARC_SIZE32
 86

	)

1329 
	#R_SPARC_SIZE64
 87

	)

1330 
	#R_SPARC_JMP_IREL
 248

	)

1331 
	#R_SPARC_IRELATIVE
 249

	)

1332 
	#R_SPARC_GNU_VTINHERIT
 250

	)

1333 
	#R_SPARC_GNU_VTENTRY
 251

	)

1334 
	#R_SPARC_REV32
 252

	)

1336 
	#R_SPARC_NUM
 253

	)

1340 
	#DT_SPARC_REGISTER
 0x70000001

	)

1341 
	#DT_SPARC_NUM
 2

	)

1347 
	#EF_MIPS_NOREORDER
 1

	)

1348 
	#EF_MIPS_PIC
 2

	)

1349 
	#EF_MIPS_CPIC
 4

	)

1350 
	#EF_MIPS_XGOT
 8

	)

1351 
	#EF_MIPS_64BIT_WHIRL
 16

	)

1352 
	#EF_MIPS_ABI2
 32

	)

1353 
	#EF_MIPS_ABI_ON32
 64

	)

1354 
	#EF_MIPS_ARCH
 0xf0000000

	)

1358 
	#EF_MIPS_ARCH_1
 0x00000000

	)

1359 
	#EF_MIPS_ARCH_2
 0x10000000

	)

1360 
	#EF_MIPS_ARCH_3
 0x20000000

	)

1361 
	#EF_MIPS_ARCH_4
 0x30000000

	)

1362 
	#EF_MIPS_ARCH_5
 0x40000000

	)

1363 
	#EF_MIPS_ARCH_32
 0x60000000

	)

1364 
	#EF_MIPS_ARCH_64
 0x70000000

	)

1368 
	#E_MIPS_ARCH_1
 0x00000000

	)

1369 
	#E_MIPS_ARCH_2
 0x10000000

	)

1370 
	#E_MIPS_ARCH_3
 0x20000000

	)

1371 
	#E_MIPS_ARCH_4
 0x30000000

	)

1372 
	#E_MIPS_ARCH_5
 0x40000000

	)

1373 
	#E_MIPS_ARCH_32
 0x60000000

	)

1374 
	#E_MIPS_ARCH_64
 0x70000000

	)

1378 
	#SHN_MIPS_ACOMMON
 0xff00

	)

1379 
	#SHN_MIPS_TEXT
 0xff01

	)

1380 
	#SHN_MIPS_DATA
 0xff02

	)

1381 
	#SHN_MIPS_SCOMMON
 0xff03

	)

1382 
	#SHN_MIPS_SUNDEFINED
 0xff04

	)

1386 
	#SHT_MIPS_LIBLIST
 0x70000000

	)

1387 
	#SHT_MIPS_MSYM
 0x70000001

	)

1388 
	#SHT_MIPS_CONFLICT
 0x70000002

	)

1389 
	#SHT_MIPS_GPTAB
 0x70000003

	)

1390 
	#SHT_MIPS_UCODE
 0x70000004

	)

1391 
	#SHT_MIPS_DEBUG
 0x70000005

	)

1392 
	#SHT_MIPS_REGINFO
 0x70000006

	)

1393 
	#SHT_MIPS_PACKAGE
 0x70000007

	)

1394 
	#SHT_MIPS_PACKSYM
 0x70000008

	)

1395 
	#SHT_MIPS_RELD
 0x70000009

	)

1396 
	#SHT_MIPS_IFACE
 0x7000000b

	)

1397 
	#SHT_MIPS_CONTENT
 0x7000000c

	)

1398 
	#SHT_MIPS_OPTIONS
 0x7000000d

	)

1399 
	#SHT_MIPS_SHDR
 0x70000010

	)

1400 
	#SHT_MIPS_FDESC
 0x70000011

	)

1401 
	#SHT_MIPS_EXTSYM
 0x70000012

	)

1402 
	#SHT_MIPS_DENSE
 0x70000013

	)

1403 
	#SHT_MIPS_PDESC
 0x70000014

	)

1404 
	#SHT_MIPS_LOCSYM
 0x70000015

	)

1405 
	#SHT_MIPS_AUXSYM
 0x70000016

	)

1406 
	#SHT_MIPS_OPTSYM
 0x70000017

	)

1407 
	#SHT_MIPS_LOCSTR
 0x70000018

	)

1408 
	#SHT_MIPS_LINE
 0x70000019

	)

1409 
	#SHT_MIPS_RFDESC
 0x7000001a

	)

1410 
	#SHT_MIPS_DELTASYM
 0x7000001b

	)

1411 
	#SHT_MIPS_DELTAINST
 0x7000001c

	)

1412 
	#SHT_MIPS_DELTACLASS
 0x7000001d

	)

1413 
	#SHT_MIPS_DWARF
 0x7000001ê

	)

1414 
	#SHT_MIPS_DELTADECL
 0x7000001f

	)

1415 
	#SHT_MIPS_SYMBOL_LIB
 0x70000020

	)

1416 
	#SHT_MIPS_EVENTS
 0x70000021

	)

1417 
	#SHT_MIPS_TRANSLATE
 0x70000022

	)

1418 
	#SHT_MIPS_PIXIE
 0x70000023

	)

1419 
	#SHT_MIPS_XLATE
 0x70000024

	)

1420 
	#SHT_MIPS_XLATE_DEBUG
 0x70000025

	)

1421 
	#SHT_MIPS_WHIRL
 0x70000026

	)

1422 
	#SHT_MIPS_EH_REGION
 0x70000027

	)

1423 
	#SHT_MIPS_XLATE_OLD
 0x70000028

	)

1424 
	#SHT_MIPS_PDR_EXCEPTION
 0x70000029

	)

1428 
	#SHF_MIPS_GPREL
 0x10000000

	)

1429 
	#SHF_MIPS_MERGE
 0x20000000

	)

1430 
	#SHF_MIPS_ADDR
 0x40000000

	)

1431 
	#SHF_MIPS_STRINGS
 0x80000000

	)

1432 
	#SHF_MIPS_NOSTRIP
 0x08000000

	)

1433 
	#SHF_MIPS_LOCAL
 0x04000000

	)

1434 
	#SHF_MIPS_NAMES
 0x02000000

	)

1435 
	#SHF_MIPS_NODUPE
 0x01000000

	)

1441 
	#STO_MIPS_DEFAULT
 0x0

	)

1442 
	#STO_MIPS_INTERNAL
 0x1

	)

1443 
	#STO_MIPS_HIDDEN
 0x2

	)

1444 
	#STO_MIPS_PROTECTED
 0x3

	)

1445 
	#STO_MIPS_PLT
 0x8

	)

1446 
	#STO_MIPS_SC_ALIGN_UNUSED
 0xff

	)

1449 
	#STB_MIPS_SPLIT_COMMON
 13

	)

1457 
Elf32_W‹d
 
	mgt_cuºít_g_vÆue
;

1458 
Elf32_W‹d
 
	mgt_unu£d
;

1459 } 
	mgt_hódî
;

1462 
Elf32_W‹d
 
	mgt_g_vÆue
;

1463 
Elf32_W‹d
 
	mgt_byãs
;

1464 } 
	mgt_íåy
;

1465 } 
	tElf32_g±ab
;

1471 
Elf32_W‹d
 
	mri_g¥mask
;

1472 
Elf32_W‹d
 
	mri_˝rmask
[4];

1473 
Elf32_Sw‹d
 
	mri_gp_vÆue
;

1474 } 
	tElf32_RegInfo
;

1480 
	mköd
;

1482 
	msize
;

1483 
Elf32_Se˘i⁄
 
	m£˘i⁄
;

1485 
Elf32_W‹d
 
	möfo
;

1486 } 
	tElf_O±i⁄s
;

1490 
	#ODK_NULL
 0

	)

1491 
	#ODK_REGINFO
 1

	)

1492 
	#ODK_EXCEPTIONS
 2

	)

1493 
	#ODK_PAD
 3

	)

1494 
	#ODK_HWPATCH
 4

	)

1495 
	#ODK_FILL
 5

	)

1496 
	#ODK_TAGS
 6

	)

1497 
	#ODK_HWAND
 7

	)

1498 
	#ODK_HWOR
 8

	)

1502 
	#OEX_FPU_MIN
 0x1‡

	)

1503 
	#OEX_FPU_MAX
 0x1f00

	)

1504 
	#OEX_PAGE0
 0x10000

	)

1505 
	#OEX_SMM
 0x20000

	)

1506 
	#OEX_FPDBUG
 0x40000

	)

1507 
	#OEX_PRECISEFP
 
OEX_FPDBUG


	)

1508 
	#OEX_DISMISS
 0x80000

	)

1510 
	#OEX_FPU_INVAL
 0x10

	)

1511 
	#OEX_FPU_DIV0
 0x08

	)

1512 
	#OEX_FPU_OFLO
 0x04

	)

1513 
	#OEX_FPU_UFLO
 0x02

	)

1514 
	#OEX_FPU_INEX
 0x01

	)

1518 
	#OHW_R4KEOP
 0x1

	)

1519 
	#OHW_R8KPFETCH
 0x2

	)

1520 
	#OHW_R5KEOP
 0x4

	)

1521 
	#OHW_R5KCVTL
 0x8

	)

1523 
	#OPAD_PREFIX
 0x1

	)

1524 
	#OPAD_POSTFIX
 0x2

	)

1525 
	#OPAD_SYMBOL
 0x4

	)

1531 
Elf32_W‹d
 
	mhwp_Êags1
;

1532 
Elf32_W‹d
 
	mhwp_Êags2
;

1533 } 
	tElf_O±i⁄s_Hw
;

1537 
	#OHWA0_R4KEOP_CHECKED
 0x00000001

	)

1538 
	#OHWA1_R4KEOP_CLEAN
 0x00000002

	)

1542 
	#R_MIPS_NONE
 0

	)

1543 
	#R_MIPS_16
 1

	)

1544 
	#R_MIPS_32
 2

	)

1545 
	#R_MIPS_REL32
 3

	)

1546 
	#R_MIPS_26
 4

	)

1547 
	#R_MIPS_HI16
 5

	)

1548 
	#R_MIPS_LO16
 6

	)

1549 
	#R_MIPS_GPREL16
 7

	)

1550 
	#R_MIPS_LITERAL
 8

	)

1551 
	#R_MIPS_GOT16
 9

	)

1552 
	#R_MIPS_PC16
 10

	)

1553 
	#R_MIPS_CALL16
 11

	)

1554 
	#R_MIPS_GPREL32
 12

	)

1556 
	#R_MIPS_SHIFT5
 16

	)

1557 
	#R_MIPS_SHIFT6
 17

	)

1558 
	#R_MIPS_64
 18

	)

1559 
	#R_MIPS_GOT_DISP
 19

	)

1560 
	#R_MIPS_GOT_PAGE
 20

	)

1561 
	#R_MIPS_GOT_OFST
 21

	)

1562 
	#R_MIPS_GOT_HI16
 22

	)

1563 
	#R_MIPS_GOT_LO16
 23

	)

1564 
	#R_MIPS_SUB
 24

	)

1565 
	#R_MIPS_INSERT_A
 25

	)

1566 
	#R_MIPS_INSERT_B
 26

	)

1567 
	#R_MIPS_DELETE
 27

	)

1568 
	#R_MIPS_HIGHER
 28

	)

1569 
	#R_MIPS_HIGHEST
 29

	)

1570 
	#R_MIPS_CALL_HI16
 30

	)

1571 
	#R_MIPS_CALL_LO16
 31

	)

1572 
	#R_MIPS_SCN_DISP
 32

	)

1573 
	#R_MIPS_REL16
 33

	)

1574 
	#R_MIPS_ADD_IMMEDIATE
 34

	)

1575 
	#R_MIPS_PJUMP
 35

	)

1576 
	#R_MIPS_RELGOT
 36

	)

1577 
	#R_MIPS_JALR
 37

	)

1578 
	#R_MIPS_TLS_DTPMOD32
 38

	)

1579 
	#R_MIPS_TLS_DTPREL32
 39

	)

1580 
	#R_MIPS_TLS_DTPMOD64
 40

	)

1581 
	#R_MIPS_TLS_DTPREL64
 41

	)

1582 
	#R_MIPS_TLS_GD
 42

	)

1583 
	#R_MIPS_TLS_LDM
 43

	)

1584 
	#R_MIPS_TLS_DTPREL_HI16
 44

	)

1585 
	#R_MIPS_TLS_DTPREL_LO16
 45

	)

1586 
	#R_MIPS_TLS_GOTTPREL
 46

	)

1587 
	#R_MIPS_TLS_TPREL32
 47

	)

1588 
	#R_MIPS_TLS_TPREL64
 48

	)

1589 
	#R_MIPS_TLS_TPREL_HI16
 49

	)

1590 
	#R_MIPS_TLS_TPREL_LO16
 50

	)

1591 
	#R_MIPS_GLOB_DAT
 51

	)

1592 
	#R_MIPS_COPY
 126

	)

1593 
	#R_MIPS_JUMP_SLOT
 127

	)

1595 
	#R_MIPS_NUM
 128

	)

1599 
	#PT_MIPS_REGINFO
 0x70000000

	)

1600 
	#PT_MIPS_RTPROC
 0x70000001

	)

1601 
	#PT_MIPS_OPTIONS
 0x70000002

	)

1605 
	#PF_MIPS_LOCAL
 0x10000000

	)

1609 
	#DT_MIPS_RLD_VERSION
 0x70000001

	)

1610 
	#DT_MIPS_TIME_STAMP
 0x70000002

	)

1611 
	#DT_MIPS_ICHECKSUM
 0x70000003

	)

1612 
	#DT_MIPS_IVERSION
 0x70000004

	)

1613 
	#DT_MIPS_FLAGS
 0x70000005

	)

1614 
	#DT_MIPS_BASE_ADDRESS
 0x70000006

	)

1615 
	#DT_MIPS_MSYM
 0x70000007

	)

1616 
	#DT_MIPS_CONFLICT
 0x70000008

	)

1617 
	#DT_MIPS_LIBLIST
 0x70000009

	)

1618 
	#DT_MIPS_LOCAL_GOTNO
 0x7000000®

	)

1619 
	#DT_MIPS_CONFLICTNO
 0x7000000b

	)

1620 
	#DT_MIPS_LIBLISTNO
 0x70000010

	)

1621 
	#DT_MIPS_SYMTABNO
 0x70000011

	)

1622 
	#DT_MIPS_UNREFEXTNO
 0x70000012

	)

1623 
	#DT_MIPS_GOTSYM
 0x70000013

	)

1624 
	#DT_MIPS_HIPAGENO
 0x70000014

	)

1625 
	#DT_MIPS_RLD_MAP
 0x70000016

	)

1626 
	#DT_MIPS_DELTA_CLASS
 0x70000017

	)

1627 
	#DT_MIPS_DELTA_CLASS_NO
 0x70000018

	)

1629 
	#DT_MIPS_DELTA_INSTANCE
 0x70000019

	)

1630 
	#DT_MIPS_DELTA_INSTANCE_NO
 0x7000001®

	)

1632 
	#DT_MIPS_DELTA_RELOC
 0x7000001b

	)

1633 
	#DT_MIPS_DELTA_RELOC_NO
 0x7000001¯

	)

1635 
	#DT_MIPS_DELTA_SYM
 0x7000001d

	)

1637 
	#DT_MIPS_DELTA_SYM_NO
 0x7000001ê

	)

1639 
	#DT_MIPS_DELTA_CLASSSYM
 0x70000020

	)

1641 
	#DT_MIPS_DELTA_CLASSSYM_NO
 0x70000021

	)

1643 
	#DT_MIPS_CXX_FLAGS
 0x70000022

	)

1644 
	#DT_MIPS_PIXIE_INIT
 0x70000023

	)

1645 
	#DT_MIPS_SYMBOL_LIB
 0x70000024

	)

1646 
	#DT_MIPS_LOCALPAGE_GOTIDX
 0x70000025

	)

1647 
	#DT_MIPS_LOCAL_GOTIDX
 0x70000026

	)

1648 
	#DT_MIPS_HIDDEN_GOTIDX
 0x70000027

	)

1649 
	#DT_MIPS_PROTECTED_GOTIDX
 0x70000028

	)

1650 
	#DT_MIPS_OPTIONS
 0x70000029

	)

1651 
	#DT_MIPS_INTERFACE
 0x7000002®

	)

1652 
	#DT_MIPS_DYNSTR_ALIGN
 0x7000002b

	)

1653 
	#DT_MIPS_INTERFACE_SIZE
 0x7000002¯

	)

1654 
	#DT_MIPS_RLD_TEXT_RESOLVE_ADDR
 0x7000002d

	)

1656 
	#DT_MIPS_PERF_SUFFIX
 0x7000002ê

	)

1658 
	#DT_MIPS_COMPACT_SIZE
 0x7000002‡

	)

1659 
	#DT_MIPS_GP_VALUE
 0x70000030

	)

1660 
	#DT_MIPS_AUX_DYNAMIC
 0x70000031

	)

1662 
	#DT_MIPS_PLTGOT
 0x70000032

	)

1666 
	#DT_MIPS_RWPLT
 0x70000034

	)

1667 
	#DT_MIPS_NUM
 0x35

	)

1671 
	#RHF_NONE
 0

	)

1672 
	#RHF_QUICKSTART
 (1 << 0Ë

	)

1673 
	#RHF_NOTPOT
 (1 << 1Ë

	)

1674 
	#RHF_NO_LIBRARY_REPLACEMENT
 (1 << 2Ë

	)

1675 
	#RHF_NO_MOVE
 (1 << 3)

	)

1676 
	#RHF_SGI_ONLY
 (1 << 4)

	)

1677 
	#RHF_GUARANTEE_INIT
 (1 << 5)

	)

1678 
	#RHF_DELTA_C_PLUS_PLUS
 (1 << 6)

	)

1679 
	#RHF_GUARANTEE_START_INIT
 (1 << 7)

	)

1680 
	#RHF_PIXIE
 (1 << 8)

	)

1681 
	#RHF_DEFAULT_DELAY_LOAD
 (1 << 9)

	)

1682 
	#RHF_REQUICKSTART
 (1 << 10)

	)

1683 
	#RHF_REQUICKSTARTED
 (1 << 11)

	)

1684 
	#RHF_CORD
 (1 << 12)

	)

1685 
	#RHF_NO_UNRES_UNDEF
 (1 << 13)

	)

1686 
	#RHF_RLD_ORDER_SAFE
 (1 << 14)

	)

1692 
Elf32_W‹d
 
	ml_«me
;

1693 
Elf32_W‹d
 
	ml_time_°amp
;

1694 
Elf32_W‹d
 
	ml_checksum
;

1695 
Elf32_W‹d
 
	ml_vîsi⁄
;

1696 
Elf32_W‹d
 
	ml_Êags
;

1697 } 
	tElf32_Lib
;

1701 
Elf64_W‹d
 
	ml_«me
;

1702 
Elf64_W‹d
 
	ml_time_°amp
;

1703 
Elf64_W‹d
 
	ml_checksum
;

1704 
Elf64_W‹d
 
	ml_vîsi⁄
;

1705 
Elf64_W‹d
 
	ml_Êags
;

1706 } 
	tElf64_Lib
;

1711 
	#LL_NONE
 0

	)

1712 
	#LL_EXACT_MATCH
 (1 << 0Ë

	)

1713 
	#LL_IGNORE_INT_VER
 (1 << 1Ë

	)

1714 
	#LL_REQUIRE_MINOR
 (1 << 2)

	)

1715 
	#LL_EXPORTS
 (1 << 3)

	)

1716 
	#LL_DELAY_LOAD
 (1 << 4)

	)

1717 
	#LL_DELTA
 (1 << 5)

	)

1721 
Elf32_Addr
 
	tElf32_C⁄Êi˘
;

1728 
	#EF_PARISC_TRAPNIL
 0x00010000

	)

1729 
	#EF_PARISC_EXT
 0x00020000

	)

1730 
	#EF_PARISC_LSB
 0x00040000

	)

1731 
	#EF_PARISC_WIDE
 0x00080000

	)

1732 
	#EF_PARISC_NO_KABP
 0x00100000

	)

1734 
	#EF_PARISC_LAZYSWAP
 0x00400000

	)

1735 
	#EF_PARISC_ARCH
 0x0000fff‡

	)

1739 
	#EFA_PARISC_1_0
 0x020b

	)

1740 
	#EFA_PARISC_1_1
 0x0210

	)

1741 
	#EFA_PARISC_2_0
 0x0214

	)

1745 
	#SHN_PARISC_ANSI_COMMON
 0xff00

	)

1747 
	#SHN_PARISC_HUGE_COMMON
 0xff01

	)

1751 
	#SHT_PARISC_EXT
 0x70000000

	)

1752 
	#SHT_PARISC_UNWIND
 0x70000001

	)

1753 
	#SHT_PARISC_DOC
 0x70000002

	)

1757 
	#SHF_PARISC_SHORT
 0x20000000

	)

1758 
	#SHF_PARISC_HUGE
 0x40000000

	)

1759 
	#SHF_PARISC_SBP
 0x80000000

	)

1763 
	#STT_PARISC_MILLICODE
 13

	)

1765 
	#STT_HP_OPAQUE
 (
STT_LOOS
 + 0x1)

	)

1766 
	#STT_HP_STUB
 (
STT_LOOS
 + 0x2)

	)

1770 
	#R_PARISC_NONE
 0

	)

1771 
	#R_PARISC_DIR32
 1

	)

1772 
	#R_PARISC_DIR21L
 2

	)

1773 
	#R_PARISC_DIR17R
 3

	)

1774 
	#R_PARISC_DIR17F
 4

	)

1775 
	#R_PARISC_DIR14R
 6

	)

1776 
	#R_PARISC_PCREL32
 9

	)

1777 
	#R_PARISC_PCREL21L
 10

	)

1778 
	#R_PARISC_PCREL17R
 11

	)

1779 
	#R_PARISC_PCREL17F
 12

	)

1780 
	#R_PARISC_PCREL14R
 14

	)

1781 
	#R_PARISC_DPREL21L
 18

	)

1782 
	#R_PARISC_DPREL14R
 22

	)

1783 
	#R_PARISC_GPREL21L
 26

	)

1784 
	#R_PARISC_GPREL14R
 30

	)

1785 
	#R_PARISC_LTOFF21L
 34

	)

1786 
	#R_PARISC_LTOFF14R
 38

	)

1787 
	#R_PARISC_SECREL32
 41

	)

1788 
	#R_PARISC_SEGBASE
 48

	)

1789 
	#R_PARISC_SEGREL32
 49

	)

1790 
	#R_PARISC_PLTOFF21L
 50

	)

1791 
	#R_PARISC_PLTOFF14R
 54

	)

1792 
	#R_PARISC_LTOFF_FPTR32
 57

	)

1793 
	#R_PARISC_LTOFF_FPTR21L
 58

	)

1794 
	#R_PARISC_LTOFF_FPTR14R
 62

	)

1795 
	#R_PARISC_FPTR64
 64

	)

1796 
	#R_PARISC_PLABEL32
 65

	)

1797 
	#R_PARISC_PLABEL21L
 66

	)

1798 
	#R_PARISC_PLABEL14R
 70

	)

1799 
	#R_PARISC_PCREL64
 72

	)

1800 
	#R_PARISC_PCREL22F
 74

	)

1801 
	#R_PARISC_PCREL14WR
 75

	)

1802 
	#R_PARISC_PCREL14DR
 76

	)

1803 
	#R_PARISC_PCREL16F
 77

	)

1804 
	#R_PARISC_PCREL16WF
 78

	)

1805 
	#R_PARISC_PCREL16DF
 79

	)

1806 
	#R_PARISC_DIR64
 80

	)

1807 
	#R_PARISC_DIR14WR
 83

	)

1808 
	#R_PARISC_DIR14DR
 84

	)

1809 
	#R_PARISC_DIR16F
 85

	)

1810 
	#R_PARISC_DIR16WF
 86

	)

1811 
	#R_PARISC_DIR16DF
 87

	)

1812 
	#R_PARISC_GPREL64
 88

	)

1813 
	#R_PARISC_GPREL14WR
 91

	)

1814 
	#R_PARISC_GPREL14DR
 92

	)

1815 
	#R_PARISC_GPREL16F
 93

	)

1816 
	#R_PARISC_GPREL16WF
 94

	)

1817 
	#R_PARISC_GPREL16DF
 95

	)

1818 
	#R_PARISC_LTOFF64
 96

	)

1819 
	#R_PARISC_LTOFF14WR
 99

	)

1820 
	#R_PARISC_LTOFF14DR
 100

	)

1821 
	#R_PARISC_LTOFF16F
 101

	)

1822 
	#R_PARISC_LTOFF16WF
 102

	)

1823 
	#R_PARISC_LTOFF16DF
 103

	)

1824 
	#R_PARISC_SECREL64
 104

	)

1825 
	#R_PARISC_SEGREL64
 112

	)

1826 
	#R_PARISC_PLTOFF14WR
 115

	)

1827 
	#R_PARISC_PLTOFF14DR
 116

	)

1828 
	#R_PARISC_PLTOFF16F
 117

	)

1829 
	#R_PARISC_PLTOFF16WF
 118

	)

1830 
	#R_PARISC_PLTOFF16DF
 119

	)

1831 
	#R_PARISC_LTOFF_FPTR64
 120

	)

1832 
	#R_PARISC_LTOFF_FPTR14WR
 123

	)

1833 
	#R_PARISC_LTOFF_FPTR14DR
 124

	)

1834 
	#R_PARISC_LTOFF_FPTR16F
 125

	)

1835 
	#R_PARISC_LTOFF_FPTR16WF
 126

	)

1836 
	#R_PARISC_LTOFF_FPTR16DF
 127

	)

1837 
	#R_PARISC_LORESERVE
 128

	)

1838 
	#R_PARISC_COPY
 128

	)

1839 
	#R_PARISC_IPLT
 129

	)

1840 
	#R_PARISC_EPLT
 130

	)

1841 
	#R_PARISC_TPREL32
 153

	)

1842 
	#R_PARISC_TPREL21L
 154

	)

1843 
	#R_PARISC_TPREL14R
 158

	)

1844 
	#R_PARISC_LTOFF_TP21L
 162

	)

1845 
	#R_PARISC_LTOFF_TP14R
 166

	)

1846 
	#R_PARISC_LTOFF_TP14F
 167

	)

1847 
	#R_PARISC_TPREL64
 216

	)

1848 
	#R_PARISC_TPREL14WR
 219

	)

1849 
	#R_PARISC_TPREL14DR
 220

	)

1850 
	#R_PARISC_TPREL16F
 221

	)

1851 
	#R_PARISC_TPREL16WF
 222

	)

1852 
	#R_PARISC_TPREL16DF
 223

	)

1853 
	#R_PARISC_LTOFF_TP64
 224

	)

1854 
	#R_PARISC_LTOFF_TP14WR
 227

	)

1855 
	#R_PARISC_LTOFF_TP14DR
 228

	)

1856 
	#R_PARISC_LTOFF_TP16F
 229

	)

1857 
	#R_PARISC_LTOFF_TP16WF
 230

	)

1858 
	#R_PARISC_LTOFF_TP16DF
 231

	)

1859 
	#R_PARISC_GNU_VTENTRY
 232

	)

1860 
	#R_PARISC_GNU_VTINHERIT
 233

	)

1861 
	#R_PARISC_TLS_GD21L
 234

	)

1862 
	#R_PARISC_TLS_GD14R
 235

	)

1863 
	#R_PARISC_TLS_GDCALL
 236

	)

1864 
	#R_PARISC_TLS_LDM21L
 237

	)

1865 
	#R_PARISC_TLS_LDM14R
 238

	)

1866 
	#R_PARISC_TLS_LDMCALL
 239

	)

1867 
	#R_PARISC_TLS_LDO21L
 240

	)

1868 
	#R_PARISC_TLS_LDO14R
 241

	)

1869 
	#R_PARISC_TLS_DTPMOD32
 242

	)

1870 
	#R_PARISC_TLS_DTPMOD64
 243

	)

1871 
	#R_PARISC_TLS_DTPOFF32
 244

	)

1872 
	#R_PARISC_TLS_DTPOFF64
 245

	)

1873 
	#R_PARISC_TLS_LE21L
 
R_PARISC_TPREL21L


	)

1874 
	#R_PARISC_TLS_LE14R
 
R_PARISC_TPREL14R


	)

1875 
	#R_PARISC_TLS_IE21L
 
R_PARISC_LTOFF_TP21L


	)

1876 
	#R_PARISC_TLS_IE14R
 
R_PARISC_LTOFF_TP14R


	)

1877 
	#R_PARISC_TLS_TPREL32
 
R_PARISC_TPREL32


	)

1878 
	#R_PARISC_TLS_TPREL64
 
R_PARISC_TPREL64


	)

1879 
	#R_PARISC_HIRESERVE
 255

	)

1883 
	#PT_HP_TLS
 (
PT_LOOS
 + 0x0)

	)

1884 
	#PT_HP_CORE_NONE
 (
PT_LOOS
 + 0x1)

	)

1885 
	#PT_HP_CORE_VERSION
 (
PT_LOOS
 + 0x2)

	)

1886 
	#PT_HP_CORE_KERNEL
 (
PT_LOOS
 + 0x3)

	)

1887 
	#PT_HP_CORE_COMM
 (
PT_LOOS
 + 0x4)

	)

1888 
	#PT_HP_CORE_PROC
 (
PT_LOOS
 + 0x5)

	)

1889 
	#PT_HP_CORE_LOADABLE
 (
PT_LOOS
 + 0x6)

	)

1890 
	#PT_HP_CORE_STACK
 (
PT_LOOS
 + 0x7)

	)

1891 
	#PT_HP_CORE_SHM
 (
PT_LOOS
 + 0x8)

	)

1892 
	#PT_HP_CORE_MMF
 (
PT_LOOS
 + 0x9)

	)

1893 
	#PT_HP_PARALLEL
 (
PT_LOOS
 + 0x10)

	)

1894 
	#PT_HP_FASTBIND
 (
PT_LOOS
 + 0x11)

	)

1895 
	#PT_HP_OPT_ANNOT
 (
PT_LOOS
 + 0x12)

	)

1896 
	#PT_HP_HSL_ANNOT
 (
PT_LOOS
 + 0x13)

	)

1897 
	#PT_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

1899 
	#PT_PARISC_ARCHEXT
 0x70000000

	)

1900 
	#PT_PARISC_UNWIND
 0x70000001

	)

1904 
	#PF_PARISC_SBP
 0x08000000

	)

1906 
	#PF_HP_PAGE_SIZE
 0x00100000

	)

1907 
	#PF_HP_FAR_SHARED
 0x00200000

	)

1908 
	#PF_HP_NEAR_SHARED
 0x00400000

	)

1909 
	#PF_HP_CODE
 0x01000000

	)

1910 
	#PF_HP_MODIFY
 0x02000000

	)

1911 
	#PF_HP_LAZYSWAP
 0x04000000

	)

1912 
	#PF_HP_SBP
 0x08000000

	)

1919 
	#EF_ALPHA_32BIT
 1

	)

1920 
	#EF_ALPHA_CANRELAX
 2

	)

1925 
	#SHT_ALPHA_DEBUG
 0x70000001

	)

1926 
	#SHT_ALPHA_REGINFO
 0x70000002

	)

1930 
	#SHF_ALPHA_GPREL
 0x10000000

	)

1933 
	#STO_ALPHA_NOPV
 0x80

	)

1934 
	#STO_ALPHA_STD_GPLOAD
 0x88

	)

1938 
	#R_ALPHA_NONE
 0

	)

1939 
	#R_ALPHA_REFLONG
 1

	)

1940 
	#R_ALPHA_REFQUAD
 2

	)

1941 
	#R_ALPHA_GPREL32
 3

	)

1942 
	#R_ALPHA_LITERAL
 4

	)

1943 
	#R_ALPHA_LITUSE
 5

	)

1944 
	#R_ALPHA_GPDISP
 6

	)

1945 
	#R_ALPHA_BRADDR
 7

	)

1946 
	#R_ALPHA_HINT
 8

	)

1947 
	#R_ALPHA_SREL16
 9

	)

1948 
	#R_ALPHA_SREL32
 10

	)

1949 
	#R_ALPHA_SREL64
 11

	)

1950 
	#R_ALPHA_GPRELHIGH
 17

	)

1951 
	#R_ALPHA_GPRELLOW
 18

	)

1952 
	#R_ALPHA_GPREL16
 19

	)

1953 
	#R_ALPHA_COPY
 24

	)

1954 
	#R_ALPHA_GLOB_DAT
 25

	)

1955 
	#R_ALPHA_JMP_SLOT
 26

	)

1956 
	#R_ALPHA_RELATIVE
 27

	)

1957 
	#R_ALPHA_TLS_GD_HI
 28

	)

1958 
	#R_ALPHA_TLSGD
 29

	)

1959 
	#R_ALPHA_TLS_LDM
 30

	)

1960 
	#R_ALPHA_DTPMOD64
 31

	)

1961 
	#R_ALPHA_GOTDTPREL
 32

	)

1962 
	#R_ALPHA_DTPREL64
 33

	)

1963 
	#R_ALPHA_DTPRELHI
 34

	)

1964 
	#R_ALPHA_DTPRELLO
 35

	)

1965 
	#R_ALPHA_DTPREL16
 36

	)

1966 
	#R_ALPHA_GOTTPREL
 37

	)

1967 
	#R_ALPHA_TPREL64
 38

	)

1968 
	#R_ALPHA_TPRELHI
 39

	)

1969 
	#R_ALPHA_TPRELLO
 40

	)

1970 
	#R_ALPHA_TPREL16
 41

	)

1972 
	#R_ALPHA_NUM
 46

	)

1975 
	#LITUSE_ALPHA_ADDR
 0

	)

1976 
	#LITUSE_ALPHA_BASE
 1

	)

1977 
	#LITUSE_ALPHA_BYTOFF
 2

	)

1978 
	#LITUSE_ALPHA_JSR
 3

	)

1979 
	#LITUSE_ALPHA_TLS_GD
 4

	)

1980 
	#LITUSE_ALPHA_TLS_LDM
 5

	)

1983 
	#DT_ALPHA_PLTRO
 (
DT_LOPROC
 + 0)

	)

1984 
	#DT_ALPHA_NUM
 1

	)

1989 
	#EF_PPC_EMB
 0x80000000

	)

1992 
	#EF_PPC_RELOCATABLE
 0x00010000

	)

1993 
	#EF_PPC_RELOCATABLE_LIB
 0x00008000

	)

1997 
	#R_PPC_NONE
 0

	)

1998 
	#R_PPC_ADDR32
 1

	)

1999 
	#R_PPC_ADDR24
 2

	)

2000 
	#R_PPC_ADDR16
 3

	)

2001 
	#R_PPC_ADDR16_LO
 4

	)

2002 
	#R_PPC_ADDR16_HI
 5

	)

2003 
	#R_PPC_ADDR16_HA
 6

	)

2004 
	#R_PPC_ADDR14
 7

	)

2005 
	#R_PPC_ADDR14_BRTAKEN
 8

	)

2006 
	#R_PPC_ADDR14_BRNTAKEN
 9

	)

2007 
	#R_PPC_REL24
 10

	)

2008 
	#R_PPC_REL14
 11

	)

2009 
	#R_PPC_REL14_BRTAKEN
 12

	)

2010 
	#R_PPC_REL14_BRNTAKEN
 13

	)

2011 
	#R_PPC_GOT16
 14

	)

2012 
	#R_PPC_GOT16_LO
 15

	)

2013 
	#R_PPC_GOT16_HI
 16

	)

2014 
	#R_PPC_GOT16_HA
 17

	)

2015 
	#R_PPC_PLTREL24
 18

	)

2016 
	#R_PPC_COPY
 19

	)

2017 
	#R_PPC_GLOB_DAT
 20

	)

2018 
	#R_PPC_JMP_SLOT
 21

	)

2019 
	#R_PPC_RELATIVE
 22

	)

2020 
	#R_PPC_LOCAL24PC
 23

	)

2021 
	#R_PPC_UADDR32
 24

	)

2022 
	#R_PPC_UADDR16
 25

	)

2023 
	#R_PPC_REL32
 26

	)

2024 
	#R_PPC_PLT32
 27

	)

2025 
	#R_PPC_PLTREL32
 28

	)

2026 
	#R_PPC_PLT16_LO
 29

	)

2027 
	#R_PPC_PLT16_HI
 30

	)

2028 
	#R_PPC_PLT16_HA
 31

	)

2029 
	#R_PPC_SDAREL16
 32

	)

2030 
	#R_PPC_SECTOFF
 33

	)

2031 
	#R_PPC_SECTOFF_LO
 34

	)

2032 
	#R_PPC_SECTOFF_HI
 35

	)

2033 
	#R_PPC_SECTOFF_HA
 36

	)

2036 
	#R_PPC_TLS
 67

	)

2037 
	#R_PPC_DTPMOD32
 68

	)

2038 
	#R_PPC_TPREL16
 69

	)

2039 
	#R_PPC_TPREL16_LO
 70

	)

2040 
	#R_PPC_TPREL16_HI
 71

	)

2041 
	#R_PPC_TPREL16_HA
 72

	)

2042 
	#R_PPC_TPREL32
 73

	)

2043 
	#R_PPC_DTPREL16
 74

	)

2044 
	#R_PPC_DTPREL16_LO
 75

	)

2045 
	#R_PPC_DTPREL16_HI
 76

	)

2046 
	#R_PPC_DTPREL16_HA
 77

	)

2047 
	#R_PPC_DTPREL32
 78

	)

2048 
	#R_PPC_GOT_TLSGD16
 79

	)

2049 
	#R_PPC_GOT_TLSGD16_LO
 80

	)

2050 
	#R_PPC_GOT_TLSGD16_HI
 81

	)

2051 
	#R_PPC_GOT_TLSGD16_HA
 82

	)

2052 
	#R_PPC_GOT_TLSLD16
 83

	)

2053 
	#R_PPC_GOT_TLSLD16_LO
 84

	)

2054 
	#R_PPC_GOT_TLSLD16_HI
 85

	)

2055 
	#R_PPC_GOT_TLSLD16_HA
 86

	)

2056 
	#R_PPC_GOT_TPREL16
 87

	)

2057 
	#R_PPC_GOT_TPREL16_LO
 88

	)

2058 
	#R_PPC_GOT_TPREL16_HI
 89

	)

2059 
	#R_PPC_GOT_TPREL16_HA
 90

	)

2060 
	#R_PPC_GOT_DTPREL16
 91

	)

2061 
	#R_PPC_GOT_DTPREL16_LO
 92

	)

2062 
	#R_PPC_GOT_DTPREL16_HI
 93

	)

2063 
	#R_PPC_GOT_DTPREL16_HA
 94

	)

2067 
	#R_PPC_EMB_NADDR32
 101

	)

2068 
	#R_PPC_EMB_NADDR16
 102

	)

2069 
	#R_PPC_EMB_NADDR16_LO
 103

	)

2070 
	#R_PPC_EMB_NADDR16_HI
 104

	)

2071 
	#R_PPC_EMB_NADDR16_HA
 105

	)

2072 
	#R_PPC_EMB_SDAI16
 106

	)

2073 
	#R_PPC_EMB_SDA2I16
 107

	)

2074 
	#R_PPC_EMB_SDA2REL
 108

	)

2075 
	#R_PPC_EMB_SDA21
 109

	)

2076 
	#R_PPC_EMB_MRKREF
 110

	)

2077 
	#R_PPC_EMB_RELSEC16
 111

	)

2078 
	#R_PPC_EMB_RELST_LO
 112

	)

2079 
	#R_PPC_EMB_RELST_HI
 113

	)

2080 
	#R_PPC_EMB_RELST_HA
 114

	)

2081 
	#R_PPC_EMB_BIT_FLD
 115

	)

2082 
	#R_PPC_EMB_RELSDA
 116

	)

2085 
	#R_PPC_DIAB_SDA21_LO
 180

	)

2086 
	#R_PPC_DIAB_SDA21_HI
 181

	)

2087 
	#R_PPC_DIAB_SDA21_HA
 182

	)

2088 
	#R_PPC_DIAB_RELSDA_LO
 183

	)

2089 
	#R_PPC_DIAB_RELSDA_HI
 184

	)

2090 
	#R_PPC_DIAB_RELSDA_HA
 185

	)

2093 
	#R_PPC_IRELATIVE
 248

	)

2096 
	#R_PPC_REL16
 249

	)

2097 
	#R_PPC_REL16_LO
 250

	)

2098 
	#R_PPC_REL16_HI
 251

	)

2099 
	#R_PPC_REL16_HA
 252

	)

2103 
	#R_PPC_TOC16
 255

	)

2106 
	#DT_PPC_GOT
 (
DT_LOPROC
 + 0)

	)

2107 
	#DT_PPC_NUM
 1

	)

2110 
	#R_PPC64_NONE
 
R_PPC_NONE


	)

2111 
	#R_PPC64_ADDR32
 
R_PPC_ADDR32


	)

2112 
	#R_PPC64_ADDR24
 
R_PPC_ADDR24


	)

2113 
	#R_PPC64_ADDR16
 
R_PPC_ADDR16


	)

2114 
	#R_PPC64_ADDR16_LO
 
R_PPC_ADDR16_LO


	)

2115 
	#R_PPC64_ADDR16_HI
 
R_PPC_ADDR16_HI


	)

2116 
	#R_PPC64_ADDR16_HA
 
R_PPC_ADDR16_HA


	)

2117 
	#R_PPC64_ADDR14
 
R_PPC_ADDR14


	)

2118 
	#R_PPC64_ADDR14_BRTAKEN
 
R_PPC_ADDR14_BRTAKEN


	)

2119 
	#R_PPC64_ADDR14_BRNTAKEN
 
R_PPC_ADDR14_BRNTAKEN


	)

2120 
	#R_PPC64_REL24
 
R_PPC_REL24


	)

2121 
	#R_PPC64_REL14
 
R_PPC_REL14


	)

2122 
	#R_PPC64_REL14_BRTAKEN
 
R_PPC_REL14_BRTAKEN


	)

2123 
	#R_PPC64_REL14_BRNTAKEN
 
R_PPC_REL14_BRNTAKEN


	)

2124 
	#R_PPC64_GOT16
 
R_PPC_GOT16


	)

2125 
	#R_PPC64_GOT16_LO
 
R_PPC_GOT16_LO


	)

2126 
	#R_PPC64_GOT16_HI
 
R_PPC_GOT16_HI


	)

2127 
	#R_PPC64_GOT16_HA
 
R_PPC_GOT16_HA


	)

2129 
	#R_PPC64_COPY
 
R_PPC_COPY


	)

2130 
	#R_PPC64_GLOB_DAT
 
R_PPC_GLOB_DAT


	)

2131 
	#R_PPC64_JMP_SLOT
 
R_PPC_JMP_SLOT


	)

2132 
	#R_PPC64_RELATIVE
 
R_PPC_RELATIVE


	)

2134 
	#R_PPC64_UADDR32
 
R_PPC_UADDR32


	)

2135 
	#R_PPC64_UADDR16
 
R_PPC_UADDR16


	)

2136 
	#R_PPC64_REL32
 
R_PPC_REL32


	)

2137 
	#R_PPC64_PLT32
 
R_PPC_PLT32


	)

2138 
	#R_PPC64_PLTREL32
 
R_PPC_PLTREL32


	)

2139 
	#R_PPC64_PLT16_LO
 
R_PPC_PLT16_LO


	)

2140 
	#R_PPC64_PLT16_HI
 
R_PPC_PLT16_HI


	)

2141 
	#R_PPC64_PLT16_HA
 
R_PPC_PLT16_HA


	)

2143 
	#R_PPC64_SECTOFF
 
R_PPC_SECTOFF


	)

2144 
	#R_PPC64_SECTOFF_LO
 
R_PPC_SECTOFF_LO


	)

2145 
	#R_PPC64_SECTOFF_HI
 
R_PPC_SECTOFF_HI


	)

2146 
	#R_PPC64_SECTOFF_HA
 
R_PPC_SECTOFF_HA


	)

2147 
	#R_PPC64_ADDR30
 37

	)

2148 
	#R_PPC64_ADDR64
 38

	)

2149 
	#R_PPC64_ADDR16_HIGHER
 39

	)

2150 
	#R_PPC64_ADDR16_HIGHERA
 40

	)

2151 
	#R_PPC64_ADDR16_HIGHEST
 41

	)

2152 
	#R_PPC64_ADDR16_HIGHESTA
 42

	)

2153 
	#R_PPC64_UADDR64
 43

	)

2154 
	#R_PPC64_REL64
 44

	)

2155 
	#R_PPC64_PLT64
 45

	)

2156 
	#R_PPC64_PLTREL64
 46

	)

2157 
	#R_PPC64_TOC16
 47

	)

2158 
	#R_PPC64_TOC16_LO
 48

	)

2159 
	#R_PPC64_TOC16_HI
 49

	)

2160 
	#R_PPC64_TOC16_HA
 50

	)

2161 
	#R_PPC64_TOC
 51

	)

2162 
	#R_PPC64_PLTGOT16
 52

	)

2163 
	#R_PPC64_PLTGOT16_LO
 53

	)

2164 
	#R_PPC64_PLTGOT16_HI
 54

	)

2165 
	#R_PPC64_PLTGOT16_HA
 55

	)

2167 
	#R_PPC64_ADDR16_DS
 56

	)

2168 
	#R_PPC64_ADDR16_LO_DS
 57

	)

2169 
	#R_PPC64_GOT16_DS
 58

	)

2170 
	#R_PPC64_GOT16_LO_DS
 59

	)

2171 
	#R_PPC64_PLT16_LO_DS
 60

	)

2172 
	#R_PPC64_SECTOFF_DS
 61

	)

2173 
	#R_PPC64_SECTOFF_LO_DS
 62

	)

2174 
	#R_PPC64_TOC16_DS
 63

	)

2175 
	#R_PPC64_TOC16_LO_DS
 64

	)

2176 
	#R_PPC64_PLTGOT16_DS
 65

	)

2177 
	#R_PPC64_PLTGOT16_LO_DS
 66

	)

2180 
	#R_PPC64_TLS
 67

	)

2181 
	#R_PPC64_DTPMOD64
 68

	)

2182 
	#R_PPC64_TPREL16
 69

	)

2183 
	#R_PPC64_TPREL16_LO
 70

	)

2184 
	#R_PPC64_TPREL16_HI
 71

	)

2185 
	#R_PPC64_TPREL16_HA
 72

	)

2186 
	#R_PPC64_TPREL64
 73

	)

2187 
	#R_PPC64_DTPREL16
 74

	)

2188 
	#R_PPC64_DTPREL16_LO
 75

	)

2189 
	#R_PPC64_DTPREL16_HI
 76

	)

2190 
	#R_PPC64_DTPREL16_HA
 77

	)

2191 
	#R_PPC64_DTPREL64
 78

	)

2192 
	#R_PPC64_GOT_TLSGD16
 79

	)

2193 
	#R_PPC64_GOT_TLSGD16_LO
 80

	)

2194 
	#R_PPC64_GOT_TLSGD16_HI
 81

	)

2195 
	#R_PPC64_GOT_TLSGD16_HA
 82

	)

2196 
	#R_PPC64_GOT_TLSLD16
 83

	)

2197 
	#R_PPC64_GOT_TLSLD16_LO
 84

	)

2198 
	#R_PPC64_GOT_TLSLD16_HI
 85

	)

2199 
	#R_PPC64_GOT_TLSLD16_HA
 86

	)

2200 
	#R_PPC64_GOT_TPREL16_DS
 87

	)

2201 
	#R_PPC64_GOT_TPREL16_LO_DS
 88

	)

2202 
	#R_PPC64_GOT_TPREL16_HI
 89

	)

2203 
	#R_PPC64_GOT_TPREL16_HA
 90

	)

2204 
	#R_PPC64_GOT_DTPREL16_DS
 91

	)

2205 
	#R_PPC64_GOT_DTPREL16_LO_DS
 92

	)

2206 
	#R_PPC64_GOT_DTPREL16_HI
 93

	)

2207 
	#R_PPC64_GOT_DTPREL16_HA
 94

	)

2208 
	#R_PPC64_TPREL16_DS
 95

	)

2209 
	#R_PPC64_TPREL16_LO_DS
 96

	)

2210 
	#R_PPC64_TPREL16_HIGHER
 97

	)

2211 
	#R_PPC64_TPREL16_HIGHERA
 98

	)

2212 
	#R_PPC64_TPREL16_HIGHEST
 99

	)

2213 
	#R_PPC64_TPREL16_HIGHESTA
 100

	)

2214 
	#R_PPC64_DTPREL16_DS
 101

	)

2215 
	#R_PPC64_DTPREL16_LO_DS
 102

	)

2216 
	#R_PPC64_DTPREL16_HIGHER
 103

	)

2217 
	#R_PPC64_DTPREL16_HIGHERA
 104

	)

2218 
	#R_PPC64_DTPREL16_HIGHEST
 105

	)

2219 
	#R_PPC64_DTPREL16_HIGHESTA
 106

	)

2222 
	#R_PPC64_JMP_IREL
 247

	)

2223 
	#R_PPC64_IRELATIVE
 248

	)

2224 
	#R_PPC64_REL16
 249

	)

2225 
	#R_PPC64_REL16_LO
 250

	)

2226 
	#R_PPC64_REL16_HI
 251

	)

2227 
	#R_PPC64_REL16_HA
 252

	)

2230 
	#DT_PPC64_GLINK
 (
DT_LOPROC
 + 0)

	)

2231 
	#DT_PPC64_OPD
 (
DT_LOPROC
 + 1)

	)

2232 
	#DT_PPC64_OPDSZ
 (
DT_LOPROC
 + 2)

	)

2233 
	#DT_PPC64_NUM
 3

	)

2239 
	#EF_ARM_RELEXEC
 0x01

	)

2240 
	#EF_ARM_HASENTRY
 0x02

	)

2241 
	#EF_ARM_INTERWORK
 0x04

	)

2242 
	#EF_ARM_APCS_26
 0x08

	)

2243 
	#EF_ARM_APCS_FLOAT
 0x10

	)

2244 
	#EF_ARM_PIC
 0x20

	)

2245 
	#EF_ARM_ALIGN8
 0x40

	)

2246 
	#EF_ARM_NEW_ABI
 0x80

	)

2247 
	#EF_ARM_OLD_ABI
 0x100

	)

2248 
	#EF_ARM_SOFT_FLOAT
 0x200

	)

2249 
	#EF_ARM_VFP_FLOAT
 0x400

	)

2250 
	#EF_ARM_MAVERICK_FLOAT
 0x800

	)

2255 
	#EF_ARM_SYMSARESORTED
 0x04

	)

2256 
	#EF_ARM_DYNSYMSUSESEGIDX
 0x08

	)

2257 
	#EF_ARM_MAPSYMSFIRST
 0x10

	)

2258 
	#EF_ARM_EABIMASK
 0XFF000000

	)

2261 
	#EF_ARM_BE8
 0x00800000

	)

2262 
	#EF_ARM_LE8
 0x00400000

	)

2264 
	#EF_ARM_EABI_VERSION
(
Êags
Ë((ÊagsË& 
EF_ARM_EABIMASK
)

	)

2265 
	#EF_ARM_EABI_UNKNOWN
 0x00000000

	)

2266 
	#EF_ARM_EABI_VER1
 0x01000000

	)

2267 
	#EF_ARM_EABI_VER2
 0x02000000

	)

2268 
	#EF_ARM_EABI_VER3
 0x03000000

	)

2269 
	#EF_ARM_EABI_VER4
 0x04000000

	)

2270 
	#EF_ARM_EABI_VER5
 0x05000000

	)

2273 
	#STT_ARM_TFUNC
 
STT_LOPROC


	)

2274 
	#STT_ARM_16BIT
 
STT_HIPROC


	)

2277 
	#SHF_ARM_ENTRYSECT
 0x10000000

	)

2278 
	#SHF_ARM_COMDEF
 0x80000000

	)

2282 
	#PF_ARM_SB
 0x10000000

	)

2284 
	#PF_ARM_PI
 0x20000000

	)

2285 
	#PF_ARM_ABS
 0x40000000

	)

2288 
	#PT_ARM_EXIDX
 (
PT_LOPROC
 + 1Ë

	)

2291 
	#SHT_ARM_EXIDX
 (
SHT_LOPROC
 + 1Ë

	)

2292 
	#SHT_ARM_PREEMPTMAP
 (
SHT_LOPROC
 + 2Ë

	)

2293 
	#SHT_ARM_ATTRIBUTES
 (
SHT_LOPROC
 + 3Ë

	)

2298 
	#R_ARM_NONE
 0

	)

2299 
	#R_ARM_PC24
 1

	)

2300 
	#R_ARM_ABS32
 2

	)

2301 
	#R_ARM_REL32
 3

	)

2302 
	#R_ARM_PC13
 4

	)

2303 
	#R_ARM_ABS16
 5

	)

2304 
	#R_ARM_ABS12
 6

	)

2305 
	#R_ARM_THM_ABS5
 7

	)

2306 
	#R_ARM_ABS8
 8

	)

2307 
	#R_ARM_SBREL32
 9

	)

2308 
	#R_ARM_THM_PC22
 10

	)

2309 
	#R_ARM_THM_PC8
 11

	)

2310 
	#R_ARM_AMP_VCALL9
 12

	)

2311 
	#R_ARM_SWI24
 13

	)

2312 
	#R_ARM_TLS_DESC
 13

	)

2313 
	#R_ARM_THM_SWI8
 14

	)

2314 
	#R_ARM_XPC25
 15

	)

2315 
	#R_ARM_THM_XPC22
 16

	)

2316 
	#R_ARM_TLS_DTPMOD32
 17

	)

2317 
	#R_ARM_TLS_DTPOFF32
 18

	)

2318 
	#R_ARM_TLS_TPOFF32
 19

	)

2319 
	#R_ARM_COPY
 20

	)

2320 
	#R_ARM_GLOB_DAT
 21

	)

2321 
	#R_ARM_JUMP_SLOT
 22

	)

2322 
	#R_ARM_RELATIVE
 23

	)

2323 
	#R_ARM_GOTOFF
 24

	)

2324 
	#R_ARM_GOTPC
 25

	)

2325 
	#R_ARM_GOT32
 26

	)

2326 
	#R_ARM_PLT32
 27

	)

2327 
	#R_ARM_ALU_PCREL_7_0
 32

	)

2328 
	#R_ARM_ALU_PCREL_15_8
 33

	)

2329 
	#R_ARM_ALU_PCREL_23_15
 34

	)

2330 
	#R_ARM_LDR_SBREL_11_0
 35

	)

2331 
	#R_ARM_ALU_SBREL_19_12
 36

	)

2332 
	#R_ARM_ALU_SBREL_27_20
 37

	)

2333 
	#R_ARM_TLS_GOTDESC
 90

	)

2334 
	#R_ARM_TLS_CALL
 91

	)

2335 
	#R_ARM_TLS_DESCSEQ
 92

	)

2336 
	#R_ARM_THM_TLS_CALL
 93

	)

2337 
	#R_ARM_GNU_VTENTRY
 100

	)

2338 
	#R_ARM_GNU_VTINHERIT
 101

	)

2339 
	#R_ARM_THM_PC11
 102

	)

2340 
	#R_ARM_THM_PC9
 103

	)

2341 
	#R_ARM_TLS_GD32
 104

	)

2343 
	#R_ARM_TLS_LDM32
 105

	)

2345 
	#R_ARM_TLS_LDO32
 106

	)

2347 
	#R_ARM_TLS_IE32
 107

	)

2349 
	#R_ARM_TLS_LE32
 108

	)

2351 
	#R_ARM_THM_TLS_DESCSEQ
 129

	)

2352 
	#R_ARM_IRELATIVE
 160

	)

2353 
	#R_ARM_RXPC25
 249

	)

2354 
	#R_ARM_RSBREL32
 250

	)

2355 
	#R_ARM_THM_RPC22
 251

	)

2356 
	#R_ARM_RREL32
 252

	)

2357 
	#R_ARM_RABS22
 253

	)

2358 
	#R_ARM_RPC24
 254

	)

2359 
	#R_ARM_RBASE
 255

	)

2361 
	#R_ARM_NUM
 256

	)

2366 
	#EF_IA_64_MASKOS
 0x0000000‡

	)

2367 
	#EF_IA_64_ABI64
 0x00000010

	)

2368 
	#EF_IA_64_ARCH
 0xff000000

	)

2371 
	#PT_IA_64_ARCHEXT
 (
PT_LOPROC
 + 0Ë

	)

2372 
	#PT_IA_64_UNWIND
 (
PT_LOPROC
 + 1Ë

	)

2373 
	#PT_IA_64_HP_OPT_ANOT
 (
PT_LOOS
 + 0x12)

	)

2374 
	#PT_IA_64_HP_HSL_ANOT
 (
PT_LOOS
 + 0x13)

	)

2375 
	#PT_IA_64_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

2378 
	#PF_IA_64_NORECOV
 0x80000000

	)

2381 
	#SHT_IA_64_EXT
 (
SHT_LOPROC
 + 0Ë

	)

2382 
	#SHT_IA_64_UNWIND
 (
SHT_LOPROC
 + 1Ë

	)

2385 
	#SHF_IA_64_SHORT
 0x10000000

	)

2386 
	#SHF_IA_64_NORECOV
 0x20000000

	)

2389 
	#DT_IA_64_PLT_RESERVE
 (
DT_LOPROC
 + 0)

	)

2390 
	#DT_IA_64_NUM
 1

	)

2393 
	#R_IA64_NONE
 0x00

	)

2394 
	#R_IA64_IMM14
 0x21

	)

2395 
	#R_IA64_IMM22
 0x22

	)

2396 
	#R_IA64_IMM64
 0x23

	)

2397 
	#R_IA64_DIR32MSB
 0x24

	)

2398 
	#R_IA64_DIR32LSB
 0x25

	)

2399 
	#R_IA64_DIR64MSB
 0x26

	)

2400 
	#R_IA64_DIR64LSB
 0x27

	)

2401 
	#R_IA64_GPREL22
 0x2®

	)

2402 
	#R_IA64_GPREL64I
 0x2b

	)

2403 
	#R_IA64_GPREL32MSB
 0x2¯

	)

2404 
	#R_IA64_GPREL32LSB
 0x2d

	)

2405 
	#R_IA64_GPREL64MSB
 0x2ê

	)

2406 
	#R_IA64_GPREL64LSB
 0x2‡

	)

2407 
	#R_IA64_LTOFF22
 0x32

	)

2408 
	#R_IA64_LTOFF64I
 0x33

	)

2409 
	#R_IA64_PLTOFF22
 0x3®

	)

2410 
	#R_IA64_PLTOFF64I
 0x3b

	)

2411 
	#R_IA64_PLTOFF64MSB
 0x3ê

	)

2412 
	#R_IA64_PLTOFF64LSB
 0x3‡

	)

2413 
	#R_IA64_FPTR64I
 0x43

	)

2414 
	#R_IA64_FPTR32MSB
 0x44

	)

2415 
	#R_IA64_FPTR32LSB
 0x45

	)

2416 
	#R_IA64_FPTR64MSB
 0x46

	)

2417 
	#R_IA64_FPTR64LSB
 0x47

	)

2418 
	#R_IA64_PCREL60B
 0x48

	)

2419 
	#R_IA64_PCREL21B
 0x49

	)

2420 
	#R_IA64_PCREL21M
 0x4®

	)

2421 
	#R_IA64_PCREL21F
 0x4b

	)

2422 
	#R_IA64_PCREL32MSB
 0x4¯

	)

2423 
	#R_IA64_PCREL32LSB
 0x4d

	)

2424 
	#R_IA64_PCREL64MSB
 0x4ê

	)

2425 
	#R_IA64_PCREL64LSB
 0x4‡

	)

2426 
	#R_IA64_LTOFF_FPTR22
 0x52

	)

2427 
	#R_IA64_LTOFF_FPTR64I
 0x53

	)

2428 
	#R_IA64_LTOFF_FPTR32MSB
 0x54

	)

2429 
	#R_IA64_LTOFF_FPTR32LSB
 0x55

	)

2430 
	#R_IA64_LTOFF_FPTR64MSB
 0x56

	)

2431 
	#R_IA64_LTOFF_FPTR64LSB
 0x57

	)

2432 
	#R_IA64_SEGREL32MSB
 0x5¯

	)

2433 
	#R_IA64_SEGREL32LSB
 0x5d

	)

2434 
	#R_IA64_SEGREL64MSB
 0x5ê

	)

2435 
	#R_IA64_SEGREL64LSB
 0x5‡

	)

2436 
	#R_IA64_SECREL32MSB
 0x64

	)

2437 
	#R_IA64_SECREL32LSB
 0x65

	)

2438 
	#R_IA64_SECREL64MSB
 0x66

	)

2439 
	#R_IA64_SECREL64LSB
 0x67

	)

2440 
	#R_IA64_REL32MSB
 0x6¯

	)

2441 
	#R_IA64_REL32LSB
 0x6d

	)

2442 
	#R_IA64_REL64MSB
 0x6ê

	)

2443 
	#R_IA64_REL64LSB
 0x6‡

	)

2444 
	#R_IA64_LTV32MSB
 0x74

	)

2445 
	#R_IA64_LTV32LSB
 0x75

	)

2446 
	#R_IA64_LTV64MSB
 0x76

	)

2447 
	#R_IA64_LTV64LSB
 0x77

	)

2448 
	#R_IA64_PCREL21BI
 0x79

	)

2449 
	#R_IA64_PCREL22
 0x7®

	)

2450 
	#R_IA64_PCREL64I
 0x7b

	)

2451 
	#R_IA64_IPLTMSB
 0x80

	)

2452 
	#R_IA64_IPLTLSB
 0x81

	)

2453 
	#R_IA64_COPY
 0x84

	)

2454 
	#R_IA64_SUB
 0x85

	)

2455 
	#R_IA64_LTOFF22X
 0x86

	)

2456 
	#R_IA64_LDXMOV
 0x87

	)

2457 
	#R_IA64_TPREL14
 0x91

	)

2458 
	#R_IA64_TPREL22
 0x92

	)

2459 
	#R_IA64_TPREL64I
 0x93

	)

2460 
	#R_IA64_TPREL64MSB
 0x96

	)

2461 
	#R_IA64_TPREL64LSB
 0x97

	)

2462 
	#R_IA64_LTOFF_TPREL22
 0x9®

	)

2463 
	#R_IA64_DTPMOD64MSB
 0xa6

	)

2464 
	#R_IA64_DTPMOD64LSB
 0xa7

	)

2465 
	#R_IA64_LTOFF_DTPMOD22
 0xØ

	)

2466 
	#R_IA64_DTPREL14
 0xb1

	)

2467 
	#R_IA64_DTPREL22
 0xb2

	)

2468 
	#R_IA64_DTPREL64I
 0xb3

	)

2469 
	#R_IA64_DTPREL32MSB
 0xb4

	)

2470 
	#R_IA64_DTPREL32LSB
 0xb5

	)

2471 
	#R_IA64_DTPREL64MSB
 0xb6

	)

2472 
	#R_IA64_DTPREL64LSB
 0xb7

	)

2473 
	#R_IA64_LTOFF_DTPREL22
 0xb®

	)

2478 
	#EF_SH_MACH_MASK
 0x1f

	)

2479 
	#EF_SH_UNKNOWN
 0x0

	)

2480 
	#EF_SH1
 0x1

	)

2481 
	#EF_SH2
 0x2

	)

2482 
	#EF_SH3
 0x3

	)

2483 
	#EF_SH_DSP
 0x4

	)

2484 
	#EF_SH3_DSP
 0x5

	)

2485 
	#EF_SH4AL_DSP
 0x6

	)

2486 
	#EF_SH3E
 0x8

	)

2487 
	#EF_SH4
 0x9

	)

2488 
	#EF_SH2E
 0xb

	)

2489 
	#EF_SH4A
 0xc

	)

2490 
	#EF_SH2A
 0xd

	)

2491 
	#EF_SH4_NOFPU
 0x10

	)

2492 
	#EF_SH4A_NOFPU
 0x11

	)

2493 
	#EF_SH4_NOMMU_NOFPU
 0x12

	)

2494 
	#EF_SH2A_NOFPU
 0x13

	)

2495 
	#EF_SH3_NOMMU
 0x14

	)

2496 
	#EF_SH2A_SH4_NOFPU
 0x15

	)

2497 
	#EF_SH2A_SH3_NOFPU
 0x16

	)

2498 
	#EF_SH2A_SH4
 0x17

	)

2499 
	#EF_SH2A_SH3E
 0x18

	)

2502 
	#R_SH_NONE
 0

	)

2503 
	#R_SH_DIR32
 1

	)

2504 
	#R_SH_REL32
 2

	)

2505 
	#R_SH_DIR8WPN
 3

	)

2506 
	#R_SH_IND12W
 4

	)

2507 
	#R_SH_DIR8WPL
 5

	)

2508 
	#R_SH_DIR8WPZ
 6

	)

2509 
	#R_SH_DIR8BP
 7

	)

2510 
	#R_SH_DIR8W
 8

	)

2511 
	#R_SH_DIR8L
 9

	)

2512 
	#R_SH_SWITCH16
 25

	)

2513 
	#R_SH_SWITCH32
 26

	)

2514 
	#R_SH_USES
 27

	)

2515 
	#R_SH_COUNT
 28

	)

2516 
	#R_SH_ALIGN
 29

	)

2517 
	#R_SH_CODE
 30

	)

2518 
	#R_SH_DATA
 31

	)

2519 
	#R_SH_LABEL
 32

	)

2520 
	#R_SH_SWITCH8
 33

	)

2521 
	#R_SH_GNU_VTINHERIT
 34

	)

2522 
	#R_SH_GNU_VTENTRY
 35

	)

2523 
	#R_SH_TLS_GD_32
 144

	)

2524 
	#R_SH_TLS_LD_32
 145

	)

2525 
	#R_SH_TLS_LDO_32
 146

	)

2526 
	#R_SH_TLS_IE_32
 147

	)

2527 
	#R_SH_TLS_LE_32
 148

	)

2528 
	#R_SH_TLS_DTPMOD32
 149

	)

2529 
	#R_SH_TLS_DTPOFF32
 150

	)

2530 
	#R_SH_TLS_TPOFF32
 151

	)

2531 
	#R_SH_GOT32
 160

	)

2532 
	#R_SH_PLT32
 161

	)

2533 
	#R_SH_COPY
 162

	)

2534 
	#R_SH_GLOB_DAT
 163

	)

2535 
	#R_SH_JMP_SLOT
 164

	)

2536 
	#R_SH_RELATIVE
 165

	)

2537 
	#R_SH_GOTOFF
 166

	)

2538 
	#R_SH_GOTPC
 167

	)

2540 
	#R_SH_NUM
 256

	)

2546 
	#EF_S390_HIGH_GPRS
 0x00000001

	)

2550 
	#R_390_NONE
 0

	)

2551 
	#R_390_8
 1

	)

2552 
	#R_390_12
 2

	)

2553 
	#R_390_16
 3

	)

2554 
	#R_390_32
 4

	)

2555 
	#R_390_PC32
 5

	)

2556 
	#R_390_GOT12
 6

	)

2557 
	#R_390_GOT32
 7

	)

2558 
	#R_390_PLT32
 8

	)

2559 
	#R_390_COPY
 9

	)

2560 
	#R_390_GLOB_DAT
 10

	)

2561 
	#R_390_JMP_SLOT
 11

	)

2562 
	#R_390_RELATIVE
 12

	)

2563 
	#R_390_GOTOFF32
 13

	)

2564 
	#R_390_GOTPC
 14

	)

2565 
	#R_390_GOT16
 15

	)

2566 
	#R_390_PC16
 16

	)

2567 
	#R_390_PC16DBL
 17

	)

2568 
	#R_390_PLT16DBL
 18

	)

2569 
	#R_390_PC32DBL
 19

	)

2570 
	#R_390_PLT32DBL
 20

	)

2571 
	#R_390_GOTPCDBL
 21

	)

2572 
	#R_390_64
 22

	)

2573 
	#R_390_PC64
 23

	)

2574 
	#R_390_GOT64
 24

	)

2575 
	#R_390_PLT64
 25

	)

2576 
	#R_390_GOTENT
 26

	)

2577 
	#R_390_GOTOFF16
 27

	)

2578 
	#R_390_GOTOFF64
 28

	)

2579 
	#R_390_GOTPLT12
 29

	)

2580 
	#R_390_GOTPLT16
 30

	)

2581 
	#R_390_GOTPLT32
 31

	)

2582 
	#R_390_GOTPLT64
 32

	)

2583 
	#R_390_GOTPLTENT
 33

	)

2584 
	#R_390_PLTOFF16
 34

	)

2585 
	#R_390_PLTOFF32
 35

	)

2586 
	#R_390_PLTOFF64
 36

	)

2587 
	#R_390_TLS_LOAD
 37

	)

2588 
	#R_390_TLS_GDCALL
 38

	)

2590 
	#R_390_TLS_LDCALL
 39

	)

2592 
	#R_390_TLS_GD32
 40

	)

2594 
	#R_390_TLS_GD64
 41

	)

2596 
	#R_390_TLS_GOTIE12
 42

	)

2598 
	#R_390_TLS_GOTIE32
 43

	)

2600 
	#R_390_TLS_GOTIE64
 44

	)

2602 
	#R_390_TLS_LDM32
 45

	)

2604 
	#R_390_TLS_LDM64
 46

	)

2606 
	#R_390_TLS_IE32
 47

	)

2608 
	#R_390_TLS_IE64
 48

	)

2610 
	#R_390_TLS_IEENT
 49

	)

2612 
	#R_390_TLS_LE32
 50

	)

2614 
	#R_390_TLS_LE64
 51

	)

2616 
	#R_390_TLS_LDO32
 52

	)

2618 
	#R_390_TLS_LDO64
 53

	)

2620 
	#R_390_TLS_DTPMOD
 54

	)

2621 
	#R_390_TLS_DTPOFF
 55

	)

2622 
	#R_390_TLS_TPOFF
 56

	)

2624 
	#R_390_20
 57

	)

2625 
	#R_390_GOT20
 58

	)

2626 
	#R_390_GOTPLT20
 59

	)

2627 
	#R_390_TLS_GOTIE20
 60

	)

2630 
	#R_390_NUM
 61

	)

2634 
	#R_CRIS_NONE
 0

	)

2635 
	#R_CRIS_8
 1

	)

2636 
	#R_CRIS_16
 2

	)

2637 
	#R_CRIS_32
 3

	)

2638 
	#R_CRIS_8_PCREL
 4

	)

2639 
	#R_CRIS_16_PCREL
 5

	)

2640 
	#R_CRIS_32_PCREL
 6

	)

2641 
	#R_CRIS_GNU_VTINHERIT
 7

	)

2642 
	#R_CRIS_GNU_VTENTRY
 8

	)

2643 
	#R_CRIS_COPY
 9

	)

2644 
	#R_CRIS_GLOB_DAT
 10

	)

2645 
	#R_CRIS_JUMP_SLOT
 11

	)

2646 
	#R_CRIS_RELATIVE
 12

	)

2647 
	#R_CRIS_16_GOT
 13

	)

2648 
	#R_CRIS_32_GOT
 14

	)

2649 
	#R_CRIS_16_GOTPLT
 15

	)

2650 
	#R_CRIS_32_GOTPLT
 16

	)

2651 
	#R_CRIS_32_GOTREL
 17

	)

2652 
	#R_CRIS_32_PLT_GOTREL
 18

	)

2653 
	#R_CRIS_32_PLT_PCREL
 19

	)

2655 
	#R_CRIS_NUM
 20

	)

2659 
	#R_X86_64_NONE
 0

	)

2660 
	#R_X86_64_64
 1

	)

2661 
	#R_X86_64_PC32
 2

	)

2662 
	#R_X86_64_GOT32
 3

	)

2663 
	#R_X86_64_PLT32
 4

	)

2664 
	#R_X86_64_COPY
 5

	)

2665 
	#R_X86_64_GLOB_DAT
 6

	)

2666 
	#R_X86_64_JUMP_SLOT
 7

	)

2667 
	#R_X86_64_RELATIVE
 8

	)

2668 
	#R_X86_64_GOTPCREL
 9

	)

2670 
	#R_X86_64_32
 10

	)

2671 
	#R_X86_64_32S
 11

	)

2672 
	#R_X86_64_16
 12

	)

2673 
	#R_X86_64_PC16
 13

	)

2674 
	#R_X86_64_8
 14

	)

2675 
	#R_X86_64_PC8
 15

	)

2676 
	#R_X86_64_DTPMOD64
 16

	)

2677 
	#R_X86_64_DTPOFF64
 17

	)

2678 
	#R_X86_64_TPOFF64
 18

	)

2679 
	#R_X86_64_TLSGD
 19

	)

2681 
	#R_X86_64_TLSLD
 20

	)

2683 
	#R_X86_64_DTPOFF32
 21

	)

2684 
	#R_X86_64_GOTTPOFF
 22

	)

2686 
	#R_X86_64_TPOFF32
 23

	)

2687 
	#R_X86_64_PC64
 24

	)

2688 
	#R_X86_64_GOTOFF64
 25

	)

2689 
	#R_X86_64_GOTPC32
 26

	)

2691 
	#R_X86_64_GOT64
 27

	)

2692 
	#R_X86_64_GOTPCREL64
 28

	)

2694 
	#R_X86_64_GOTPC64
 29

	)

2695 
	#R_X86_64_GOTPLT64
 30

	)

2696 
	#R_X86_64_PLTOFF64
 31

	)

2698 
	#R_X86_64_SIZE32
 32

	)

2699 
	#R_X86_64_SIZE64
 33

	)

2700 
	#R_X86_64_GOTPC32_TLSDESC
 34

	)

2701 
	#R_X86_64_TLSDESC_CALL
 35

	)

2703 
	#R_X86_64_TLSDESC
 36

	)

2704 
	#R_X86_64_IRELATIVE
 37

	)

2706 
	#R_X86_64_NUM
 38

	)

2710 
	#R_MN10300_NONE
 0

	)

2711 
	#R_MN10300_32
 1

	)

2712 
	#R_MN10300_16
 2

	)

2713 
	#R_MN10300_8
 3

	)

2714 
	#R_MN10300_PCREL32
 4

	)

2715 
	#R_MN10300_PCREL16
 5

	)

2716 
	#R_MN10300_PCREL8
 6

	)

2717 
	#R_MN10300_GNU_VTINHERIT
 7

	)

2718 
	#R_MN10300_GNU_VTENTRY
 8

	)

2719 
	#R_MN10300_24
 9

	)

2720 
	#R_MN10300_GOTPC32
 10

	)

2721 
	#R_MN10300_GOTPC16
 11

	)

2722 
	#R_MN10300_GOTOFF32
 12

	)

2723 
	#R_MN10300_GOTOFF24
 13

	)

2724 
	#R_MN10300_GOTOFF16
 14

	)

2725 
	#R_MN10300_PLT32
 15

	)

2726 
	#R_MN10300_PLT16
 16

	)

2727 
	#R_MN10300_GOT32
 17

	)

2728 
	#R_MN10300_GOT24
 18

	)

2729 
	#R_MN10300_GOT16
 19

	)

2730 
	#R_MN10300_COPY
 20

	)

2731 
	#R_MN10300_GLOB_DAT
 21

	)

2732 
	#R_MN10300_JMP_SLOT
 22

	)

2733 
	#R_MN10300_RELATIVE
 23

	)

2735 
	#R_MN10300_NUM
 24

	)

2739 
	#R_M32R_NONE
 0

	)

2740 
	#R_M32R_16
 1

	)

2741 
	#R_M32R_32
 2

	)

2742 
	#R_M32R_24
 3

	)

2743 
	#R_M32R_10_PCREL
 4

	)

2744 
	#R_M32R_18_PCREL
 5

	)

2745 
	#R_M32R_26_PCREL
 6

	)

2746 
	#R_M32R_HI16_ULO
 7

	)

2747 
	#R_M32R_HI16_SLO
 8

	)

2748 
	#R_M32R_LO16
 9

	)

2749 
	#R_M32R_SDA16
 10

	)

2750 
	#R_M32R_GNU_VTINHERIT
 11

	)

2751 
	#R_M32R_GNU_VTENTRY
 12

	)

2753 
	#R_M32R_16_RELA
 33

	)

2754 
	#R_M32R_32_RELA
 34

	)

2755 
	#R_M32R_24_RELA
 35

	)

2756 
	#R_M32R_10_PCREL_RELA
 36

	)

2757 
	#R_M32R_18_PCREL_RELA
 37

	)

2758 
	#R_M32R_26_PCREL_RELA
 38

	)

2759 
	#R_M32R_HI16_ULO_RELA
 39

	)

2760 
	#R_M32R_HI16_SLO_RELA
 40

	)

2761 
	#R_M32R_LO16_RELA
 41

	)

2762 
	#R_M32R_SDA16_RELA
 42

	)

2763 
	#R_M32R_RELA_GNU_VTINHERIT
 43

	)

2764 
	#R_M32R_RELA_GNU_VTENTRY
 44

	)

2765 
	#R_M32R_REL32
 45

	)

2767 
	#R_M32R_GOT24
 48

	)

2768 
	#R_M32R_26_PLTREL
 49

	)

2769 
	#R_M32R_COPY
 50

	)

2770 
	#R_M32R_GLOB_DAT
 51

	)

2771 
	#R_M32R_JMP_SLOT
 52

	)

2772 
	#R_M32R_RELATIVE
 53

	)

2773 
	#R_M32R_GOTOFF
 54

	)

2774 
	#R_M32R_GOTPC24
 55

	)

2775 
	#R_M32R_GOT16_HI_ULO
 56

	)

2777 
	#R_M32R_GOT16_HI_SLO
 57

	)

2779 
	#R_M32R_GOT16_LO
 58

	)

2780 
	#R_M32R_GOTPC_HI_ULO
 59

	)

2782 
	#R_M32R_GOTPC_HI_SLO
 60

	)

2784 
	#R_M32R_GOTPC_LO
 61

	)

2786 
	#R_M32R_GOTOFF_HI_ULO
 62

	)

2788 
	#R_M32R_GOTOFF_HI_SLO
 63

	)

2790 
	#R_M32R_GOTOFF_LO
 64

	)

2791 
	#R_M32R_NUM
 256

	)

2794 
	g__END_DECLS


	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/limits.h

24 #i‚de‡
_LIBC_LIMITS_H_


25 
	#_LIBC_LIMITS_H_
 1

	)

27 
	~<„©uªs.h
>

33 
	#MB_LEN_MAX
 16

	)

38 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

43 #i‚de‡
_LIMITS_H


44 
	#_LIMITS_H
 1

	)

46 
	~<bôs/w‹dsize.h
>

55 
	#CHAR_BIT
 8

	)

58 
	#SCHAR_MIN
 (-128)

	)

59 
	#SCHAR_MAX
 127

	)

62 
	#UCHAR_MAX
 255

	)

65 #ifde‡
__CHAR_UNSIGNED__


66 
	#CHAR_MIN
 0

	)

67 
	#CHAR_MAX
 
UCHAR_MAX


	)

69 
	#CHAR_MIN
 
SCHAR_MIN


	)

70 
	#CHAR_MAX
 
SCHAR_MAX


	)

74 
	#SHRT_MIN
 (-32768)

	)

75 
	#SHRT_MAX
 32767

	)

78 
	#USHRT_MAX
 65535

	)

81 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

82 
	#INT_MAX
 2147483647

	)

85 
	#UINT_MAX
 4294967295U

	)

88 #i‡
__WORDSIZE
 == 64

89 
	#LONG_MAX
 9223372036854775807L

	)

91 
	#LONG_MAX
 2147483647L

	)

93 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

96 #i‡
__WORDSIZE
 == 64

97 
	#ULONG_MAX
 18446744073709551615UL

	)

99 
	#ULONG_MAX
 4294967295UL

	)

102 #ifde‡
__USE_ISOC99


105 
	#LLONG_MAX
 9223372036854775807LL

	)

106 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

109 
	#ULLONG_MAX
 18446744073709551615ULL

	)

123 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


125 #ö˛ude_√xà<
limôs
.
h
>

131 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


132 #i‚de‡
LLONG_MIN


133 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

135 #i‚de‡
LLONG_MAX


136 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

138 #i‚de‡
ULLONG_MAX


139 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

143 #ifdef 
__USE_POSIX


145 
	~<bôs/posix1_lim.h
>

148 #ifdef 
__USE_POSIX2


149 
	~<bôs/posix2_lim.h
>

152 #ifdef 
__USE_XOPEN


153 
	~<bôs/x›í_lim.h
>

	@/usr/include/setjmp.h

23 #i‚def 
_SETJMP_H


24 
	#_SETJMP_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/£tjmp.h
>

31 
	~<bôs/sig£t.h
>

35 
	s__jmp_buf_èg


41 
__jmp_buf
 
	m__jmpbuf
;

42 
	m__mask_was_ßved
;

43 
__sig£t_t
 
	m__ßved_mask
;

47 
__BEGIN_NAMESPACE_STD


49 
__jmp_buf_èg
 
	tjmp_buf
[1];

53 
	$£tjmp
 (
jmp_buf
 
__ív
Ë
__THROWNL
;

55 
__END_NAMESPACE_STD


60 
	$__sig£tjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__ßvemask
Ë
__THROWNL
;

62 #i‚def 
__FAVOR_BSD


65 
	$_£tjmp
 (
__jmp_buf_èg
 
__ív
[1]Ë
__THROWNL
;

69 
	#£tjmp
(
ív
Ë
	`_£tjmp
 (ív)

	)

74 
	#£tjmp
(
ív
Ë
	`£tjmp
 (ív)

	)

78 
__BEGIN_NAMESPACE_STD


82 
	$l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

83 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_NAMESPACE_STD


87 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


91 
	$_l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

92 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

96 #ifdef 
__USE_POSIX


100 
__jmp_buf_èg
 
	tsigjmp_buf
[1];

104 
	#sig£tjmp
(
ív
, 
ßvemask
Ë
	`__sig£tjmp
 (ív, savemask)

	)

110 
	$sigl⁄gjmp
 (
sigjmp_buf
 
__ív
, 
__vÆ
)

111 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

116 #i‡
__USE_FORTIFY_LEVEL
 > 0

117 
	~<bôs/£tjmp2.h
>

120 
__END_DECLS


	@/usr/include/signal.h

23 #i‚def 
_SIGNAL_H


25 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


26 
	#_SIGNAL_H


	)

29 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


33 
	~<bôs/sig£t.h
>

37 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


38 #i‚de‡
__sig_©omic_t_deföed


39 
	#__sig_©omic_t_deföed


	)

40 
__BEGIN_NAMESPACE_STD


41 
__sig_©omic_t
 
	tsig_©omic_t
;

42 
	g__END_NAMESPACE_STD


44 #unde‡
__√ed_sig_©omic_t


47 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

48 #i‚de‡
__sig£t_t_deföed


49 
	#__sig£t_t_deföed


	)

50 
__sig£t_t
 
	tsig£t_t
;

52 #unde‡
__√ed_sig£t_t


55 #ifde‡
_SIGNAL_H


57 
	~<bôs/ty≥s.h
>

58 
	~<bôs/signum.h
>

60 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__pid_t_deföed


62 
__pid_t
 
	tpid_t
;

63 
	#__pid_t_deföed


	)

65 #ifde‡
__USE_XOPEN


67 #i‚de‡
__uid_t_deföed


68 
__uid_t
 
	tuid_t
;

69 
	#__uid_t_deföed


	)

73 #ifde‡
__USE_POSIX199309


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

79 
	~<bôs/sigöfo.h
>

84 (*
	t__sigh™dÀr_t
) ();

89 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

90 
__THROW
;

91 #ifde‡
__USE_GNU


92 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

93 
__THROW
;

99 
__BEGIN_NAMESPACE_STD


100 #ifde‡
__USE_BSD


101 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

102 
__THROW
;

105 #ifde‡
__REDIRECT_NTH


106 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

107 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

108 
__sysv_sig«l
);

110 
	#sig«l
 
__sysv_sig«l


	)

113 
__END_NAMESPACE_STD


115 #ifde‡
__USE_XOPEN


118 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

119 
__THROW
;

125 #ifde‡
__USE_POSIX


126 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

129 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


133 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

136 
__BEGIN_NAMESPACE_STD


138 
	$øi£
 (
__sig
Ë
__THROW
;

139 
__END_NAMESPACE_STD


141 #ifde‡
__USE_SVID


143 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

144 
__THROW
;

145 
	$gsig«l
 (
__sig
Ë
__THROW
;

148 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K


150 
	`psig«l
 (
__sig
, 
__c⁄°
 *
__s
);

153 #ifde‡
__USE_XOPEN2K


155 
	`psigöfo
 (
__c⁄°
 
sigöfo_t
 *
__pöfo
, __c⁄° *
__s
);

168 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

170 #ifde‡
__FAVOR_BSD


173 
	$sig∑u£
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

175 #ifde‡
__USE_XOPEN


176 #ifde‡
__GNUC__


177 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

180 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

186 #ifde‡
__USE_BSD


193 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

196 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

199 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

202 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

206 #ifde‡
__USE_MISC


207 
	#NSIG
 
_NSIG


	)

210 #ifde‡
__USE_GNU


211 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

215 #ifde‡
__USE_BSD


216 
__sigh™dÀr_t
 
	tsig_t
;

219 #ifde‡
__USE_POSIX


222 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

228 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

231 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

234 
	$sigismembî
 (
__c⁄°
 
sig£t_t
 *
__£t
, 
__signo
)

235 
__THROW
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__USE_GNU


239 
	$sigi£m±y£t
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

242 
	$sig™d£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

243 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

246 
	$sig‹£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

247 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

252 
	~<bôs/siga˘i⁄.h
>

255 
	$sig¥ocmask
 (
__how
, 
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

256 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

263 
	$sigsu•íd
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

266 
	$siga˘i⁄
 (
__sig
, 
__c⁄°
 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

267 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

270 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

277 
	$sigwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

278 
	`__n⁄nuŒ
 ((1, 2));

280 #ifde‡
__USE_POSIX199309


285 
	$sigwaôöfo
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

286 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

293 
	$sigtimedwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

294 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

295 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
)

296 
	`__n⁄nuŒ
 ((1));

300 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, 
__c⁄°
 
sigvÆ
 
__vÆ
)

301 
__THROW
;

306 #ifde‡
__USE_BSD


310 
__c⁄°
 *__c⁄° 
_sys_sigli°
[
_NSIG
];

311 
__c⁄°
 *__c⁄° 
sys_sigli°
[
_NSIG
];

314 
	ssigvec


316 
__sigh™dÀr_t
 
sv_h™dÀr
;

317 
sv_mask
;

319 
sv_Êags
;

320 
	#sv_⁄°ack
 
sv_Êags


	)

324 
	#SV_ONSTACK
 (1 << 0)

	)

325 
	#SV_INTERRUPT
 (1 << 1)

	)

326 
	#SV_RESETHAND
 (1 << 2)

	)

334 
	$sigvec
 (
__sig
, 
__c⁄°
 
sigvec
 *
__vec
,

335 
sigvec
 *
__ovec
Ë
__THROW
;

339 
	~<bôs/sigc⁄ãxt.h
>

342 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

347 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


348 
	#__√ed_size_t


	)

349 
	~<°ddef.h
>

354 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

356 
	~<bôs/sig°ack.h
>

357 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


359 
	~<sys/uc⁄ãxt.h
>

365 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

366 
__THROW
 
__©åibuã_dïªˇãd__
;

370 
	$sigÆt°ack
 (
__c⁄°
 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

371 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

375 #ifde‡
__USE_XOPEN_EXTENDED


379 
	$sighﬁd
 (
__sig
Ë
__THROW
;

382 
	$sigªl£
 (
__sig
Ë
__THROW
;

385 
	$sigign‹e
 (
__sig
Ë
__THROW
;

388 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

391 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


394 
	~<bôs/±hªadty≥s.h
>

395 
	~<bôs/sigthªad.h
>

402 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

404 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

408 
__END_DECLS


	@/usr/include/syscall.h

1 
	~<sys/sysˇŒ.h
>

	@/usr/include/bits/byteswap.h

21 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


25 #i‚de‡
_BITS_BYTESWAP_H


26 
	#_BITS_BYTESWAP_H
 1

	)

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

34 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

35 
	#__bsw≠_16
(
x
) \

36 (
__exãnsi⁄__
 \

37 ({ 
__v
, 
__x
 = (Ë(
x
); \

38 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

39 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

41 
	`__asm__
 ("rorw $8, %w0" \

42 : "Ù" (
__v
) \

43 : "0" (
__x
) \

45 
__v
; }))

	)

48 
	#__bsw≠_16
(
x
) \

49 (
__exãnsi⁄__
 \

50 ({ 
__x
 = (Ë(
x
); \

51 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

56 
	#__bsw≠_c⁄°™t_32
(
x
) \

57 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

58 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

60 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

61 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

62 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

63 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

64 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

65 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

66 || 
deföed
 
	g__amdÁm10__
)

69 
	#__bsw≠_32
(
x
) \

70 (
__exãnsi⁄__
 \

71 ({ 
__v
, 
__x
 = (
x
); \

72 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

73 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

75 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

76 
__v
; }))

	)

78 
	#__bsw≠_32
(
x
) \

79 (
__exãnsi⁄__
 \

80 ({ 
__v
, 
__x
 = (
x
); \

81 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

82 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

84 
	`__asm__
 ("rorw $8, %w0;" \

87 : "Ù" (
__v
) \

88 : "0" (
__x
) \

90 
__v
; }))

	)

93 
	#__bsw≠_32
(
x
) \

94 (
__exãnsi⁄__
 \

95 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

99 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

101 
	#__bsw≠_c⁄°™t_64
(
x
) \

102 (
	`__exãnsi⁄__
 ((((
x
) & 0xff00000000000000ull) >> 56) \

103 | (((
x
) & 0x00ff000000000000ull) >> 40) \

104 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

105 | (((
x
) & 0x000000ff00000000ull) >> 8) \

106 | (((
x
) & 0x00000000ff000000ull) << 8) \

107 | (((
x
) & 0x0000000000ff0000ull) << 24) \

108 | (((
x
) & 0x000000000000ff00ull) << 40) \

109 | (((
x
Ë& 0x00000000000000ffuŒË<< 56)))

	)

111 #i‡
__WORDSIZE
 == 64

112 
	#__bsw≠_64
(
x
) \

113 (
__exãnsi⁄__
 \

114 ({ 
__v
, 
__x
 = (
x
); \

115 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

116 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

118 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

119 
__v
; }))

	)

121 
	#__bsw≠_64
(
x
) \

122 (
__exãnsi⁄__
 \

123 ({ uni⁄ { 
__exãnsi⁄__
 
__Œ
; \

124 
__l
[2]; } 
__w
, 
__r
; \

125 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

126 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

129 
__w
.
__Œ
 = (
x
); \

130 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

131 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

133 
__r
.
__Œ
; }))

	)

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/posix1_lim.h

25 #i‚def 
_BITS_POSIX1_LIM_H


26 
	#_BITS_POSIX1_LIM_H
 1

	)

32 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

35 
	#_POSIX_AIO_MAX
 1

	)

38 
	#_POSIX_ARG_MAX
 4096

	)

41 #ifde‡
__USE_XOPEN2K


42 
	#_POSIX_CHILD_MAX
 25

	)

44 
	#_POSIX_CHILD_MAX
 6

	)

48 
	#_POSIX_DELAYTIMER_MAX
 32

	)

52 
	#_POSIX_HOST_NAME_MAX
 255

	)

55 
	#_POSIX_LINK_MAX
 8

	)

58 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

61 
	#_POSIX_MAX_CANON
 255

	)

65 
	#_POSIX_MAX_INPUT
 255

	)

68 
	#_POSIX_MQ_OPEN_MAX
 8

	)

71 
	#_POSIX_MQ_PRIO_MAX
 32

	)

74 
	#_POSIX_NAME_MAX
 14

	)

77 #ifde‡
__USE_XOPEN2K


78 
	#_POSIX_NGROUPS_MAX
 8

	)

80 
	#_POSIX_NGROUPS_MAX
 0

	)

84 #ifde‡
__USE_XOPEN2K


85 
	#_POSIX_OPEN_MAX
 20

	)

87 
	#_POSIX_OPEN_MAX
 16

	)

90 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


93 
	#_POSIX_FD_SETSIZE
 
_POSIX_OPEN_MAX


	)

97 
	#_POSIX_PATH_MAX
 256

	)

100 
	#_POSIX_PIPE_BUF
 512

	)

104 
	#_POSIX_RE_DUP_MAX
 255

	)

107 
	#_POSIX_RTSIG_MAX
 8

	)

110 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

113 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

116 
	#_POSIX_SIGQUEUE_MAX
 32

	)

119 
	#_POSIX_SSIZE_MAX
 32767

	)

122 
	#_POSIX_STREAM_MAX
 8

	)

125 
	#_POSIX_SYMLINK_MAX
 255

	)

129 
	#_POSIX_SYMLOOP_MAX
 8

	)

132 
	#_POSIX_TIMER_MAX
 32

	)

135 
	#_POSIX_TTY_NAME_MAX
 9

	)

138 
	#_POSIX_TZNAME_MAX
 6

	)

140 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


142 
	#_POSIX_QLIMIT
 1

	)

146 
	#_POSIX_HIWAT
 
_POSIX_PIPE_BUF


	)

149 
	#_POSIX_UIO_MAXIOV
 16

	)

153 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

157 
	~<bôs/loˇl_lim.h
>

160 #i‚def 
SSIZE_MAX


161 
	#SSIZE_MAX
 
LONG_MAX


	)

168 #i‚def 
NGROUPS_MAX


169 
	#NGROUPS_MAX
 8

	)

	@/usr/include/bits/posix2_lim.h

23 #i‚def 
_BITS_POSIX2_LIM_H


24 
	#_BITS_POSIX2_LIM_H
 1

	)

28 
	#_POSIX2_BC_BASE_MAX
 99

	)

31 
	#_POSIX2_BC_DIM_MAX
 2048

	)

34 
	#_POSIX2_BC_SCALE_MAX
 99

	)

37 
	#_POSIX2_BC_STRING_MAX
 1000

	)

41 
	#_POSIX2_COLL_WEIGHTS_MAX
 2

	)

45 
	#_POSIX2_EXPR_NEST_MAX
 32

	)

48 
	#_POSIX2_LINE_MAX
 2048

	)

52 
	#_POSIX2_RE_DUP_MAX
 255

	)

56 
	#_POSIX2_CHARCLASS_NAME_MAX
 14

	)

63 #i‚def 
BC_BASE_MAX


64 
	#BC_BASE_MAX
 
_POSIX2_BC_BASE_MAX


	)

66 #i‚def 
BC_DIM_MAX


67 
	#BC_DIM_MAX
 
_POSIX2_BC_DIM_MAX


	)

69 #i‚def 
BC_SCALE_MAX


70 
	#BC_SCALE_MAX
 
_POSIX2_BC_SCALE_MAX


	)

72 #i‚def 
BC_STRING_MAX


73 
	#BC_STRING_MAX
 
_POSIX2_BC_STRING_MAX


	)

75 #i‚def 
COLL_WEIGHTS_MAX


76 
	#COLL_WEIGHTS_MAX
 255

	)

78 #i‚def 
EXPR_NEST_MAX


79 
	#EXPR_NEST_MAX
 
_POSIX2_EXPR_NEST_MAX


	)

81 #i‚def 
LINE_MAX


82 
	#LINE_MAX
 
_POSIX2_LINE_MAX


	)

84 #i‚def 
CHARCLASS_NAME_MAX


85 
	#CHARCLASS_NAME_MAX
 2048

	)

89 
	#RE_DUP_MAX
 (0x7fff)

	)

	@/usr/include/bits/pthreadtypes.h

20 #i‚de‡
_BITS_PTHREADTYPES_H


21 
	#_BITS_PTHREADTYPES_H
 1

	)

23 
	~<bôs/w‹dsize.h
>

25 #i‡
__WORDSIZE
 == 64

26 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

27 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

28 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

29 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

30 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

31 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

32 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

33 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

34 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

36 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

37 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

38 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

39 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

40 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

41 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

42 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

43 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

44 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

50 
	t±hªad_t
;

55 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

56 
	m__Æign
;

57 } 
	t±hªad_©å_t
;

60 #i‡
__WORDSIZE
 == 64

61 
	s__±hªad_öã∫Æ_li°


63 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

64 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

65 } 
	t__±hªad_li°_t
;

67 
	s__±hªad_öã∫Æ_¶i°


69 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

70 } 
	t__±hªad_¶i°_t
;

78 
	s__±hªad_muãx_s


80 
	m__lock
;

81 
	m__cou¡
;

82 
	m__ow√r
;

83 #i‡
__WORDSIZE
 == 64

84 
	m__nu£rs
;

88 
	m__köd
;

89 #i‡
__WORDSIZE
 == 64

90 
	m__•ös
;

91 
__±hªad_li°_t
 
	m__li°
;

92 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

94 
	m__nu£rs
;

95 
__exãnsi⁄__
 union

97 
	m__•ös
;

98 
__±hªad_¶i°_t
 
	m__li°
;

101 } 
	m__d©a
;

102 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

103 
	m__Æign
;

104 } 
	t±hªad_muãx_t
;

108 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

109 
	m__Æign
;

110 } 
	t±hªad_muãx©å_t
;

119 
	m__lock
;

120 
	m__fuãx
;

121 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

122 
__exãnsi⁄__
 
	m__wakeup_£q
;

123 
__exãnsi⁄__
 
	m__wokí_£q
;

124 *
	m__muãx
;

125 
	m__nwaôîs
;

126 
	m__brﬂdˇ°_£q
;

127 } 
	m__d©a
;

128 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

129 
__exãnsi⁄__
 
	m__Æign
;

130 } 
	t±hªad_c⁄d_t
;

134 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

135 
	m__Æign
;

136 } 
	t±hªad_c⁄d©å_t
;

140 
	t±hªad_key_t
;

144 
	t±hªad_⁄˚_t
;

147 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


152 #i‡
__WORDSIZE
 == 64

155 
	m__lock
;

156 
	m__ƒ_ªadîs
;

157 
	m__ªadîs_wakeup
;

158 
	m__wrôî_wakeup
;

159 
	m__ƒ_ªadîs_queued
;

160 
	m__ƒ_wrôîs_queued
;

161 
	m__wrôî
;

162 
	m__sh¨ed
;

163 
	m__∑d1
;

164 
	m__∑d2
;

167 
	m__Êags
;

168 } 
	m__d©a
;

172 
	m__lock
;

173 
	m__ƒ_ªadîs
;

174 
	m__ªadîs_wakeup
;

175 
	m__wrôî_wakeup
;

176 
	m__ƒ_ªadîs_queued
;

177 
	m__ƒ_wrôîs_queued
;

180 
	m__Êags
;

181 
	m__sh¨ed
;

182 
	m__∑d1
;

183 
	m__∑d2
;

184 
	m__wrôî
;

185 } 
	m__d©a
;

187 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

188 
	m__Æign
;

189 } 
	t±hªad_rwlock_t
;

193 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

194 
	m__Æign
;

195 } 
	t±hªad_rwlock©å_t
;

199 #ifde‡
__USE_XOPEN2K


201 vﬁ©ûê
	t±hªad_•ölock_t
;

208 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

209 
	m__Æign
;

210 } 
	t±hªad_b¨rõr_t
;

214 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

215 
	m__Æign
;

216 } 
	t±hªad_b¨rõøâr_t
;

220 #i‡
__WORDSIZE
 == 32

222 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/setjmp.h

20 #i‚de‡
_BITS_SETJMP_H


21 
	#_BITS_SETJMP_H
 1

	)

23 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


27 
	~<bôs/w‹dsize.h
>

29 #i‚de‡
_ASM


31 #i‡
__WORDSIZE
 == 64

32 
	t__jmp_buf
[8];

34 
	t__jmp_buf
[6];

	@/usr/include/bits/setjmp2.h

20 #i‚de‡
_SETJMP_H


25 #ifde‡
__REDIRECT_NTH


26 
__REDIRECT_NTHNL
 (
l⁄gjmp
,

27 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
),

28 
__l⁄gjmp_chk
Ë
__©åibuã__
 ((
__n‹ëu∫__
));

29 
__REDIRECT_NTHNL
 (
_l⁄gjmp
,

30 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
),

31 
__l⁄gjmp_chk
Ë
__©åibuã__
 ((
__n‹ëu∫__
));

32 
__REDIRECT_NTHNL
 (
sigl⁄gjmp
,

33 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
),

34 
__l⁄gjmp_chk
Ë
__©åibuã__
 ((
__n‹ëu∫__
));

36 
__l⁄gjmp_chk
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
),

37 
__THROWNL
 
__©åibuã__
 ((
__n‹ëu∫__
));

38 
	#l⁄gjmp
 
__l⁄gjmp_chk


	)

39 
	#_l⁄gjmp
 
__l⁄gjmp_chk


	)

40 
	#sigl⁄gjmp
 
__l⁄gjmp_chk


	)

	@/usr/include/bits/sigaction.h

20 #i‚de‡
_SIGNAL_H


25 
	ssiga˘i⁄


28 #ifde‡
__USE_POSIX199309


32 
__sigh™dÀr_t
 
	mß_h™dÀr
;

34 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

36 
	m__siga˘i⁄_h™dÀr
;

37 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

38 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

40 
__sigh™dÀr_t
 
	mß_h™dÀr
;

44 
__sig£t_t
 
	mß_mask
;

47 
	mß_Êags
;

50 (*
	mß_ª°‹î
) ();

54 
	#SA_NOCLDSTOP
 1

	)

55 
	#SA_NOCLDWAIT
 2

	)

56 
	#SA_SIGINFO
 4

	)

58 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


59 
	#SA_ONSTACK
 0x08000000

	)

61 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


62 
	#SA_RESTART
 0x10000000

	)

63 
	#SA_NODEFER
 0x40000000

	)

65 
	#SA_RESETHAND
 0x80000000

	)

67 #ifde‡
__USE_MISC


68 
	#SA_INTERRUPT
 0x20000000

	)

71 
	#SA_NOMASK
 
SA_NODEFER


	)

72 
	#SA_ONESHOT
 
SA_RESETHAND


	)

73 
	#SA_STACK
 
SA_ONSTACK


	)

77 
	#SIG_BLOCK
 0

	)

78 
	#SIG_UNBLOCK
 1

	)

79 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

19 #i‚de‡
_BITS_SIGCONTEXT_H


20 
	#_BITS_SIGCONTEXT_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


26 
	~<bôs/w‹dsize.h
>

28 
	s_Âªg


30 
	msignifiˇnd
[4];

31 
	mexp⁄ít
;

34 
	s_Âxªg


36 
	msignifiˇnd
[4];

37 
	mexp⁄ít
;

38 
	m∑ddög
[3];

41 
	s_xmmªg


43 
__uöt32_t
 
	mñemít
[4];

48 #i‡
__WORDSIZE
 == 32

50 
	s_Â°©e


53 
__uöt32_t
 
	mcw
;

54 
__uöt32_t
 
	msw
;

55 
__uöt32_t
 
	mèg
;

56 
__uöt32_t
 
	mùoff
;

57 
__uöt32_t
 
	mcs£l
;

58 
__uöt32_t
 
	md©aoff
;

59 
__uöt32_t
 
	md©a£l
;

60 
_Âªg
 
	m_°
[8];

61 
	m°©us
;

62 
	mmagic
;

65 
__uöt32_t
 
	m_fx§_ív
[6];

66 
__uöt32_t
 
	mmxc§
;

67 
__uöt32_t
 
	mª£rved
;

68 
_Âxªg
 
	m_fx§_°
[8];

69 
_xmmªg
 
	m_xmm
[8];

70 
__uöt32_t
 
	m∑ddög
[56];

73 #i‚de‡
sigc⁄ãxt_°ru˘


78 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

81 
	ssigc⁄ãxt


83 
	mgs
, 
	m__gsh
;

84 
	mfs
, 
	m__fsh
;

85 
	mes
, 
	m__esh
;

86 
	mds
, 
	m__dsh
;

87 
	medi
;

88 
	mesi
;

89 
	mebp
;

90 
	me•
;

91 
	mebx
;

92 
	medx
;

93 
	mecx
;

94 
	móx
;

95 
	må≠no
;

96 
	mîr
;

97 
	meù
;

98 
	mcs
, 
	m__csh
;

99 
	meÊags
;

100 
	me•_©_sig«l
;

101 
	mss
, 
	m__ssh
;

102 
_Â°©e
 * 
	mÂ°©e
;

103 
	mﬁdmask
;

104 
	m¸2
;

109 
	s_Â°©e


112 
__uöt16_t
 
	mcwd
;

113 
__uöt16_t
 
	mswd
;

114 
__uöt16_t
 
	m·w
;

115 
__uöt16_t
 
	mf›
;

116 
__uöt64_t
 
	mrù
;

117 
__uöt64_t
 
	mrdp
;

118 
__uöt32_t
 
	mmxc§
;

119 
__uöt32_t
 
	mmx¸_mask
;

120 
_Âxªg
 
	m_°
[8];

121 
_xmmªg
 
	m_xmm
[16];

122 
__uöt32_t
 
	m∑ddög
[24];

125 
	ssigc⁄ãxt


127 
	mr8
;

128 
	mr9
;

129 
	mr10
;

130 
	mr11
;

131 
	mr12
;

132 
	mr13
;

133 
	mr14
;

134 
	mr15
;

135 
	mrdi
;

136 
	mrsi
;

137 
	mrbp
;

138 
	mrbx
;

139 
	mrdx
;

140 
	møx
;

141 
	mrcx
;

142 
	mr•
;

143 
	mrù
;

144 
	meÊags
;

145 
	mcs
;

146 
	mgs
;

147 
	mfs
;

148 
	m__∑d0
;

149 
	mîr
;

150 
	må≠no
;

151 
	mﬁdmask
;

152 
	m¸2
;

153 
_Â°©e
 * 
	mÂ°©e
;

154 
	m__ª£rved1
 [8];

	@/usr/include/bits/siginfo.h

20 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

21 && !
deföed
 
	g__√ed_sigevít_t


25 
	~<bôs/w‹dsize.h
>

27 #i‡(!
deföed
 
__have_sigvÆ_t
 \

28 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

29 || 
deföed
 
	g__√ed_sigevít_t
))

30 
	#__have_sigvÆ_t
 1

	)

33 
	usigvÆ


35 
	msivÆ_öt
;

36 *
	msivÆ_±r
;

37 } 
	tsigvÆ_t
;

40 #i‡(!
deföed
 
__have_sigöfo_t
 \

41 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

42 
	#__have_sigöfo_t
 1

	)

44 
	#__SI_MAX_SIZE
 128

	)

45 #i‡
__WORDSIZE
 == 64

46 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

48 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

51 
	ssigöfo


53 
	msi_signo
;

54 
	msi_î∫o
;

56 
	msi_code
;

60 
	m_∑d
[
__SI_PAD_SIZE
];

65 
__pid_t
 
	msi_pid
;

66 
__uid_t
 
	msi_uid
;

67 } 
	m_kûl
;

72 
	msi_tid
;

73 
	msi_ovîrun
;

74 
sigvÆ_t
 
	msi_sigvÆ
;

75 } 
	m_timî
;

80 
__pid_t
 
	msi_pid
;

81 
__uid_t
 
	msi_uid
;

82 
sigvÆ_t
 
	msi_sigvÆ
;

83 } 
	m_π
;

88 
__pid_t
 
	msi_pid
;

89 
__uid_t
 
	msi_uid
;

90 
	msi_°©us
;

91 
__˛ock_t
 
	msi_utime
;

92 
__˛ock_t
 
	msi_°ime
;

93 } 
	m_sigchld
;

98 *
	msi_addr
;

99 } 
	m_sigÁu…
;

104 
	msi_b™d
;

105 
	msi_fd
;

106 } 
	m_sigpﬁl
;

107 } 
	m_sifõlds
;

108 } 
	tsigöfo_t
;

112 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

113 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

114 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

115 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

116 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

117 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

118 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

119 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

120 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

121 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

122 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

123 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

124 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

131 
	mSI_ASYNCNL
 = -60,

132 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

133 
	mSI_TKILL
 = -6,

134 
	#SI_TKILL
 
SI_TKILL


	)

135 
	mSI_SIGIO
,

136 
	#SI_SIGIO
 
SI_SIGIO


	)

137 
	mSI_ASYNCIO
,

138 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

139 
	mSI_MESGQ
,

140 
	#SI_MESGQ
 
SI_MESGQ


	)

141 
	mSI_TIMER
,

142 
	#SI_TIMER
 
SI_TIMER


	)

143 
	mSI_QUEUE
,

144 
	#SI_QUEUE
 
SI_QUEUE


	)

145 
	mSI_USER
,

146 
	#SI_USER
 
SI_USER


	)

147 
	mSI_KERNEL
 = 0x80

148 
	#SI_KERNEL
 
SI_KERNEL


	)

155 
	mILL_ILLOPC
 = 1,

156 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

157 
	mILL_ILLOPN
,

158 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

159 
	mILL_ILLADR
,

160 
	#ILL_ILLADR
 
ILL_ILLADR


	)

161 
	mILL_ILLTRP
,

162 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

163 
	mILL_PRVOPC
,

164 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

165 
	mILL_PRVREG
,

166 
	#ILL_PRVREG
 
ILL_PRVREG


	)

167 
	mILL_COPROC
,

168 
	#ILL_COPROC
 
ILL_COPROC


	)

169 
	mILL_BADSTK


170 
	#ILL_BADSTK
 
ILL_BADSTK


	)

176 
	mFPE_INTDIV
 = 1,

177 
	#FPE_INTDIV
 
FPE_INTDIV


	)

178 
	mFPE_INTOVF
,

179 
	#FPE_INTOVF
 
FPE_INTOVF


	)

180 
	mFPE_FLTDIV
,

181 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

182 
	mFPE_FLTOVF
,

183 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

184 
	mFPE_FLTUND
,

185 
	#FPE_FLTUND
 
FPE_FLTUND


	)

186 
	mFPE_FLTRES
,

187 
	#FPE_FLTRES
 
FPE_FLTRES


	)

188 
	mFPE_FLTINV
,

189 
	#FPE_FLTINV
 
FPE_FLTINV


	)

190 
	mFPE_FLTSUB


191 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

197 
	mSEGV_MAPERR
 = 1,

198 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

199 
	mSEGV_ACCERR


200 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

206 
	mBUS_ADRALN
 = 1,

207 
	#BUS_ADRALN
 
BUS_ADRALN


	)

208 
	mBUS_ADRERR
,

209 
	#BUS_ADRERR
 
BUS_ADRERR


	)

210 
	mBUS_OBJERR


211 
	#BUS_OBJERR
 
BUS_OBJERR


	)

217 
	mTRAP_BRKPT
 = 1,

218 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

219 
	mTRAP_TRACE


220 
	#TRAP_TRACE
 
TRAP_TRACE


	)

226 
	mCLD_EXITED
 = 1,

227 
	#CLD_EXITED
 
CLD_EXITED


	)

228 
	mCLD_KILLED
,

229 
	#CLD_KILLED
 
CLD_KILLED


	)

230 
	mCLD_DUMPED
,

231 
	#CLD_DUMPED
 
CLD_DUMPED


	)

232 
	mCLD_TRAPPED
,

233 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

234 
	mCLD_STOPPED
,

235 
	#CLD_STOPPED
 
CLD_STOPPED


	)

236 
	mCLD_CONTINUED


237 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

243 
	mPOLL_IN
 = 1,

244 
	#POLL_IN
 
POLL_IN


	)

245 
	mPOLL_OUT
,

246 
	#POLL_OUT
 
POLL_OUT


	)

247 
	mPOLL_MSG
,

248 
	#POLL_MSG
 
POLL_MSG


	)

249 
	mPOLL_ERR
,

250 
	#POLL_ERR
 
POLL_ERR


	)

251 
	mPOLL_PRI
,

252 
	#POLL_PRI
 
POLL_PRI


	)

253 
	mPOLL_HUP


254 
	#POLL_HUP
 
POLL_HUP


	)

257 #unde‡
__√ed_sigöfo_t


261 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

262 && !
deföed
 
	g__have_sigevít_t


263 
	#__have_sigevít_t
 1

	)

266 
	#__SIGEV_MAX_SIZE
 64

	)

267 #i‡
__WORDSIZE
 == 64

268 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

270 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

273 
	ssigevít


275 
sigvÆ_t
 
	msigev_vÆue
;

276 
	msigev_signo
;

277 
	msigev_nŸify
;

281 
	m_∑d
[
__SIGEV_PAD_SIZE
];

285 
__pid_t
 
	m_tid
;

289 (*
	m_fun˘i⁄
Ë(
	msigvÆ_t
);

290 *
	m_©åibuã
;

291 } 
	m_sigev_thªad
;

292 } 
	m_sigev_un
;

293 } 
	tsigevít_t
;

296 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

297 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

302 
	mSIGEV_SIGNAL
 = 0,

303 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

304 
	mSIGEV_NONE
,

305 
	#SIGEV_NONE
 
SIGEV_NONE


	)

306 
	mSIGEV_THREAD
,

307 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

309 
	mSIGEV_THREAD_ID
 = 4

310 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/signum.h

20 #ifdef 
_SIGNAL_H


23 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

24 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

25 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

27 #ifde‡
__USE_UNIX98


28 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

33 
	#SIGHUP
 1

	)

34 
	#SIGINT
 2

	)

35 
	#SIGQUIT
 3

	)

36 
	#SIGILL
 4

	)

37 
	#SIGTRAP
 5

	)

38 
	#SIGABRT
 6

	)

39 
	#SIGIOT
 6

	)

40 
	#SIGBUS
 7

	)

41 
	#SIGFPE
 8

	)

42 
	#SIGKILL
 9

	)

43 
	#SIGUSR1
 10

	)

44 
	#SIGSEGV
 11

	)

45 
	#SIGUSR2
 12

	)

46 
	#SIGPIPE
 13

	)

47 
	#SIGALRM
 14

	)

48 
	#SIGTERM
 15

	)

49 
	#SIGSTKFLT
 16

	)

50 
	#SIGCLD
 
SIGCHLD


	)

51 
	#SIGCHLD
 17

	)

52 
	#SIGCONT
 18

	)

53 
	#SIGSTOP
 19

	)

54 
	#SIGTSTP
 20

	)

55 
	#SIGTTIN
 21

	)

56 
	#SIGTTOU
 22

	)

57 
	#SIGURG
 23

	)

58 
	#SIGXCPU
 24

	)

59 
	#SIGXFSZ
 25

	)

60 
	#SIGVTALRM
 26

	)

61 
	#SIGPROF
 27

	)

62 
	#SIGWINCH
 28

	)

63 
	#SIGPOLL
 
SIGIO


	)

64 
	#SIGIO
 29

	)

65 
	#SIGPWR
 30

	)

66 
	#SIGSYS
 31

	)

67 
	#SIGUNUSED
 31

	)

69 
	#_NSIG
 65

	)

72 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

73 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

77 
	#__SIGRTMIN
 32

	)

78 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigset.h

21 #i‚def 
_SIGSET_H_ty≥s


22 
	#_SIGSET_H_ty≥s
 1

	)

24 
	t__sig_©omic_t
;

28 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

31 
	m__vÆ
[
_SIGSET_NWORDS
];

32 } 
	t__sig£t_t
;

43 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


44 
	#_SIGSET_H_‚s
 1

	)

46 #i‚de‡
_EXTERN_INLINE


47 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

51 
	#__sigmask
(
sig
) \

52 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

55 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

57 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

58 
	#__sigem±y£t
(
£t
) \

59 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

60 
sig£t_t
 *
__£t
 = (
£t
); \

61 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

62 0; }))

	)

63 
	#__sigfûl£t
(
£t
) \

64 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

65 
sig£t_t
 *
__£t
 = (
£t
); \

66 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

67 0; }))

	)

69 #ifde‡
__USE_GNU


73 
	#__sigi£m±y£t
(
£t
) \

74 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

75 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

76 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

77 !
__ªt
 && --
__˙t
 >= 0) \

78 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

79 
__ªt
 =0; }))

	)

80 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

81 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

82 
sig£t_t
 *
__de°
 = (
de°
); \

83 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

84 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

85 --
__˙t
 >= 0) \

86 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

87 & 
__right
->
__vÆ
[
__˙t
]); \

88 0; }))

	)

89 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

90 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

91 
sig£t_t
 *
__de°
 = (
de°
); \

92 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

93 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

94 --
__˙t
 >= 0) \

95 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

96 | 
__right
->
__vÆ
[
__˙t
]); \

97 0; }))

	)

104 
__sigismembî
 (
__c⁄°
 
__sig£t_t
 *, );

105 
__sigadd£t
 (
__sig£t_t
 *, );

106 
__sigdñ£t
 (
__sig£t_t
 *, );

108 #ifde‡
__USE_EXTERN_INLINES


109 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

110 
_EXTERN_INLINE
 \

111 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

113 
__mask
 = 
	`__sigmask
 (
__sig
); \

114 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

115  
BODY
; \

116 }

	)

118 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
Ë? 1 : 0, 
__c⁄°
)

119 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

120 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

122 #unde‡
__SIGSETFN


	@/usr/include/bits/sigstack.h

20 #i‚de‡
_SIGNAL_H


26 
	ssig°ack


28 *
	mss_•
;

29 
	mss_⁄°ack
;

36 
	mSS_ONSTACK
 = 1,

37 
	#SS_ONSTACK
 
SS_ONSTACK


	)

38 
	mSS_DISABLE


39 
	#SS_DISABLE
 
SS_DISABLE


	)

43 
	#MINSIGSTKSZ
 2048

	)

46 
	#SIGSTKSZ
 8192

	)

50 
	ssigÆt°ack


52 *
	mss_•
;

53 
	mss_Êags
;

54 
size_t
 
	mss_size
;

55 } 
	t°ack_t
;

	@/usr/include/bits/sigthread.h

20 #i‚de‡
_BITS_SIGTHREAD_H


21 
	#_BITS_SIGTHREAD_H
 1

	)

23 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


31 
	$±hªad_sigmask
 (
__how
,

32 
__c⁄°
 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

33 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

36 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

38 #ifde‡
__USE_GNU


40 
	$±hªad_sigqueue
 (
±hªad_t
 
__thªadid
, 
__signo
,

41 c⁄° 
sigvÆ
 
__vÆue
Ë
__THROW
;

	@/usr/include/bits/types.h

24 #i‚def 
_BITS_TYPES_H


25 
	#_BITS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	t__u_ch¨
;

32 
	t__u_sh‹t
;

33 
	t__u_öt
;

34 
	t__u_l⁄g
;

37 sig√d 
	t__öt8_t
;

38 
	t__uöt8_t
;

39 sig√d 
	t__öt16_t
;

40 
	t__uöt16_t
;

41 sig√d 
	t__öt32_t
;

42 
	t__uöt32_t
;

43 #i‡
__WORDSIZE
 == 64

44 sig√d 
	t__öt64_t
;

45 
	t__uöt64_t
;

46 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


47 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

48 
__exãnsi⁄__
 
	t__uöt64_t
;

52 #i‡
__WORDSIZE
 == 64

53 
	t__quad_t
;

54 
	t__u_quad_t
;

55 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


56 
__exãnsi⁄__
 
	t__quad_t
;

57 
__exãnsi⁄__
 
	t__u_quad_t
;

61 
	m__vÆ
[2];

62 } 
	t__quad_t
;

65 
__u_l⁄g
 
	m__vÆ
[2];

66 } 
	t__u_quad_t
;

99 
	#__S16_TYPE
 

	)

100 
	#__U16_TYPE
 

	)

101 
	#__S32_TYPE
 

	)

102 
	#__U32_TYPE
 

	)

103 
	#__SLONGWORD_TYPE
 

	)

104 
	#__ULONGWORD_TYPE
 

	)

105 #i‡
__WORDSIZE
 == 32

106 
	#__SQUAD_TYPE
 
__quad_t


	)

107 
	#__UQUAD_TYPE
 
__u_quad_t


	)

108 
	#__SWORD_TYPE
 

	)

109 
	#__UWORD_TYPE
 

	)

110 
	#__SLONG32_TYPE
 

	)

111 
	#__ULONG32_TYPE
 

	)

112 
	#__S64_TYPE
 
__quad_t


	)

113 
	#__U64_TYPE
 
__u_quad_t


	)

116 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

117 #ñi‡
__WORDSIZE
 == 64

118 
	t__SQUAD_TYPE
 

	)

119 
	t__UQUAD_TYPE
 

	)

120 
	t__SWORD_TYPE
 

	)

121 
	t__UWORD_TYPE
 

	)

122 
	t__SLONG32_TYPE
 

	)

123 
	t__ULONG32_TYPE
 

	)

124 
	t__S64_TYPE
 

	)

125 
	t__U64_TYPE
 

	)

127 
	t__STD_TYPE
 

	)

131 
	~<bôs/ty≥sizes.h
>

134 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

135 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

136 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

137 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

138 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

139 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

140 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

141 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

142 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

143 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

144 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

145 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

146 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

147 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

148 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

149 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

150 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

151 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

153 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

154 
__STD_TYPE
 
__SWBLK_T_TYPE
 
	g__swblk_t
;

155 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

158 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

161 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

164 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

169 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

170 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

173 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

174 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

177 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

178 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

180 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

184 
__off64_t
 
	t__loff_t
;

185 
__quad_t
 *
	t__qaddr_t
;

186 *
	t__ˇddr_t
;

189 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

192 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

195 #unde‡
__STD_TYPE


	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__


4 
	#__WORDSIZE
 64

	)

5 
	#__WORDSIZE_COMPAT32
 1

	)

7 
	#__WORDSIZE
 32

	)

	@/usr/include/bits/xopen_lim.h

30 #i‚de‡
_XOPEN_LIM_H


31 
	#_XOPEN_LIM_H
 1

	)

33 
	#__√ed_IOV_MAX


	)

34 
	~<bôs/°dio_lim.h
>

66 
	#_XOPEN_IOV_MAX
 
_POSIX_UIO_MAXIOV


	)

71 
	#NL_ARGMAX
 
_POSIX_ARG_MAX


	)

74 
	#NL_LANGMAX
 
_POSIX2_LINE_MAX


	)

77 
	#NL_MSGMAX
 
INT_MAX


	)

81 
	#NL_NMAX
 
INT_MAX


	)

84 
	#NL_SETMAX
 
INT_MAX


	)

87 
	#NL_TEXTMAX
 
INT_MAX


	)

90 
	#NZERO
 20

	)

94 #ifde‡
INT_MAX


95 #i‡
INT_MAX
 == 32767

96 
	#WORD_BIT
 16

	)

98 #i‡
INT_MAX
 == 2147483647

99 
	#WORD_BIT
 32

	)

102 
	#WORD_BIT
 64

	)

105 #ñi‡
deföed
 
__INT_MAX__


106 #i‡
__INT_MAX__
 == 32767

107 
	#WORD_BIT
 16

	)

109 #i‡
__INT_MAX__
 == 2147483647

110 
	#WORD_BIT
 32

	)

113 
	#WORD_BIT
 64

	)

117 
	#WORD_BIT
 32

	)

121 #ifde‡
LONG_MAX


122 #i‡
LONG_MAX
 == 2147483647

123 
	#LONG_BIT
 32

	)

126 
	#LONG_BIT
 64

	)

128 #ñi‡
deföed
 
__LONG_MAX__


129 #i‡
__LONG_MAX__
 == 2147483647

130 
	#LONG_BIT
 32

	)

133 
	#LONG_BIT
 64

	)

136 
	~<bôs/w‹dsize.h
>

137 #i‡
__WORDSIZE
 == 64

138 
	#LONG_BIT
 64

	)

140 
	#LONG_BIT
 32

	)

	@/usr/include/features.h

20 #i‚def 
_FEATURES_H


21 
	#_FEATURES_H
 1

	)

98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_POSIX


101 #unde‡
__USE_POSIX2


102 #unde‡
__USE_POSIX199309


103 #unde‡
__USE_POSIX199506


104 #unde‡
__USE_XOPEN


105 #unde‡
__USE_XOPEN_EXTENDED


106 #unde‡
__USE_UNIX98


107 #unde‡
__USE_XOPEN2K


108 #unde‡
__USE_XOPEN2KXSI


109 #unde‡
__USE_XOPEN2K8


110 #unde‡
__USE_XOPEN2K8XSI


111 #unde‡
__USE_LARGEFILE


112 #unde‡
__USE_LARGEFILE64


113 #unde‡
__USE_FILE_OFFSET64


114 #unde‡
__USE_BSD


115 #unde‡
__USE_SVID


116 #unde‡
__USE_MISC


117 #unde‡
__USE_ATFILE


118 #unde‡
__USE_GNU


119 #unde‡
__USE_REENTRANT


120 #unde‡
__USE_FORTIFY_LEVEL


121 #unde‡
__FAVOR_BSD


122 #unde‡
__KERNEL_STRICT_NAMES


126 #i‚de‡
_LOOSE_KERNEL_NAMES


127 
	#__KERNEL_STRICT_NAMES


	)

131 
	#__USE_ANSI
 1

	)

140 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


141 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

142 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

144 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

149 #i‡
deföed
 
_BSD_SOURCE
 && \

150 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

151 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

152 
	#__FAVOR_BSD
 1

	)

156 #ifde‡
_GNU_SOURCE


157 #unde‡
_ISOC95_SOURCE


158 
	#_ISOC95_SOURCE
 1

	)

159 #unde‡
_ISOC99_SOURCE


160 
	#_ISOC99_SOURCE
 1

	)

161 #unde‡
_POSIX_SOURCE


162 
	#_POSIX_SOURCE
 1

	)

163 #unde‡
_POSIX_C_SOURCE


164 
	#_POSIX_C_SOURCE
 200809L

	)

165 #unde‡
_XOPEN_SOURCE


166 
	#_XOPEN_SOURCE
 700

	)

167 #unde‡
_XOPEN_SOURCE_EXTENDED


168 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

169 #unde‡
_LARGEFILE64_SOURCE


170 
	#_LARGEFILE64_SOURCE
 1

	)

171 #unde‡
_BSD_SOURCE


172 
	#_BSD_SOURCE
 1

	)

173 #unde‡
_SVID_SOURCE


174 
	#_SVID_SOURCE
 1

	)

175 #unde‡
_ATFILE_SOURCE


176 
	#_ATFILE_SOURCE
 1

	)

181 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

182 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

183 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

184 
	#_BSD_SOURCE
 1

	)

185 
	#_SVID_SOURCE
 1

	)

192 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

193 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

194 
	#__USE_ISOC99
 1

	)

198 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

199 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

200 
	#__USE_ISOC95
 1

	)

205 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

206 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

207 
	#_POSIX_SOURCE
 1

	)

208 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

209 
	#_POSIX_C_SOURCE
 2

	)

210 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

211 
	#_POSIX_C_SOURCE
 199506L

	)

212 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

213 
	#_POSIX_C_SOURCE
 200112L

	)

215 
	#_POSIX_C_SOURCE
 200809L

	)

217 
	#__USE_POSIX_IMPLICITLY
 1

	)

220 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


221 
	#__USE_POSIX
 1

	)

224 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


225 
	#__USE_POSIX2
 1

	)

228 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

229 
	#__USE_POSIX199309
 1

	)

232 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

233 
	#__USE_POSIX199506
 1

	)

236 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

237 
	#__USE_XOPEN2K
 1

	)

238 #unde‡
__USE_ISOC95


239 
	#__USE_ISOC95
 1

	)

240 #unde‡
__USE_ISOC99


241 
	#__USE_ISOC99
 1

	)

244 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

245 
	#__USE_XOPEN2K8
 1

	)

246 #unde‡
_ATFILE_SOURCE


247 
	#_ATFILE_SOURCE
 1

	)

250 #ifdef 
_XOPEN_SOURCE


251 
	#__USE_XOPEN
 1

	)

252 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

253 
	#__USE_XOPEN_EXTENDED
 1

	)

254 
	#__USE_UNIX98
 1

	)

255 #unde‡
_LARGEFILE_SOURCE


256 
	#_LARGEFILE_SOURCE
 1

	)

257 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

258 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

259 
	#__USE_XOPEN2K8
 1

	)

260 
	#__USE_XOPEN2K8XSI
 1

	)

262 
	#__USE_XOPEN2K
 1

	)

263 
	#__USE_XOPEN2KXSI
 1

	)

264 #unde‡
__USE_ISOC95


265 
	#__USE_ISOC95
 1

	)

266 #unde‡
__USE_ISOC99


267 
	#__USE_ISOC99
 1

	)

270 #ifde‡
_XOPEN_SOURCE_EXTENDED


271 
	#__USE_XOPEN_EXTENDED
 1

	)

276 #ifde‡
_LARGEFILE_SOURCE


277 
	#__USE_LARGEFILE
 1

	)

280 #ifde‡
_LARGEFILE64_SOURCE


281 
	#__USE_LARGEFILE64
 1

	)

284 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

285 
	#__USE_FILE_OFFSET64
 1

	)

288 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


289 
	#__USE_MISC
 1

	)

292 #ifdef 
_BSD_SOURCE


293 
	#__USE_BSD
 1

	)

296 #ifdef 
_SVID_SOURCE


297 
	#__USE_SVID
 1

	)

300 #ifdef 
_ATFILE_SOURCE


301 
	#__USE_ATFILE
 1

	)

304 #ifdef 
_GNU_SOURCE


305 
	#__USE_GNU
 1

	)

308 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


309 
	#__USE_REENTRANT
 1

	)

312 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

313 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

314 #i‡
_FORTIFY_SOURCE
 > 1

315 
	#__USE_FORTIFY_LEVEL
 2

	)

317 
	#__USE_FORTIFY_LEVEL
 1

	)

320 
	#__USE_FORTIFY_LEVEL
 0

	)

324 
	~<bôs/¥edefs.h
>

327 
	#__STDC_ISO_10646__
 200009L

	)

335 #unde‡
__GNU_LIBRARY__


336 
	#__GNU_LIBRARY__
 6

	)

340 
	#__GLIBC__
 2

	)

341 
	#__GLIBC_MINOR__
 15

	)

343 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

344 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

347 #i‡
deföed
 
__GNUC__
 \

348 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

349 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

350 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

351 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

355 #i‚de‡
__ASSEMBLER__


356 #i‚de‡
_SYS_CDEFS_H


357 
	~<sys/cdefs.h
>

362 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


363 
	#__USE_LARGEFILE
 1

	)

364 
	#__USE_LARGEFILE64
 1

	)

370 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

371 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

372 && 
deföed
 
	g__exã∫_ölöe


373 
	#__USE_EXTERN_INLINES
 1

	)

378 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

379 && (
deföed
 
	g_LIBC
 || !deföed 
	g__OPTIMIZE_SIZE__
Ë&& !deföed 
	g__NO_INLINE__
 \

380 && 
deföed
 
	g__exã∫_ölöe


381 
	#__USE_EXTERN_INLINES_IN_LIBC
 1

	)

389 
	~<gnu/°ubs.h
>

	@/usr/include/stdint.h

23 #i‚de‡
_STDINT_H


24 
	#_STDINT_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/wch¨.h
>

28 
	~<bôs/w‹dsize.h
>

35 #i‚de‡
__öt8_t_deföed


36 
	#__öt8_t_deföed


	)

37 sig√d 
	töt8_t
;

38 
	töt16_t
;

39 
	töt32_t
;

40 #i‡
__WORDSIZE
 == 64

41 
	töt64_t
;

43 
__exãnsi⁄__


44 
	töt64_t
;

49 
	tuöt8_t
;

50 
	tuöt16_t
;

51 #i‚de‡
__uöt32_t_deföed


52 
	tuöt32_t
;

53 
	#__uöt32_t_deföed


	)

55 #i‡
__WORDSIZE
 == 64

56 
	tuöt64_t
;

58 
__exãnsi⁄__


59 
	tuöt64_t
;

66 sig√d 
	töt_Àa°8_t
;

67 
	töt_Àa°16_t
;

68 
	töt_Àa°32_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Àa°64_t
;

72 
__exãnsi⁄__


73 
	töt_Àa°64_t
;

77 
	tuöt_Àa°8_t
;

78 
	tuöt_Àa°16_t
;

79 
	tuöt_Àa°32_t
;

80 #i‡
__WORDSIZE
 == 64

81 
	tuöt_Àa°64_t
;

83 
__exãnsi⁄__


84 
	tuöt_Àa°64_t
;

91 sig√d 
	töt_Á°8_t
;

92 #i‡
__WORDSIZE
 == 64

93 
	töt_Á°16_t
;

94 
	töt_Á°32_t
;

95 
	töt_Á°64_t
;

97 
	töt_Á°16_t
;

98 
	töt_Á°32_t
;

99 
__exãnsi⁄__


100 
	töt_Á°64_t
;

104 
	tuöt_Á°8_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	tuöt_Á°16_t
;

107 
	tuöt_Á°32_t
;

108 
	tuöt_Á°64_t
;

110 
	tuöt_Á°16_t
;

111 
	tuöt_Á°32_t
;

112 
__exãnsi⁄__


113 
	tuöt_Á°64_t
;

118 #i‡
__WORDSIZE
 == 64

119 #i‚de‡
__öçå_t_deföed


120 
	töçå_t
;

121 
	#__öçå_t_deföed


	)

123 
	tuöçå_t
;

125 #i‚de‡
__öçå_t_deföed


126 
	töçå_t
;

127 
	#__öçå_t_deföed


	)

129 
	tuöçå_t
;

134 #i‡
__WORDSIZE
 == 64

135 
	tötmax_t
;

136 
	tuötmax_t
;

138 
__exãnsi⁄__


139 
	tötmax_t
;

140 
__exãnsi⁄__


141 
	tuötmax_t
;

147 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


149 #i‡
__WORDSIZE
 == 64

150 
	#__INT64_C
(
c
Ë¯## 
L


	)

151 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

153 
	#__INT64_C
(
c
Ë¯## 
LL


	)

154 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

160 
	#INT8_MIN
 (-128)

	)

161 
	#INT16_MIN
 (-32767-1)

	)

162 
	#INT32_MIN
 (-2147483647-1)

	)

163 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

165 
	#INT8_MAX
 (127)

	)

166 
	#INT16_MAX
 (32767)

	)

167 
	#INT32_MAX
 (2147483647)

	)

168 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

171 
	#UINT8_MAX
 (255)

	)

172 
	#UINT16_MAX
 (65535)

	)

173 
	#UINT32_MAX
 (4294967295U)

	)

174 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

178 
	#INT_LEAST8_MIN
 (-128)

	)

179 
	#INT_LEAST16_MIN
 (-32767-1)

	)

180 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

181 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

183 
	#INT_LEAST8_MAX
 (127)

	)

184 
	#INT_LEAST16_MAX
 (32767)

	)

185 
	#INT_LEAST32_MAX
 (2147483647)

	)

186 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

189 
	#UINT_LEAST8_MAX
 (255)

	)

190 
	#UINT_LEAST16_MAX
 (65535)

	)

191 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

192 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

196 
	#INT_FAST8_MIN
 (-128)

	)

197 #i‡
__WORDSIZE
 == 64

198 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

199 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

201 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

202 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

204 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

206 
	#INT_FAST8_MAX
 (127)

	)

207 #i‡
__WORDSIZE
 == 64

208 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

209 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

211 
	#INT_FAST16_MAX
 (2147483647)

	)

212 
	#INT_FAST32_MAX
 (2147483647)

	)

214 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

217 
	#UINT_FAST8_MAX
 (255)

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

220 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

222 
	#UINT_FAST16_MAX
 (4294967295U)

	)

223 
	#UINT_FAST32_MAX
 (4294967295U)

	)

225 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

229 #i‡
__WORDSIZE
 == 64

230 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

231 
	#INTPTR_MAX
 (9223372036854775807L)

	)

232 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

234 
	#INTPTR_MIN
 (-2147483647-1)

	)

235 
	#INTPTR_MAX
 (2147483647)

	)

236 
	#UINTPTR_MAX
 (4294967295U)

	)

241 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

243 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

246 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

252 #i‡
__WORDSIZE
 == 64

253 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

254 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

256 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

257 
	#PTRDIFF_MAX
 (2147483647)

	)

261 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

262 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

265 #i‡
__WORDSIZE
 == 64

266 
	#SIZE_MAX
 (18446744073709551615UL)

	)

268 
	#SIZE_MAX
 (4294967295U)

	)

272 #i‚de‡
WCHAR_MIN


274 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

275 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

279 
	#WINT_MIN
 (0u)

	)

280 
	#WINT_MAX
 (4294967295u)

	)

287 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


290 
	#INT8_C
(
c
Ë
	)
c

291 
	#INT16_C
(
c
Ë
	)
c

292 
	#INT32_C
(
c
Ë
	)
c

293 #i‡
__WORDSIZE
 == 64

294 
	#INT64_C
(
c
Ë¯## 
L


	)

296 
	#INT64_C
(
c
Ë¯## 
LL


	)

300 
	#UINT8_C
(
c
Ë
	)
c

301 
	#UINT16_C
(
c
Ë
	)
c

302 
	#UINT32_C
(
c
Ë¯## 
U


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#UINT64_C
(
c
Ë¯## 
UL


	)

306 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

310 #i‡
__WORDSIZE
 == 64

311 
	#INTMAX_C
(
c
Ë¯## 
L


	)

312 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

314 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

315 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/sys/syscall.h

19 #i‚de‡
_SYSCALL_H


20 
	#_SYSCALL_H
 1

	)

25 
	~<asm/uni°d.h
>

27 #i‚de‡
_LIBC


32 
	~<bôs/sysˇŒ.h
>

	@/usr/include/sys/ucontext.h

19 #i‚de‡
_SYS_UCONTEXT_H


20 
	#_SYS_UCONTEXT_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sig«l.h
>

24 
	~<bôs/w‹dsize.h
>

28 
	~<bôs/sigc⁄ãxt.h
>

30 #i‡
__WORDSIZE
 == 64

33 
	tgªg_t
;

36 
	#NGREG
 23

	)

39 
gªg_t
 
	tgªg£t_t
[
NGREG
];

41 #ifde‡
__USE_GNU


45 
	mREG_R8
 = 0,

46 
	#REG_R8
 
REG_R8


	)

47 
	mREG_R9
,

48 
	#REG_R9
 
REG_R9


	)

49 
	mREG_R10
,

50 
	#REG_R10
 
REG_R10


	)

51 
	mREG_R11
,

52 
	#REG_R11
 
REG_R11


	)

53 
	mREG_R12
,

54 
	#REG_R12
 
REG_R12


	)

55 
	mREG_R13
,

56 
	#REG_R13
 
REG_R13


	)

57 
	mREG_R14
,

58 
	#REG_R14
 
REG_R14


	)

59 
	mREG_R15
,

60 
	#REG_R15
 
REG_R15


	)

61 
	mREG_RDI
,

62 
	#REG_RDI
 
REG_RDI


	)

63 
	mREG_RSI
,

64 
	#REG_RSI
 
REG_RSI


	)

65 
	mREG_RBP
,

66 
	#REG_RBP
 
REG_RBP


	)

67 
	mREG_RBX
,

68 
	#REG_RBX
 
REG_RBX


	)

69 
	mREG_RDX
,

70 
	#REG_RDX
 
REG_RDX


	)

71 
	mREG_RAX
,

72 
	#REG_RAX
 
REG_RAX


	)

73 
	mREG_RCX
,

74 
	#REG_RCX
 
REG_RCX


	)

75 
	mREG_RSP
,

76 
	#REG_RSP
 
REG_RSP


	)

77 
	mREG_RIP
,

78 
	#REG_RIP
 
REG_RIP


	)

79 
	mREG_EFL
,

80 
	#REG_EFL
 
REG_EFL


	)

81 
	mREG_CSGSFS
,

82 
	#REG_CSGSFS
 
REG_CSGSFS


	)

83 
	mREG_ERR
,

84 
	#REG_ERR
 
REG_ERR


	)

85 
	mREG_TRAPNO
,

86 
	#REG_TRAPNO
 
REG_TRAPNO


	)

87 
	mREG_OLDMASK
,

88 
	#REG_OLDMASK
 
REG_OLDMASK


	)

89 
	mREG_CR2


90 
	#REG_CR2
 
REG_CR2


	)

94 
	s_libc_Âxªg


96 
	msignifiˇnd
[4];

97 
	mexp⁄ít
;

98 
	m∑ddög
[3];

101 
	s_libc_xmmªg


103 
__uöt32_t
 
	mñemít
[4];

106 
	s_libc_Â°©e


109 
__uöt16_t
 
	mcwd
;

110 
__uöt16_t
 
	mswd
;

111 
__uöt16_t
 
	m·w
;

112 
__uöt16_t
 
	mf›
;

113 
__uöt64_t
 
	mrù
;

114 
__uöt64_t
 
	mrdp
;

115 
__uöt32_t
 
	mmxc§
;

116 
__uöt32_t
 
	mmx¸_mask
;

117 
_libc_Âxªg
 
	m_°
[8];

118 
_libc_xmmªg
 
	m_xmm
[16];

119 
__uöt32_t
 
	m∑ddög
[24];

123 
_libc_Â°©e
 *
	tÂªg£t_t
;

128 
gªg£t_t
 
	mgªgs
;

130 
Âªg£t_t
 
	mÂªgs
;

131 
	m__ª£rved1
 [8];

132 } 
	tmc⁄ãxt_t
;

135 
	suc⁄ãxt


137 
	muc_Êags
;

138 
uc⁄ãxt
 *
	muc_lök
;

139 
°ack_t
 
	muc_°ack
;

140 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

141 
__sig£t_t
 
	muc_sigmask
;

142 
_libc_Â°©e
 
	m__Âªgs_mem
;

143 } 
	tuc⁄ãxt_t
;

148 
	tgªg_t
;

151 
	#NGREG
 19

	)

154 
gªg_t
 
	tgªg£t_t
[
NGREG
];

156 #ifde‡
__USE_GNU


160 
	mREG_GS
 = 0,

161 
	#REG_GS
 
REG_GS


	)

162 
	mREG_FS
,

163 
	#REG_FS
 
REG_FS


	)

164 
	mREG_ES
,

165 
	#REG_ES
 
REG_ES


	)

166 
	mREG_DS
,

167 
	#REG_DS
 
REG_DS


	)

168 
	mREG_EDI
,

169 
	#REG_EDI
 
REG_EDI


	)

170 
	mREG_ESI
,

171 
	#REG_ESI
 
REG_ESI


	)

172 
	mREG_EBP
,

173 
	#REG_EBP
 
REG_EBP


	)

174 
	mREG_ESP
,

175 
	#REG_ESP
 
REG_ESP


	)

176 
	mREG_EBX
,

177 
	#REG_EBX
 
REG_EBX


	)

178 
	mREG_EDX
,

179 
	#REG_EDX
 
REG_EDX


	)

180 
	mREG_ECX
,

181 
	#REG_ECX
 
REG_ECX


	)

182 
	mREG_EAX
,

183 
	#REG_EAX
 
REG_EAX


	)

184 
	mREG_TRAPNO
,

185 
	#REG_TRAPNO
 
REG_TRAPNO


	)

186 
	mREG_ERR
,

187 
	#REG_ERR
 
REG_ERR


	)

188 
	mREG_EIP
,

189 
	#REG_EIP
 
REG_EIP


	)

190 
	mREG_CS
,

191 
	#REG_CS
 
REG_CS


	)

192 
	mREG_EFL
,

193 
	#REG_EFL
 
REG_EFL


	)

194 
	mREG_UESP
,

195 
	#REG_UESP
 
REG_UESP


	)

196 
	mREG_SS


197 
	#REG_SS
 
REG_SS


	)

202 
	s_libc_Âªg


204 
	msignifiˇnd
[4];

205 
	mexp⁄ít
;

208 
	s_libc_Â°©e


210 
	mcw
;

211 
	msw
;

212 
	mèg
;

213 
	mùoff
;

214 
	mcs£l
;

215 
	md©aoff
;

216 
	md©a£l
;

217 
_libc_Âªg
 
	m_°
[8];

218 
	m°©us
;

222 
_libc_Â°©e
 *
	tÂªg£t_t
;

227 
gªg£t_t
 
	mgªgs
;

230 
Âªg£t_t
 
	mÂªgs
;

231 
	mﬁdmask
;

232 
	m¸2
;

233 } 
	tmc⁄ãxt_t
;

236 
	suc⁄ãxt


238 
	muc_Êags
;

239 
uc⁄ãxt
 *
	muc_lök
;

240 
°ack_t
 
	muc_°ack
;

241 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

242 
__sig£t_t
 
	muc_sigmask
;

243 
_libc_Â°©e
 
	m__Âªgs_mem
;

244 } 
	tuc⁄ãxt_t
;

	@/usr/include/time.h

23 #i‚def 
_TIME_H


25 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

26 ! 
deföed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__˛ock_t
 
	t˛ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

86 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t
 
	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed
 
__timî_t_deföed
 && \

98 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t
 
	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed
 
__time•ec_deföed
 && \

111 ((
deföed
 
_TIME_H
 && \

112 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

113 
deföed
 
__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 
__c⁄°
 *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 
__c⁄°
 *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 
__BEGIN_NAMESPACE_STD


183 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

186 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

189 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

190 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

193 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

199 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

200 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

201 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

202 
__END_NAMESPACE_STD


204 #ifde‡
__USE_XOPEN


207 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

208 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

209 
__THROW
;

212 #ifde‡
__USE_XOPEN2K8


215 
	~<xloˇÀ.h
>

217 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

218 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

219 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

220 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 #ifde‡
__USE_GNU


224 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

225 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

230 
__BEGIN_NAMESPACE_STD


233 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

238 
__END_NAMESPACE_STD


240 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


243 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

244 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

248 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

249 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

252 
__BEGIN_NAMESPACE_STD


255 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

258 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

259 
__END_NAMESPACE_STD


261 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


266 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

267 *
__ª°ri˘
 
__buf
Ë
__THROW
;

270 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

271 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
__tz«me
[2];

277 
__daylight
;

278 
__timez⁄e
;

281 #ifdef 
__USE_POSIX


283 *
tz«me
[2];

287 
	$tz£t
 (Ë
__THROW
;

290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


291 
daylight
;

292 
timez⁄e
;

295 #ifde‡
__USE_SVID


298 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

304 
	#__i¶óp
(
yór
) \

305 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

308 #ifde‡
__USE_MISC


313 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

316 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

319 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

323 #ifde‡
__USE_POSIX199309


328 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

329 
time•ec
 *
__ªmaöög
);

333 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

336 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

339 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

340 
__THROW
;

342 #ifde‡
__USE_XOPEN2K


347 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

348 
__c⁄°
 
time•ec
 *
__ªq
,

349 
time•ec
 *
__ªm
);

352 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

357 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

358 
sigevít
 *
__ª°ri˘
 
__evp
,

359 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

362 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

365 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

366 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

367 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

370 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

371 
__THROW
;

374 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

378 #ifde‡
__USE_XOPEN_EXTENDED


390 
gëd©e_îr
;

399 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

402 #ifde‡
__USE_GNU


413 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

414 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

417 
__END_DECLS


	@/usr/include/asm/unistd.h

1 #ifde‡
__i386__


2 
	~<asm/uni°d_32.h
>

4 
	~<asm/uni°d_64.h
>

	@/usr/include/bits/local_lim.h

25 #i‚de‡
NR_OPEN


26 
	#__undef_NR_OPEN


	)

28 #i‚de‡
LINK_MAX


29 
	#__undef_LINK_MAX


	)

31 #i‚de‡
OPEN_MAX


32 
	#__undef_OPEN_MAX


	)

34 #i‚de‡
ARG_MAX


35 
	#__undef_ARG_MAX


	)

39 
	~<löux/limôs.h
>

42 #ifde‡
__undef_NR_OPEN


43 #unde‡
NR_OPEN


44 #unde‡
__undef_NR_OPEN


47 #ifde‡
__undef_LINK_MAX


48 #unde‡
LINK_MAX


49 #unde‡
__undef_LINK_MAX


52 #ifde‡
__undef_OPEN_MAX


53 #unde‡
OPEN_MAX


54 #unde‡
__undef_OPEN_MAX


57 #ifde‡
__undef_ARG_MAX


58 #unde‡
ARG_MAX


59 #unde‡
__undef_ARG_MAX


63 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

65 
	#PTHREAD_KEYS_MAX
 1024

	)

68 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

70 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 
_POSIX_THREAD_DESTRUCTOR_ITERATIONS


	)

73 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

75 #unde‡
PTHREAD_THREADS_MAX


79 
	#AIO_PRIO_DELTA_MAX
 20

	)

82 
	#PTHREAD_STACK_MIN
 16384

	)

85 
	#DELAYTIMER_MAX
 2147483647

	)

88 
	#TTY_NAME_MAX
 32

	)

91 
	#LOGIN_NAME_MAX
 256

	)

94 
	#HOST_NAME_MAX
 64

	)

97 
	#MQ_PRIO_MAX
 32768

	)

100 
	#SEM_VALUE_MAX
 (2147483647)

	)

	@/usr/include/bits/predefs.h

19 #i‚de‡
_FEATURES_H


23 #i‚de‡
_PREDEFS_H


24 
	#_PREDEFS_H


	)

27 
	#__STDC_IEC_559__
 1

	)

28 
	#__STDC_IEC_559_COMPLEX__
 1

	)

	@/usr/include/bits/stdio_lim.h

19 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


23 #ifde‡
_STDIO_H


24 
	#L_tm≤am
 20

	)

25 
	#TMP_MAX
 238328

	)

26 
	#FILENAME_MAX
 4096

	)

28 #ifde‡
__USE_POSIX


29 
	#L_˘îmid
 9

	)

30 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


31 
	#L_cu£rid
 9

	)

36 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


37 #unde‡
FOPEN_MAX


38 
	#FOPEN_MAX
 16

	)

41 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


42 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/syscall.h

3 #i‚de‡
_SYSCALL_H


7 
	~<bôs/w‹dsize.h
>

9 #i‡
__WORDSIZE
 == 32

10 
	#SYS__Œ£ek
 
__NR__Œ£ek


	)

11 
	#SYS__√w£À˘
 
__NR__√w£À˘


	)

12 
	#SYS__sys˘l
 
__NR__sys˘l


	)

13 
	#SYS_ac˚ss
 
__NR_ac˚ss


	)

14 
	#SYS_ac˘
 
__NR_ac˘


	)

15 
	#SYS_add_key
 
__NR_add_key


	)

16 
	#SYS_adjtimex
 
__NR_adjtimex


	)

17 
	#SYS_afs_sysˇŒ
 
__NR_afs_sysˇŒ


	)

18 
	#SYS_Æ¨m
 
__NR_Æ¨m


	)

19 
	#SYS_bdÊush
 
__NR_bdÊush


	)

20 
	#SYS_bªak
 
__NR_bªak


	)

21 
	#SYS_brk
 
__NR_brk


	)

22 
	#SYS_ˇpgë
 
__NR_ˇpgë


	)

23 
	#SYS_ˇp£t
 
__NR_ˇp£t


	)

24 
	#SYS_chdú
 
__NR_chdú


	)

25 
	#SYS_chmod
 
__NR_chmod


	)

26 
	#SYS_chown
 
__NR_chown


	)

27 
	#SYS_chown32
 
__NR_chown32


	)

28 
	#SYS_chroŸ
 
__NR_chroŸ


	)

29 
	#SYS_˛ock_adjtime
 
__NR_˛ock_adjtime


	)

30 
	#SYS_˛ock_gëªs
 
__NR_˛ock_gëªs


	)

31 
	#SYS_˛ock_gëtime
 
__NR_˛ock_gëtime


	)

32 
	#SYS_˛ock_«no¶ìp
 
__NR_˛ock_«no¶ìp


	)

33 
	#SYS_˛ock_£âime
 
__NR_˛ock_£âime


	)

34 
	#SYS_˛⁄e
 
__NR_˛⁄e


	)

35 
	#SYS_˛o£
 
__NR_˛o£


	)

36 
	#SYS_¸ót
 
__NR_¸ót


	)

37 
	#SYS_¸óã_moduÀ
 
__NR_¸óã_moduÀ


	)

38 
	#SYS_dñëe_moduÀ
 
__NR_dñëe_moduÀ


	)

39 
	#SYS_dup
 
__NR_dup


	)

40 
	#SYS_dup2
 
__NR_dup2


	)

41 
	#SYS_dup3
 
__NR_dup3


	)

42 
	#SYS_ïﬁl_¸óã
 
__NR_ïﬁl_¸óã


	)

43 
	#SYS_ïﬁl_¸óã1
 
__NR_ïﬁl_¸óã1


	)

44 
	#SYS_ïﬁl_˘l
 
__NR_ïﬁl_˘l


	)

45 
	#SYS_ïﬁl_pwaô
 
__NR_ïﬁl_pwaô


	)

46 
	#SYS_ïﬁl_waô
 
__NR_ïﬁl_waô


	)

47 
	#SYS_evítfd
 
__NR_evítfd


	)

48 
	#SYS_evítfd2
 
__NR_evítfd2


	)

49 
	#SYS_execve
 
__NR_execve


	)

50 
	#SYS_exô
 
__NR_exô


	)

51 
	#SYS_exô_group
 
__NR_exô_group


	)

52 
	#SYS_Ác˚sßt
 
__NR_Ác˚sßt


	)

53 
	#SYS_Ádvi£64
 
__NR_Ádvi£64


	)

54 
	#SYS_Ádvi£64_64
 
__NR_Ádvi£64_64


	)

55 
	#SYS_ÁŒoˇã
 
__NR_ÁŒoˇã


	)

56 
	#SYS_ÁnŸify_öô
 
__NR_ÁnŸify_öô


	)

57 
	#SYS_ÁnŸify_m¨k
 
__NR_ÁnŸify_m¨k


	)

58 
	#SYS_fchdú
 
__NR_fchdú


	)

59 
	#SYS_fchmod
 
__NR_fchmod


	)

60 
	#SYS_fchmod©
 
__NR_fchmod©


	)

61 
	#SYS_fchown
 
__NR_fchown


	)

62 
	#SYS_fchown32
 
__NR_fchown32


	)

63 
	#SYS_fchow«t
 
__NR_fchow«t


	)

64 
	#SYS_f˙é
 
__NR_f˙é


	)

65 
	#SYS_f˙é64
 
__NR_f˙é64


	)

66 
	#SYS_fd©async
 
__NR_fd©async


	)

67 
	#SYS_fgëx©å
 
__NR_fgëx©å


	)

68 
	#SYS_Êi°x©å
 
__NR_Êi°x©å


	)

69 
	#SYS_Êock
 
__NR_Êock


	)

70 
	#SYS_f‹k
 
__NR_f‹k


	)

71 
	#SYS_‰emovex©å
 
__NR_‰emovex©å


	)

72 
	#SYS_f£tx©å
 
__NR_f£tx©å


	)

73 
	#SYS_f°©
 
__NR_f°©


	)

74 
	#SYS_f°©64
 
__NR_f°©64


	)

75 
	#SYS_f°©©64
 
__NR_f°©©64


	)

76 
	#SYS_f°©fs
 
__NR_f°©fs


	)

77 
	#SYS_f°©fs64
 
__NR_f°©fs64


	)

78 
	#SYS_fsync
 
__NR_fsync


	)

79 
	#SYS_·ime
 
__NR_·ime


	)

80 
	#SYS_·runˇã
 
__NR_·runˇã


	)

81 
	#SYS_·runˇã64
 
__NR_·runˇã64


	)

82 
	#SYS_fuãx
 
__NR_fuãx


	)

83 
	#SYS_futimeßt
 
__NR_futimeßt


	)

84 
	#SYS_gë_kî√l_syms
 
__NR_gë_kî√l_syms


	)

85 
	#SYS_gë_mempﬁicy
 
__NR_gë_mempﬁicy


	)

86 
	#SYS_gë_robu°_li°
 
__NR_gë_robu°_li°


	)

87 
	#SYS_gë_thªad_¨ó
 
__NR_gë_thªad_¨ó


	)

88 
	#SYS_gë˝u
 
__NR_gë˝u


	)

89 
	#SYS_gëcwd
 
__NR_gëcwd


	)

90 
	#SYS_gëdíts
 
__NR_gëdíts


	)

91 
	#SYS_gëdíts64
 
__NR_gëdíts64


	)

92 
	#SYS_gëegid
 
__NR_gëegid


	)

93 
	#SYS_gëegid32
 
__NR_gëegid32


	)

94 
	#SYS_gëeuid
 
__NR_gëeuid


	)

95 
	#SYS_gëeuid32
 
__NR_gëeuid32


	)

96 
	#SYS_gëgid
 
__NR_gëgid


	)

97 
	#SYS_gëgid32
 
__NR_gëgid32


	)

98 
	#SYS_gëgroups
 
__NR_gëgroups


	)

99 
	#SYS_gëgroups32
 
__NR_gëgroups32


	)

100 
	#SYS_gëôimî
 
__NR_gëôimî


	)

101 
	#SYS_gëpgid
 
__NR_gëpgid


	)

102 
	#SYS_gëpgΩ
 
__NR_gëpgΩ


	)

103 
	#SYS_gëpid
 
__NR_gëpid


	)

104 
	#SYS_gëpmsg
 
__NR_gëpmsg


	)

105 
	#SYS_gëµid
 
__NR_gëµid


	)

106 
	#SYS_gë¥i‹ôy
 
__NR_gë¥i‹ôy


	)

107 
	#SYS_gëªsgid
 
__NR_gëªsgid


	)

108 
	#SYS_gëªsgid32
 
__NR_gëªsgid32


	)

109 
	#SYS_gëªsuid
 
__NR_gëªsuid


	)

110 
	#SYS_gëªsuid32
 
__NR_gëªsuid32


	)

111 
	#SYS_gëæimô
 
__NR_gëæimô


	)

112 
	#SYS_gërußge
 
__NR_gërußge


	)

113 
	#SYS_gësid
 
__NR_gësid


	)

114 
	#SYS_gëtid
 
__NR_gëtid


	)

115 
	#SYS_gëtimeofday
 
__NR_gëtimeofday


	)

116 
	#SYS_gëuid
 
__NR_gëuid


	)

117 
	#SYS_gëuid32
 
__NR_gëuid32


	)

118 
	#SYS_gëx©å
 
__NR_gëx©å


	)

119 
	#SYS_gây
 
__NR_gây


	)

120 
	#SYS_idÀ
 
__NR_idÀ


	)

121 
	#SYS_öô_moduÀ
 
__NR_öô_moduÀ


	)

122 
	#SYS_öŸify_add_w©ch
 
__NR_öŸify_add_w©ch


	)

123 
	#SYS_öŸify_öô
 
__NR_öŸify_öô


	)

124 
	#SYS_öŸify_öô1
 
__NR_öŸify_öô1


	)

125 
	#SYS_öŸify_rm_w©ch
 
__NR_öŸify_rm_w©ch


	)

126 
	#SYS_io_ˇn˚l
 
__NR_io_ˇn˚l


	)

127 
	#SYS_io_de°roy
 
__NR_io_de°roy


	)

128 
	#SYS_io_gëevíts
 
__NR_io_gëevíts


	)

129 
	#SYS_io_£tup
 
__NR_io_£tup


	)

130 
	#SYS_io_submô
 
__NR_io_submô


	)

131 
	#SYS_io˘l
 
__NR_io˘l


	)

132 
	#SYS_i›îm
 
__NR_i›îm


	)

133 
	#SYS_i›l
 
__NR_i›l


	)

134 
	#SYS_i›rio_gë
 
__NR_i›rio_gë


	)

135 
	#SYS_i›rio_£t
 
__NR_i›rio_£t


	)

136 
	#SYS_ùc
 
__NR_ùc


	)

137 
	#SYS_kexec_lﬂd
 
__NR_kexec_lﬂd


	)

138 
	#SYS_key˘l
 
__NR_key˘l


	)

139 
	#SYS_kûl
 
__NR_kûl


	)

140 
	#SYS_lchown
 
__NR_lchown


	)

141 
	#SYS_lchown32
 
__NR_lchown32


	)

142 
	#SYS_lgëx©å
 
__NR_lgëx©å


	)

143 
	#SYS_lök
 
__NR_lök


	)

144 
	#SYS_lök©
 
__NR_lök©


	)

145 
	#SYS_li°x©å
 
__NR_li°x©å


	)

146 
	#SYS_Œi°x©å
 
__NR_Œi°x©å


	)

147 
	#SYS_lock
 
__NR_lock


	)

148 
	#SYS_lookup_dcookõ
 
__NR_lookup_dcookõ


	)

149 
	#SYS_Ãemovex©å
 
__NR_Ãemovex©å


	)

150 
	#SYS_l£ek
 
__NR_l£ek


	)

151 
	#SYS_l£tx©å
 
__NR_l£tx©å


	)

152 
	#SYS_l°©
 
__NR_l°©


	)

153 
	#SYS_l°©64
 
__NR_l°©64


	)

154 
	#SYS_madvi£
 
__NR_madvi£


	)

155 
	#SYS_madvi£1
 
__NR_madvi£1


	)

156 
	#SYS_mböd
 
__NR_mböd


	)

157 
	#SYS_migøã_∑ges
 
__NR_migøã_∑ges


	)

158 
	#SYS_möc‹e
 
__NR_möc‹e


	)

159 
	#SYS_mkdú
 
__NR_mkdú


	)

160 
	#SYS_mkdú©
 
__NR_mkdú©


	)

161 
	#SYS_mknod
 
__NR_mknod


	)

162 
	#SYS_mknod©
 
__NR_mknod©


	)

163 
	#SYS_mlock
 
__NR_mlock


	)

164 
	#SYS_mlockÆl
 
__NR_mlockÆl


	)

165 
	#SYS_mm≠
 
__NR_mm≠


	)

166 
	#SYS_mm≠2
 
__NR_mm≠2


	)

167 
	#SYS_modify_ldt
 
__NR_modify_ldt


	)

168 
	#SYS_mou¡
 
__NR_mou¡


	)

169 
	#SYS_move_∑ges
 
__NR_move_∑ges


	)

170 
	#SYS_m¥Ÿe˘
 
__NR_m¥Ÿe˘


	)

171 
	#SYS_mpx
 
__NR_mpx


	)

172 
	#SYS_mq_gë£èâr
 
__NR_mq_gë£èâr


	)

173 
	#SYS_mq_nŸify
 
__NR_mq_nŸify


	)

174 
	#SYS_mq_›í
 
__NR_mq_›í


	)

175 
	#SYS_mq_timedª˚ive
 
__NR_mq_timedª˚ive


	)

176 
	#SYS_mq_timed£nd
 
__NR_mq_timed£nd


	)

177 
	#SYS_mq_u∆ök
 
__NR_mq_u∆ök


	)

178 
	#SYS_mªm≠
 
__NR_mªm≠


	)

179 
	#SYS_msync
 
__NR_msync


	)

180 
	#SYS_mu∆ock
 
__NR_mu∆ock


	)

181 
	#SYS_mu∆ockÆl
 
__NR_mu∆ockÆl


	)

182 
	#SYS_munm≠
 
__NR_munm≠


	)

183 
	#SYS_«me_to_h™dÀ_©
 
__NR_«me_to_h™dÀ_©


	)

184 
	#SYS_«no¶ìp
 
__NR_«no¶ìp


	)

185 
	#SYS_nfs£rv˘l
 
__NR_nfs£rv˘l


	)

186 
	#SYS_ni˚
 
__NR_ni˚


	)

187 
	#SYS_ﬁdf°©
 
__NR_ﬁdf°©


	)

188 
	#SYS_ﬁdl°©
 
__NR_ﬁdl°©


	)

189 
	#SYS_ﬁdﬁdu«me
 
__NR_ﬁdﬁdu«me


	)

190 
	#SYS_ﬁd°©
 
__NR_ﬁd°©


	)

191 
	#SYS_ﬁdu«me
 
__NR_ﬁdu«me


	)

192 
	#SYS_›í
 
__NR_›í


	)

193 
	#SYS_›í_by_h™dÀ_©
 
__NR_›í_by_h™dÀ_©


	)

194 
	#SYS_›í©
 
__NR_›í©


	)

195 
	#SYS_∑u£
 
__NR_∑u£


	)

196 
	#SYS_≥rf_evít_›í
 
__NR_≥rf_evít_›í


	)

197 
	#SYS_≥rs⁄Æôy
 
__NR_≥rs⁄Æôy


	)

198 
	#SYS_pùe
 
__NR_pùe


	)

199 
	#SYS_pùe2
 
__NR_pùe2


	)

200 
	#SYS_pivŸ_roŸ
 
__NR_pivŸ_roŸ


	)

201 
	#SYS_pﬁl
 
__NR_pﬁl


	)

202 
	#SYS_µﬁl
 
__NR_µﬁl


	)

203 
	#SYS_¥˘l
 
__NR_¥˘l


	)

204 
	#SYS_¥ód64
 
__NR_¥ód64


	)

205 
	#SYS_¥ódv
 
__NR_¥ódv


	)

206 
	#SYS_¥limô64
 
__NR_¥limô64


	)

207 
	#SYS_¥o˚ss_vm_ªadv
 
__NR_¥o˚ss_vm_ªadv


	)

208 
	#SYS_¥o˚ss_vm_wrôev
 
__NR_¥o˚ss_vm_wrôev


	)

209 
	#SYS_¥of
 
__NR_¥of


	)

210 
	#SYS_¥ofû
 
__NR_¥ofû


	)

211 
	#SYS_p£À˘6
 
__NR_p£À˘6


	)

212 
	#SYS_±ø˚
 
__NR_±ø˚


	)

213 
	#SYS_puçmsg
 
__NR_puçmsg


	)

214 
	#SYS_pwrôe64
 
__NR_pwrôe64


	)

215 
	#SYS_pwrôev
 
__NR_pwrôev


	)

216 
	#SYS_quîy_moduÀ
 
__NR_quîy_moduÀ


	)

217 
	#SYS_quŸa˘l
 
__NR_quŸa˘l


	)

218 
	#SYS_ªad
 
__NR_ªad


	)

219 
	#SYS_ªadahód
 
__NR_ªadahód


	)

220 
	#SYS_ªaddú
 
__NR_ªaddú


	)

221 
	#SYS_ªadlök
 
__NR_ªadlök


	)

222 
	#SYS_ªadlök©
 
__NR_ªadlök©


	)

223 
	#SYS_ªadv
 
__NR_ªadv


	)

224 
	#SYS_ªboŸ
 
__NR_ªboŸ


	)

225 
	#SYS_ªcvmmsg
 
__NR_ªcvmmsg


	)

226 
	#SYS_ªm≠_fûe_∑ges
 
__NR_ªm≠_fûe_∑ges


	)

227 
	#SYS_ªmovex©å
 
__NR_ªmovex©å


	)

228 
	#SYS_ª«me
 
__NR_ª«me


	)

229 
	#SYS_ª«mót
 
__NR_ª«mót


	)

230 
	#SYS_ªque°_key
 
__NR_ªque°_key


	)

231 
	#SYS_ª°¨t_sysˇŒ
 
__NR_ª°¨t_sysˇŒ


	)

232 
	#SYS_rmdú
 
__NR_rmdú


	)

233 
	#SYS_π_siga˘i⁄
 
__NR_π_siga˘i⁄


	)

234 
	#SYS_π_sig≥ndög
 
__NR_π_sig≥ndög


	)

235 
	#SYS_π_sig¥ocmask
 
__NR_π_sig¥ocmask


	)

236 
	#SYS_π_sigqueueöfo
 
__NR_π_sigqueueöfo


	)

237 
	#SYS_π_sigªtu∫
 
__NR_π_sigªtu∫


	)

238 
	#SYS_π_sigsu•íd
 
__NR_π_sigsu•íd


	)

239 
	#SYS_π_sigtimedwaô
 
__NR_π_sigtimedwaô


	)

240 
	#SYS_π_tgsigqueueöfo
 
__NR_π_tgsigqueueöfo


	)

241 
	#SYS_sched_gë_¥i‹ôy_max
 
__NR_sched_gë_¥i‹ôy_max


	)

242 
	#SYS_sched_gë_¥i‹ôy_mö
 
__NR_sched_gë_¥i‹ôy_mö


	)

243 
	#SYS_sched_gëafföôy
 
__NR_sched_gëafföôy


	)

244 
	#SYS_sched_gë∑øm
 
__NR_sched_gë∑øm


	)

245 
	#SYS_sched_gëscheduÀr
 
__NR_sched_gëscheduÀr


	)

246 
	#SYS_sched_º_gë_öãrvÆ
 
__NR_sched_º_gë_öãrvÆ


	)

247 
	#SYS_sched_£èfföôy
 
__NR_sched_£èfföôy


	)

248 
	#SYS_sched_£ç¨am
 
__NR_sched_£ç¨am


	)

249 
	#SYS_sched_£tscheduÀr
 
__NR_sched_£tscheduÀr


	)

250 
	#SYS_sched_yõld
 
__NR_sched_yõld


	)

251 
	#SYS_£À˘
 
__NR_£À˘


	)

252 
	#SYS_£ndfûe
 
__NR_£ndfûe


	)

253 
	#SYS_£ndfûe64
 
__NR_£ndfûe64


	)

254 
	#SYS_£ndmmsg
 
__NR_£ndmmsg


	)

255 
	#SYS_£t_mempﬁicy
 
__NR_£t_mempﬁicy


	)

256 
	#SYS_£t_robu°_li°
 
__NR_£t_robu°_li°


	)

257 
	#SYS_£t_thªad_¨ó
 
__NR_£t_thªad_¨ó


	)

258 
	#SYS_£t_tid_addªss
 
__NR_£t_tid_addªss


	)

259 
	#SYS_£tdomaö«me
 
__NR_£tdomaö«me


	)

260 
	#SYS_£tfsgid
 
__NR_£tfsgid


	)

261 
	#SYS_£tfsgid32
 
__NR_£tfsgid32


	)

262 
	#SYS_£tfsuid
 
__NR_£tfsuid


	)

263 
	#SYS_£tfsuid32
 
__NR_£tfsuid32


	)

264 
	#SYS_£tgid
 
__NR_£tgid


	)

265 
	#SYS_£tgid32
 
__NR_£tgid32


	)

266 
	#SYS_£tgroups
 
__NR_£tgroups


	)

267 
	#SYS_£tgroups32
 
__NR_£tgroups32


	)

268 
	#SYS_£tho°«me
 
__NR_£tho°«me


	)

269 
	#SYS_£tôimî
 
__NR_£tôimî


	)

270 
	#SYS_£äs
 
__NR_£äs


	)

271 
	#SYS_£çgid
 
__NR_£çgid


	)

272 
	#SYS_£çri‹ôy
 
__NR_£çri‹ôy


	)

273 
	#SYS_£åegid
 
__NR_£åegid


	)

274 
	#SYS_£åegid32
 
__NR_£åegid32


	)

275 
	#SYS_£åesgid
 
__NR_£åesgid


	)

276 
	#SYS_£åesgid32
 
__NR_£åesgid32


	)

277 
	#SYS_£åesuid
 
__NR_£åesuid


	)

278 
	#SYS_£åesuid32
 
__NR_£åesuid32


	)

279 
	#SYS_£åeuid
 
__NR_£åeuid


	)

280 
	#SYS_£åeuid32
 
__NR_£åeuid32


	)

281 
	#SYS_£ålimô
 
__NR_£ålimô


	)

282 
	#SYS_£tsid
 
__NR_£tsid


	)

283 
	#SYS_£âimeofday
 
__NR_£âimeofday


	)

284 
	#SYS_£tuid
 
__NR_£tuid


	)

285 
	#SYS_£tuid32
 
__NR_£tuid32


	)

286 
	#SYS_£tx©å
 
__NR_£tx©å


	)

287 
	#SYS_sgëmask
 
__NR_sgëmask


	)

288 
	#SYS_siga˘i⁄
 
__NR_siga˘i⁄


	)

289 
	#SYS_sigÆt°ack
 
__NR_sigÆt°ack


	)

290 
	#SYS_sig«l
 
__NR_sig«l


	)

291 
	#SYS_sig«lfd
 
__NR_sig«lfd


	)

292 
	#SYS_sig«lfd4
 
__NR_sig«lfd4


	)

293 
	#SYS_sig≥ndög
 
__NR_sig≥ndög


	)

294 
	#SYS_sig¥ocmask
 
__NR_sig¥ocmask


	)

295 
	#SYS_sigªtu∫
 
__NR_sigªtu∫


	)

296 
	#SYS_sigsu•íd
 
__NR_sigsu•íd


	)

297 
	#SYS_sockëˇŒ
 
__NR_sockëˇŒ


	)

298 
	#SYS_•li˚
 
__NR_•li˚


	)

299 
	#SYS_s£tmask
 
__NR_s£tmask


	)

300 
	#SYS_°©
 
__NR_°©


	)

301 
	#SYS_°©64
 
__NR_°©64


	)

302 
	#SYS_°©fs
 
__NR_°©fs


	)

303 
	#SYS_°©fs64
 
__NR_°©fs64


	)

304 
	#SYS_°ime
 
__NR_°ime


	)

305 
	#SYS_°ty
 
__NR_°ty


	)

306 
	#SYS_sw≠off
 
__NR_sw≠off


	)

307 
	#SYS_sw≠⁄
 
__NR_sw≠⁄


	)

308 
	#SYS_symlök
 
__NR_symlök


	)

309 
	#SYS_symlök©
 
__NR_symlök©


	)

310 
	#SYS_sync
 
__NR_sync


	)

311 
	#SYS_sync_fûe_ønge
 
__NR_sync_fûe_ønge


	)

312 
	#SYS_syncfs
 
__NR_syncfs


	)

313 
	#SYS_sysfs
 
__NR_sysfs


	)

314 
	#SYS_sysöfo
 
__NR_sysöfo


	)

315 
	#SYS_sy¶og
 
__NR_sy¶og


	)

316 
	#SYS_ãe
 
__NR_ãe


	)

317 
	#SYS_tgkûl
 
__NR_tgkûl


	)

318 
	#SYS_time
 
__NR_time


	)

319 
	#SYS_timî_¸óã
 
__NR_timî_¸óã


	)

320 
	#SYS_timî_dñëe
 
__NR_timî_dñëe


	)

321 
	#SYS_timî_gëovîrun
 
__NR_timî_gëovîrun


	)

322 
	#SYS_timî_gëtime
 
__NR_timî_gëtime


	)

323 
	#SYS_timî_£âime
 
__NR_timî_£âime


	)

324 
	#SYS_timîfd_¸óã
 
__NR_timîfd_¸óã


	)

325 
	#SYS_timîfd_gëtime
 
__NR_timîfd_gëtime


	)

326 
	#SYS_timîfd_£âime
 
__NR_timîfd_£âime


	)

327 
	#SYS_times
 
__NR_times


	)

328 
	#SYS_tkûl
 
__NR_tkûl


	)

329 
	#SYS_åunˇã
 
__NR_åunˇã


	)

330 
	#SYS_åunˇã64
 
__NR_åunˇã64


	)

331 
	#SYS_ugëæimô
 
__NR_ugëæimô


	)

332 
	#SYS_ulimô
 
__NR_ulimô


	)

333 
	#SYS_umask
 
__NR_umask


	)

334 
	#SYS_umou¡
 
__NR_umou¡


	)

335 
	#SYS_umou¡2
 
__NR_umou¡2


	)

336 
	#SYS_u«me
 
__NR_u«me


	)

337 
	#SYS_u∆ök
 
__NR_u∆ök


	)

338 
	#SYS_u∆ök©
 
__NR_u∆ök©


	)

339 
	#SYS_unsh¨e
 
__NR_unsh¨e


	)

340 
	#SYS_u£lib
 
__NR_u£lib


	)

341 
	#SYS_u°©
 
__NR_u°©


	)

342 
	#SYS_utime
 
__NR_utime


	)

343 
	#SYS_utimíßt
 
__NR_utimíßt


	)

344 
	#SYS_utimes
 
__NR_utimes


	)

345 
	#SYS_vf‹k
 
__NR_vf‹k


	)

346 
	#SYS_vh™gup
 
__NR_vh™gup


	)

347 
	#SYS_vm86
 
__NR_vm86


	)

348 
	#SYS_vm86ﬁd
 
__NR_vm86ﬁd


	)

349 
	#SYS_vm•li˚
 
__NR_vm•li˚


	)

350 
	#SYS_v£rvî
 
__NR_v£rvî


	)

351 
	#SYS_waô4
 
__NR_waô4


	)

352 
	#SYS_waôid
 
__NR_waôid


	)

353 
	#SYS_waôpid
 
__NR_waôpid


	)

354 
	#SYS_wrôe
 
__NR_wrôe


	)

355 
	#SYS_wrôev
 
__NR_wrôev


	)

357 #i‡
__WORDSIZE
 == 64

358 
	#SYS__sys˘l
 
__NR__sys˘l


	)

359 
	#SYS_ac˚±
 
__NR_ac˚±


	)

360 
	#SYS_ac˚±4
 
__NR_ac˚±4


	)

361 
	#SYS_ac˚ss
 
__NR_ac˚ss


	)

362 
	#SYS_ac˘
 
__NR_ac˘


	)

363 
	#SYS_add_key
 
__NR_add_key


	)

364 
	#SYS_adjtimex
 
__NR_adjtimex


	)

365 
	#SYS_afs_sysˇŒ
 
__NR_afs_sysˇŒ


	)

366 
	#SYS_Æ¨m
 
__NR_Æ¨m


	)

367 
	#SYS_¨ch_¥˘l
 
__NR_¨ch_¥˘l


	)

368 
	#SYS_böd
 
__NR_böd


	)

369 
	#SYS_brk
 
__NR_brk


	)

370 
	#SYS_ˇpgë
 
__NR_ˇpgë


	)

371 
	#SYS_ˇp£t
 
__NR_ˇp£t


	)

372 
	#SYS_chdú
 
__NR_chdú


	)

373 
	#SYS_chmod
 
__NR_chmod


	)

374 
	#SYS_chown
 
__NR_chown


	)

375 
	#SYS_chroŸ
 
__NR_chroŸ


	)

376 
	#SYS_˛ock_adjtime
 
__NR_˛ock_adjtime


	)

377 
	#SYS_˛ock_gëªs
 
__NR_˛ock_gëªs


	)

378 
	#SYS_˛ock_gëtime
 
__NR_˛ock_gëtime


	)

379 
	#SYS_˛ock_«no¶ìp
 
__NR_˛ock_«no¶ìp


	)

380 
	#SYS_˛ock_£âime
 
__NR_˛ock_£âime


	)

381 
	#SYS_˛⁄e
 
__NR_˛⁄e


	)

382 
	#SYS_˛o£
 
__NR_˛o£


	)

383 
	#SYS_c⁄√˘
 
__NR_c⁄√˘


	)

384 
	#SYS_¸ót
 
__NR_¸ót


	)

385 
	#SYS_¸óã_moduÀ
 
__NR_¸óã_moduÀ


	)

386 
	#SYS_dñëe_moduÀ
 
__NR_dñëe_moduÀ


	)

387 
	#SYS_dup
 
__NR_dup


	)

388 
	#SYS_dup2
 
__NR_dup2


	)

389 
	#SYS_dup3
 
__NR_dup3


	)

390 
	#SYS_ïﬁl_¸óã
 
__NR_ïﬁl_¸óã


	)

391 
	#SYS_ïﬁl_¸óã1
 
__NR_ïﬁl_¸óã1


	)

392 
	#SYS_ïﬁl_˘l
 
__NR_ïﬁl_˘l


	)

393 
	#SYS_ïﬁl_˘l_ﬁd
 
__NR_ïﬁl_˘l_ﬁd


	)

394 
	#SYS_ïﬁl_pwaô
 
__NR_ïﬁl_pwaô


	)

395 
	#SYS_ïﬁl_waô
 
__NR_ïﬁl_waô


	)

396 
	#SYS_ïﬁl_waô_ﬁd
 
__NR_ïﬁl_waô_ﬁd


	)

397 
	#SYS_evítfd
 
__NR_evítfd


	)

398 
	#SYS_evítfd2
 
__NR_evítfd2


	)

399 
	#SYS_execve
 
__NR_execve


	)

400 
	#SYS_exô
 
__NR_exô


	)

401 
	#SYS_exô_group
 
__NR_exô_group


	)

402 
	#SYS_Ác˚sßt
 
__NR_Ác˚sßt


	)

403 
	#SYS_Ádvi£64
 
__NR_Ádvi£64


	)

404 
	#SYS_ÁŒoˇã
 
__NR_ÁŒoˇã


	)

405 
	#SYS_ÁnŸify_öô
 
__NR_ÁnŸify_öô


	)

406 
	#SYS_ÁnŸify_m¨k
 
__NR_ÁnŸify_m¨k


	)

407 
	#SYS_fchdú
 
__NR_fchdú


	)

408 
	#SYS_fchmod
 
__NR_fchmod


	)

409 
	#SYS_fchmod©
 
__NR_fchmod©


	)

410 
	#SYS_fchown
 
__NR_fchown


	)

411 
	#SYS_fchow«t
 
__NR_fchow«t


	)

412 
	#SYS_f˙é
 
__NR_f˙é


	)

413 
	#SYS_fd©async
 
__NR_fd©async


	)

414 
	#SYS_fgëx©å
 
__NR_fgëx©å


	)

415 
	#SYS_Êi°x©å
 
__NR_Êi°x©å


	)

416 
	#SYS_Êock
 
__NR_Êock


	)

417 
	#SYS_f‹k
 
__NR_f‹k


	)

418 
	#SYS_‰emovex©å
 
__NR_‰emovex©å


	)

419 
	#SYS_f£tx©å
 
__NR_f£tx©å


	)

420 
	#SYS_f°©
 
__NR_f°©


	)

421 
	#SYS_f°©fs
 
__NR_f°©fs


	)

422 
	#SYS_fsync
 
__NR_fsync


	)

423 
	#SYS_·runˇã
 
__NR_·runˇã


	)

424 
	#SYS_fuãx
 
__NR_fuãx


	)

425 
	#SYS_futimeßt
 
__NR_futimeßt


	)

426 
	#SYS_gë_kî√l_syms
 
__NR_gë_kî√l_syms


	)

427 
	#SYS_gë_mempﬁicy
 
__NR_gë_mempﬁicy


	)

428 
	#SYS_gë_robu°_li°
 
__NR_gë_robu°_li°


	)

429 
	#SYS_gë_thªad_¨ó
 
__NR_gë_thªad_¨ó


	)

430 
	#SYS_gë˝u
 
__NR_gë˝u


	)

431 
	#SYS_gëcwd
 
__NR_gëcwd


	)

432 
	#SYS_gëdíts
 
__NR_gëdíts


	)

433 
	#SYS_gëdíts64
 
__NR_gëdíts64


	)

434 
	#SYS_gëegid
 
__NR_gëegid


	)

435 
	#SYS_gëeuid
 
__NR_gëeuid


	)

436 
	#SYS_gëgid
 
__NR_gëgid


	)

437 
	#SYS_gëgroups
 
__NR_gëgroups


	)

438 
	#SYS_gëôimî
 
__NR_gëôimî


	)

439 
	#SYS_gë≥î«me
 
__NR_gë≥î«me


	)

440 
	#SYS_gëpgid
 
__NR_gëpgid


	)

441 
	#SYS_gëpgΩ
 
__NR_gëpgΩ


	)

442 
	#SYS_gëpid
 
__NR_gëpid


	)

443 
	#SYS_gëpmsg
 
__NR_gëpmsg


	)

444 
	#SYS_gëµid
 
__NR_gëµid


	)

445 
	#SYS_gë¥i‹ôy
 
__NR_gë¥i‹ôy


	)

446 
	#SYS_gëªsgid
 
__NR_gëªsgid


	)

447 
	#SYS_gëªsuid
 
__NR_gëªsuid


	)

448 
	#SYS_gëæimô
 
__NR_gëæimô


	)

449 
	#SYS_gërußge
 
__NR_gërußge


	)

450 
	#SYS_gësid
 
__NR_gësid


	)

451 
	#SYS_gësock«me
 
__NR_gësock«me


	)

452 
	#SYS_gësock›t
 
__NR_gësock›t


	)

453 
	#SYS_gëtid
 
__NR_gëtid


	)

454 
	#SYS_gëtimeofday
 
__NR_gëtimeofday


	)

455 
	#SYS_gëuid
 
__NR_gëuid


	)

456 
	#SYS_gëx©å
 
__NR_gëx©å


	)

457 
	#SYS_öô_moduÀ
 
__NR_öô_moduÀ


	)

458 
	#SYS_öŸify_add_w©ch
 
__NR_öŸify_add_w©ch


	)

459 
	#SYS_öŸify_öô
 
__NR_öŸify_öô


	)

460 
	#SYS_öŸify_öô1
 
__NR_öŸify_öô1


	)

461 
	#SYS_öŸify_rm_w©ch
 
__NR_öŸify_rm_w©ch


	)

462 
	#SYS_io_ˇn˚l
 
__NR_io_ˇn˚l


	)

463 
	#SYS_io_de°roy
 
__NR_io_de°roy


	)

464 
	#SYS_io_gëevíts
 
__NR_io_gëevíts


	)

465 
	#SYS_io_£tup
 
__NR_io_£tup


	)

466 
	#SYS_io_submô
 
__NR_io_submô


	)

467 
	#SYS_io˘l
 
__NR_io˘l


	)

468 
	#SYS_i›îm
 
__NR_i›îm


	)

469 
	#SYS_i›l
 
__NR_i›l


	)

470 
	#SYS_i›rio_gë
 
__NR_i›rio_gë


	)

471 
	#SYS_i›rio_£t
 
__NR_i›rio_£t


	)

472 
	#SYS_kexec_lﬂd
 
__NR_kexec_lﬂd


	)

473 
	#SYS_key˘l
 
__NR_key˘l


	)

474 
	#SYS_kûl
 
__NR_kûl


	)

475 
	#SYS_lchown
 
__NR_lchown


	)

476 
	#SYS_lgëx©å
 
__NR_lgëx©å


	)

477 
	#SYS_lök
 
__NR_lök


	)

478 
	#SYS_lök©
 
__NR_lök©


	)

479 
	#SYS_li°í
 
__NR_li°í


	)

480 
	#SYS_li°x©å
 
__NR_li°x©å


	)

481 
	#SYS_Œi°x©å
 
__NR_Œi°x©å


	)

482 
	#SYS_lookup_dcookõ
 
__NR_lookup_dcookõ


	)

483 
	#SYS_Ãemovex©å
 
__NR_Ãemovex©å


	)

484 
	#SYS_l£ek
 
__NR_l£ek


	)

485 
	#SYS_l£tx©å
 
__NR_l£tx©å


	)

486 
	#SYS_l°©
 
__NR_l°©


	)

487 
	#SYS_madvi£
 
__NR_madvi£


	)

488 
	#SYS_mböd
 
__NR_mböd


	)

489 
	#SYS_migøã_∑ges
 
__NR_migøã_∑ges


	)

490 
	#SYS_möc‹e
 
__NR_möc‹e


	)

491 
	#SYS_mkdú
 
__NR_mkdú


	)

492 
	#SYS_mkdú©
 
__NR_mkdú©


	)

493 
	#SYS_mknod
 
__NR_mknod


	)

494 
	#SYS_mknod©
 
__NR_mknod©


	)

495 
	#SYS_mlock
 
__NR_mlock


	)

496 
	#SYS_mlockÆl
 
__NR_mlockÆl


	)

497 
	#SYS_mm≠
 
__NR_mm≠


	)

498 
	#SYS_modify_ldt
 
__NR_modify_ldt


	)

499 
	#SYS_mou¡
 
__NR_mou¡


	)

500 
	#SYS_move_∑ges
 
__NR_move_∑ges


	)

501 
	#SYS_m¥Ÿe˘
 
__NR_m¥Ÿe˘


	)

502 
	#SYS_mq_gë£èâr
 
__NR_mq_gë£èâr


	)

503 
	#SYS_mq_nŸify
 
__NR_mq_nŸify


	)

504 
	#SYS_mq_›í
 
__NR_mq_›í


	)

505 
	#SYS_mq_timedª˚ive
 
__NR_mq_timedª˚ive


	)

506 
	#SYS_mq_timed£nd
 
__NR_mq_timed£nd


	)

507 
	#SYS_mq_u∆ök
 
__NR_mq_u∆ök


	)

508 
	#SYS_mªm≠
 
__NR_mªm≠


	)

509 
	#SYS_msg˘l
 
__NR_msg˘l


	)

510 
	#SYS_msggë
 
__NR_msggë


	)

511 
	#SYS_msgrcv
 
__NR_msgrcv


	)

512 
	#SYS_msg¢d
 
__NR_msg¢d


	)

513 
	#SYS_msync
 
__NR_msync


	)

514 
	#SYS_mu∆ock
 
__NR_mu∆ock


	)

515 
	#SYS_mu∆ockÆl
 
__NR_mu∆ockÆl


	)

516 
	#SYS_munm≠
 
__NR_munm≠


	)

517 
	#SYS_«me_to_h™dÀ_©
 
__NR_«me_to_h™dÀ_©


	)

518 
	#SYS_«no¶ìp
 
__NR_«no¶ìp


	)

519 
	#SYS_√wf°©©
 
__NR_√wf°©©


	)

520 
	#SYS_nfs£rv˘l
 
__NR_nfs£rv˘l


	)

521 
	#SYS_›í
 
__NR_›í


	)

522 
	#SYS_›í_by_h™dÀ_©
 
__NR_›í_by_h™dÀ_©


	)

523 
	#SYS_›í©
 
__NR_›í©


	)

524 
	#SYS_∑u£
 
__NR_∑u£


	)

525 
	#SYS_≥rf_evít_›í
 
__NR_≥rf_evít_›í


	)

526 
	#SYS_≥rs⁄Æôy
 
__NR_≥rs⁄Æôy


	)

527 
	#SYS_pùe
 
__NR_pùe


	)

528 
	#SYS_pùe2
 
__NR_pùe2


	)

529 
	#SYS_pivŸ_roŸ
 
__NR_pivŸ_roŸ


	)

530 
	#SYS_pﬁl
 
__NR_pﬁl


	)

531 
	#SYS_µﬁl
 
__NR_µﬁl


	)

532 
	#SYS_¥˘l
 
__NR_¥˘l


	)

533 
	#SYS_¥ód64
 
__NR_¥ód64


	)

534 
	#SYS_¥ódv
 
__NR_¥ódv


	)

535 
	#SYS_¥limô64
 
__NR_¥limô64


	)

536 
	#SYS_¥o˚ss_vm_ªadv
 
__NR_¥o˚ss_vm_ªadv


	)

537 
	#SYS_¥o˚ss_vm_wrôev
 
__NR_¥o˚ss_vm_wrôev


	)

538 
	#SYS_p£À˘6
 
__NR_p£À˘6


	)

539 
	#SYS_±ø˚
 
__NR_±ø˚


	)

540 
	#SYS_puçmsg
 
__NR_puçmsg


	)

541 
	#SYS_pwrôe64
 
__NR_pwrôe64


	)

542 
	#SYS_pwrôev
 
__NR_pwrôev


	)

543 
	#SYS_quîy_moduÀ
 
__NR_quîy_moduÀ


	)

544 
	#SYS_quŸa˘l
 
__NR_quŸa˘l


	)

545 
	#SYS_ªad
 
__NR_ªad


	)

546 
	#SYS_ªadahód
 
__NR_ªadahód


	)

547 
	#SYS_ªadlök
 
__NR_ªadlök


	)

548 
	#SYS_ªadlök©
 
__NR_ªadlök©


	)

549 
	#SYS_ªadv
 
__NR_ªadv


	)

550 
	#SYS_ªboŸ
 
__NR_ªboŸ


	)

551 
	#SYS_ªcv‰om
 
__NR_ªcv‰om


	)

552 
	#SYS_ªcvmmsg
 
__NR_ªcvmmsg


	)

553 
	#SYS_ªcvmsg
 
__NR_ªcvmsg


	)

554 
	#SYS_ªm≠_fûe_∑ges
 
__NR_ªm≠_fûe_∑ges


	)

555 
	#SYS_ªmovex©å
 
__NR_ªmovex©å


	)

556 
	#SYS_ª«me
 
__NR_ª«me


	)

557 
	#SYS_ª«mót
 
__NR_ª«mót


	)

558 
	#SYS_ªque°_key
 
__NR_ªque°_key


	)

559 
	#SYS_ª°¨t_sysˇŒ
 
__NR_ª°¨t_sysˇŒ


	)

560 
	#SYS_rmdú
 
__NR_rmdú


	)

561 
	#SYS_π_siga˘i⁄
 
__NR_π_siga˘i⁄


	)

562 
	#SYS_π_sig≥ndög
 
__NR_π_sig≥ndög


	)

563 
	#SYS_π_sig¥ocmask
 
__NR_π_sig¥ocmask


	)

564 
	#SYS_π_sigqueueöfo
 
__NR_π_sigqueueöfo


	)

565 
	#SYS_π_sigªtu∫
 
__NR_π_sigªtu∫


	)

566 
	#SYS_π_sigsu•íd
 
__NR_π_sigsu•íd


	)

567 
	#SYS_π_sigtimedwaô
 
__NR_π_sigtimedwaô


	)

568 
	#SYS_π_tgsigqueueöfo
 
__NR_π_tgsigqueueöfo


	)

569 
	#SYS_sched_gë_¥i‹ôy_max
 
__NR_sched_gë_¥i‹ôy_max


	)

570 
	#SYS_sched_gë_¥i‹ôy_mö
 
__NR_sched_gë_¥i‹ôy_mö


	)

571 
	#SYS_sched_gëafföôy
 
__NR_sched_gëafföôy


	)

572 
	#SYS_sched_gë∑øm
 
__NR_sched_gë∑øm


	)

573 
	#SYS_sched_gëscheduÀr
 
__NR_sched_gëscheduÀr


	)

574 
	#SYS_sched_º_gë_öãrvÆ
 
__NR_sched_º_gë_öãrvÆ


	)

575 
	#SYS_sched_£èfföôy
 
__NR_sched_£èfföôy


	)

576 
	#SYS_sched_£ç¨am
 
__NR_sched_£ç¨am


	)

577 
	#SYS_sched_£tscheduÀr
 
__NR_sched_£tscheduÀr


	)

578 
	#SYS_sched_yõld
 
__NR_sched_yõld


	)

579 
	#SYS_£curôy
 
__NR_£curôy


	)

580 
	#SYS_£À˘
 
__NR_£À˘


	)

581 
	#SYS_£m˘l
 
__NR_£m˘l


	)

582 
	#SYS_£mgë
 
__NR_£mgë


	)

583 
	#SYS_£m›
 
__NR_£m›


	)

584 
	#SYS_£mtimed›
 
__NR_£mtimed›


	)

585 
	#SYS_£ndfûe
 
__NR_£ndfûe


	)

586 
	#SYS_£ndmmsg
 
__NR_£ndmmsg


	)

587 
	#SYS_£ndmsg
 
__NR_£ndmsg


	)

588 
	#SYS_£ndto
 
__NR_£ndto


	)

589 
	#SYS_£t_mempﬁicy
 
__NR_£t_mempﬁicy


	)

590 
	#SYS_£t_robu°_li°
 
__NR_£t_robu°_li°


	)

591 
	#SYS_£t_thªad_¨ó
 
__NR_£t_thªad_¨ó


	)

592 
	#SYS_£t_tid_addªss
 
__NR_£t_tid_addªss


	)

593 
	#SYS_£tdomaö«me
 
__NR_£tdomaö«me


	)

594 
	#SYS_£tfsgid
 
__NR_£tfsgid


	)

595 
	#SYS_£tfsuid
 
__NR_£tfsuid


	)

596 
	#SYS_£tgid
 
__NR_£tgid


	)

597 
	#SYS_£tgroups
 
__NR_£tgroups


	)

598 
	#SYS_£tho°«me
 
__NR_£tho°«me


	)

599 
	#SYS_£tôimî
 
__NR_£tôimî


	)

600 
	#SYS_£äs
 
__NR_£äs


	)

601 
	#SYS_£çgid
 
__NR_£çgid


	)

602 
	#SYS_£çri‹ôy
 
__NR_£çri‹ôy


	)

603 
	#SYS_£åegid
 
__NR_£åegid


	)

604 
	#SYS_£åesgid
 
__NR_£åesgid


	)

605 
	#SYS_£åesuid
 
__NR_£åesuid


	)

606 
	#SYS_£åeuid
 
__NR_£åeuid


	)

607 
	#SYS_£ålimô
 
__NR_£ålimô


	)

608 
	#SYS_£tsid
 
__NR_£tsid


	)

609 
	#SYS_£tsock›t
 
__NR_£tsock›t


	)

610 
	#SYS_£âimeofday
 
__NR_£âimeofday


	)

611 
	#SYS_£tuid
 
__NR_£tuid


	)

612 
	#SYS_£tx©å
 
__NR_£tx©å


	)

613 
	#SYS_shm©
 
__NR_shm©


	)

614 
	#SYS_shm˘l
 
__NR_shm˘l


	)

615 
	#SYS_shmdt
 
__NR_shmdt


	)

616 
	#SYS_shmgë
 
__NR_shmgë


	)

617 
	#SYS_shutdown
 
__NR_shutdown


	)

618 
	#SYS_sigÆt°ack
 
__NR_sigÆt°ack


	)

619 
	#SYS_sig«lfd
 
__NR_sig«lfd


	)

620 
	#SYS_sig«lfd4
 
__NR_sig«lfd4


	)

621 
	#SYS_sockë
 
__NR_sockë


	)

622 
	#SYS_sockë∑ú
 
__NR_sockë∑ú


	)

623 
	#SYS_•li˚
 
__NR_•li˚


	)

624 
	#SYS_°©
 
__NR_°©


	)

625 
	#SYS_°©fs
 
__NR_°©fs


	)

626 
	#SYS_sw≠off
 
__NR_sw≠off


	)

627 
	#SYS_sw≠⁄
 
__NR_sw≠⁄


	)

628 
	#SYS_symlök
 
__NR_symlök


	)

629 
	#SYS_symlök©
 
__NR_symlök©


	)

630 
	#SYS_sync
 
__NR_sync


	)

631 
	#SYS_sync_fûe_ønge
 
__NR_sync_fûe_ønge


	)

632 
	#SYS_syncfs
 
__NR_syncfs


	)

633 
	#SYS_sysfs
 
__NR_sysfs


	)

634 
	#SYS_sysöfo
 
__NR_sysöfo


	)

635 
	#SYS_sy¶og
 
__NR_sy¶og


	)

636 
	#SYS_ãe
 
__NR_ãe


	)

637 
	#SYS_tgkûl
 
__NR_tgkûl


	)

638 
	#SYS_time
 
__NR_time


	)

639 
	#SYS_timî_¸óã
 
__NR_timî_¸óã


	)

640 
	#SYS_timî_dñëe
 
__NR_timî_dñëe


	)

641 
	#SYS_timî_gëovîrun
 
__NR_timî_gëovîrun


	)

642 
	#SYS_timî_gëtime
 
__NR_timî_gëtime


	)

643 
	#SYS_timî_£âime
 
__NR_timî_£âime


	)

644 
	#SYS_timîfd_¸óã
 
__NR_timîfd_¸óã


	)

645 
	#SYS_timîfd_gëtime
 
__NR_timîfd_gëtime


	)

646 
	#SYS_timîfd_£âime
 
__NR_timîfd_£âime


	)

647 
	#SYS_times
 
__NR_times


	)

648 
	#SYS_tkûl
 
__NR_tkûl


	)

649 
	#SYS_åunˇã
 
__NR_åunˇã


	)

650 
	#SYS_tuxˇŒ
 
__NR_tuxˇŒ


	)

651 
	#SYS_umask
 
__NR_umask


	)

652 
	#SYS_umou¡2
 
__NR_umou¡2


	)

653 
	#SYS_u«me
 
__NR_u«me


	)

654 
	#SYS_u∆ök
 
__NR_u∆ök


	)

655 
	#SYS_u∆ök©
 
__NR_u∆ök©


	)

656 
	#SYS_unsh¨e
 
__NR_unsh¨e


	)

657 
	#SYS_u£lib
 
__NR_u£lib


	)

658 
	#SYS_u°©
 
__NR_u°©


	)

659 
	#SYS_utime
 
__NR_utime


	)

660 
	#SYS_utimíßt
 
__NR_utimíßt


	)

661 
	#SYS_utimes
 
__NR_utimes


	)

662 
	#SYS_vf‹k
 
__NR_vf‹k


	)

663 
	#SYS_vh™gup
 
__NR_vh™gup


	)

664 
	#SYS_vm•li˚
 
__NR_vm•li˚


	)

665 
	#SYS_v£rvî
 
__NR_v£rvî


	)

666 
	#SYS_waô4
 
__NR_waô4


	)

667 
	#SYS_waôid
 
__NR_waôid


	)

668 
	#SYS_wrôe
 
__NR_wrôe


	)

669 
	#SYS_wrôev
 
__NR_wrôev


	)

	@/usr/include/bits/time.h

24 #i‡
deföed
 
__√ed_timevÆ
 || deföed 
__USE_GNU


25 #i‚de‡
_STRUCT_TIMEVAL


26 
	#_STRUCT_TIMEVAL
 1

	)

27 
	~<bôs/ty≥s.h
>

31 
	stimevÆ


33 
__time_t
 
	mtv_£c
;

34 
__su£c⁄ds_t
 
	mtv_u£c
;

39 #i‚de‡
__√ed_timevÆ


40 #i‚de‡
_BITS_TIME_H


41 
	#_BITS_TIME_H
 1

	)

49 
	#CLOCKS_PER_SEC
 1000000l

	)

51 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


54 
	~<bôs/ty≥s.h
>

55 
__sysc⁄f
 ();

56 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

59 #ifde‡
__USE_POSIX199309


61 
	#CLOCK_REALTIME
 0

	)

63 
	#CLOCK_MONOTONIC
 1

	)

65 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

67 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

69 
	#CLOCK_MONOTONIC_RAW
 4

	)

71 
	#CLOCK_REALTIME_COARSE
 5

	)

73 
	#CLOCK_MONOTONIC_COARSE
 6

	)

75 
	#CLOCK_BOOTTIME
 7

	)

77 
	#CLOCK_REALTIME_ALARM
 8

	)

79 
	#CLOCK_BOOTTIME_ALARM
 9

	)

82 
	#TIMER_ABSTIME
 1

	)

85 #ifde‡
__USE_GNU


86 
	~<bôs/timex.h
>

88 
__BEGIN_DECLS


91 
	$˛ock_adjtime
 (
__˛ockid_t
 
__˛ock_id
, 
timex
 *
__utx
Ë
__THROW
;

93 
__END_DECLS


99 #unde‡
__√ed_timevÆ


	@/usr/include/bits/typesizes.h

20 #i‚de‡
_BITS_TYPES_H


24 #i‚def 
_BITS_TYPESIZES_H


25 
	#_BITS_TYPESIZES_H
 1

	)

30 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

31 
	#__UID_T_TYPE
 
__U32_TYPE


	)

32 
	#__GID_T_TYPE
 
__U32_TYPE


	)

33 
	#__INO_T_TYPE
 
__ULONGWORD_TYPE


	)

34 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

35 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

36 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

37 
	#__OFF_T_TYPE
 
__SLONGWORD_TYPE


	)

38 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

39 
	#__PID_T_TYPE
 
__S32_TYPE


	)

40 
	#__RLIM_T_TYPE
 
__ULONGWORD_TYPE


	)

41 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

42 
	#__BLKCNT_T_TYPE
 
__SLONGWORD_TYPE


	)

43 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

44 
	#__FSBLKCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

45 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

46 
	#__FSFILCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

47 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

48 
	#__ID_T_TYPE
 
__U32_TYPE


	)

49 
	#__CLOCK_T_TYPE
 
__SLONGWORD_TYPE


	)

50 
	#__TIME_T_TYPE
 
__SLONGWORD_TYPE


	)

51 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

52 
	#__SUSECONDS_T_TYPE
 
__SLONGWORD_TYPE


	)

53 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

54 
	#__SWBLK_T_TYPE
 
__SLONGWORD_TYPE


	)

55 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

56 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

57 
	#__TIMER_T_TYPE
 *

	)

58 
	#__BLKSIZE_T_TYPE
 
__SLONGWORD_TYPE


	)

59 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

60 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

63 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/wchar.h

20 #i‚de‡
_BITS_WCHAR_H


21 
	#_BITS_WCHAR_H
 1

	)

24 #ifde‡
__WCHAR_MAX__


25 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

27 
	#__WCHAR_MAX
 (2147483647)

	)

32 #ifde‡
__WCHAR_UNSIGNED__


33 
	#__WCHAR_MIN
 
L
'\0'

	)

37 #ñi‡
L
'\0' - 1 > 0

38 
	#__WCHAR_MIN
 
L
'\0'

	)

40 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/gnu/stubs.h

4 
	~<bôs/w‹dsize.h
>

6 #i‡
__WORDSIZE
 == 32

7 
	~<gnu/°ubs-32.h
>

8 #ñi‡
__WORDSIZE
 == 64

9 
	~<gnu/°ubs-64.h
>

	@/usr/include/sys/cdefs.h

20 #i‚def 
_SYS_CDEFS_H


21 
	#_SYS_CDEFS_H
 1

	)

24 #i‚de‡
_FEATURES_H


25 
	~<„©uªs.h
>

31 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


36 #unde‡
__P


37 #unde‡
__PMT


39 #ifde‡
__GNUC__


43 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


44 
	#__LEAF
 , 
__Àaf__


	)

45 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

47 
	#__LEAF


	)

48 
	#__LEAF_ATTR


	)

56 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

57 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

58 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

59 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
fct

61 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

62 
	#__THROW
 
	`throw
 ()

	)

63 
	#__THROWNL
 
	`throw
 ()

	)

64 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
	`throw
 ()

	)

66 
	#__THROW


	)

67 
	#__THROWNL


	)

68 
	#__NTH
(
f˘
Ë
	)
fct

74 
	#__ölöe


	)

76 
	#__THROW


	)

77 
	#__THROWNL


	)

78 
	#__NTH
(
f˘
Ë
	)
fct

80 
	#__c⁄°
 c⁄°

	)

81 
	#__sig√d
 sig√d

	)

82 
	#__vﬁ©ûe
 vﬁ©ûe

	)

88 
	#__P
(
¨gs
Ë
	)
args

89 
	#__PMT
(
¨gs
Ë
	)
args

94 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

95 
	#__STRING
(
x
Ë#x

	)

98 
	#__±r_t
 *

	)

99 
	#__l⁄g_doubÀ_t
 

	)

103 #ifdef 
__˝lu•lus


104 
	#__BEGIN_DECLS
 "C" {

	)

105 
	#__END_DECLS
 }

	)

107 
	#__BEGIN_DECLS


	)

108 
	#__END_DECLS


	)

117 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


118 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

119 
	#__END_NAMESPACE_STD
 }

	)

120 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

121 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

122 
	#__END_NAMESPACE_C99
 }

	)

123 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

128 
	#__BEGIN_NAMESPACE_STD


	)

129 
	#__END_NAMESPACE_STD


	)

130 
	#__USING_NAMESPACE_STD
(
«me
)

	)

131 
	#__BEGIN_NAMESPACE_C99


	)

132 
	#__END_NAMESPACE_C99


	)

133 
	#__USING_NAMESPACE_C99
(
«me
)

	)

138 #i‚de‡
__BOUNDED_POINTERS__


139 
	#__bounded


	)

140 
	#__unbounded


	)

141 
	#__±rvÆue


	)

146 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

147 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

149 #i‡
__GNUC_PREREQ
 (4,3)

150 
	#__w¨nde˛
(
«me
, 
msg
) \

151 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

152 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

153 
	#__îr‹de˛
(
«me
, 
msg
) \

154 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

156 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

157 
	#__w¨«âr
(
msg
)

	)

158 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

162 #i‡
__GNUC_PREREQ
 (2,97)

164 
	#__Êex¨r
 []

	)

166 #ifde‡
__GNUC__


167 
	#__Êex¨r
 [0]

	)

169 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

170 
	#__Êex¨r
 []

	)

173 
	#__Êex¨r
 [1]

	)

189 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

191 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

192 #ifde‡
__˝lu•lus


193 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

194 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

195 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

196 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

198 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

199 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

200 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

201 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

203 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

204 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

217 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

218 
	#__©åibuã__
(
xyz
Ë

	)

224 #i‡
__GNUC_PREREQ
 (2,96)

225 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

227 
	#__©åibuã_mÆloc__


	)

233 #i‡
__GNUC_PREREQ
 (2,96)

234 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

236 
	#__©åibuã_puª__


	)

240 #i‡
__GNUC_PREREQ
 (2,5)

241 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

243 
	#__©åibuã_c⁄°__


	)

249 #i‡
__GNUC_PREREQ
 (3,1)

250 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

251 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

253 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

254 
	#__©åibuã_noölöe__


	)

258 #i‡
__GNUC_PREREQ
 (3,2)

259 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

261 
	#__©åibuã_dïªˇãd__


	)

270 #i‡
__GNUC_PREREQ
 (2,8)

271 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

273 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

280 #i‡
__GNUC_PREREQ
 (2,97)

281 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

282 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

284 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

289 #i‡
__GNUC_PREREQ
 (3,3)

290 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

292 
	#__n⁄nuŒ
(
∑øms
)

	)

297 #i‡
__GNUC_PREREQ
 (3,4)

298 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

299 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

300 #i‡
__USE_FORTIFY_LEVEL
 > 0

301 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

304 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

306 #i‚de‡
__wur


307 
	#__wur


	)

311 #i‡
__GNUC_PREREQ
 (3,2)

312 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

314 
	#__Æways_ölöe
 
__ölöe


	)

319 #i‡!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3)

320 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


321 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

322 #i‡
__GNUC_PREREQ
 (4,3)

323 
	#__exã∫_Æways_ölöe
 \

324 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
, 
__¨tificül__
))

	)

326 
	#__exã∫_Æways_ölöe
 \

327 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

330 
	#__exã∫_ölöe
 
__ölöe


	)

331 #i‡
__GNUC_PREREQ
 (4,3)

332 
	#__exã∫_Æways_ölöe
 \

333 
__Æways_ölöe
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

335 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

342 #i‡
__GNUC_PREREQ
 (4,3)

343 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

344 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

351 #i‡!
__GNUC_PREREQ
 (2,8)

352 
	#__exãnsi⁄__


	)

356 #i‡!
__GNUC_PREREQ
 (2,92)

357 
	#__ª°ri˘


	)

363 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


364 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

366 #ifde‡
__GNUC__


367 
	#__ª°ri˘_¨r


	)

369 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

370 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

373 
	#__ª°ri˘_¨r


	)

378 
	~<bôs/w‹dsize.h
>

380 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


381 
	#__LDBL_COMPAT
 1

	)

382 #ifde‡
__REDIRECT


383 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

384 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

385 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

386 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

387 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

388 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

389 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

390 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

391 
	#__LDBL_REDIR_DECL
(
«me
) \

392 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

393 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

394 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

395 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

396 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

399 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


400 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

401 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

402 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

403 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

404 
	#__LDBL_REDIR_DECL
(
«me
)

	)

405 #ifde‡
__REDIRECT


406 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

407 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

408 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/asm/unistd_32.h

1 #i‚de‡
_ASM_X86_UNISTD_32_H


2 
	#_ASM_X86_UNISTD_32_H


	)

8 
	#__NR_ª°¨t_sysˇŒ
 0

	)

9 
	#__NR_exô
 1

	)

10 
	#__NR_f‹k
 2

	)

11 
	#__NR_ªad
 3

	)

12 
	#__NR_wrôe
 4

	)

13 
	#__NR_›í
 5

	)

14 
	#__NR_˛o£
 6

	)

15 
	#__NR_waôpid
 7

	)

16 
	#__NR_¸ót
 8

	)

17 
	#__NR_lök
 9

	)

18 
	#__NR_u∆ök
 10

	)

19 
	#__NR_execve
 11

	)

20 
	#__NR_chdú
 12

	)

21 
	#__NR_time
 13

	)

22 
	#__NR_mknod
 14

	)

23 
	#__NR_chmod
 15

	)

24 
	#__NR_lchown
 16

	)

25 
	#__NR_bªak
 17

	)

26 
	#__NR_ﬁd°©
 18

	)

27 
	#__NR_l£ek
 19

	)

28 
	#__NR_gëpid
 20

	)

29 
	#__NR_mou¡
 21

	)

30 
	#__NR_umou¡
 22

	)

31 
	#__NR_£tuid
 23

	)

32 
	#__NR_gëuid
 24

	)

33 
	#__NR_°ime
 25

	)

34 
	#__NR_±ø˚
 26

	)

35 
	#__NR_Æ¨m
 27

	)

36 
	#__NR_ﬁdf°©
 28

	)

37 
	#__NR_∑u£
 29

	)

38 
	#__NR_utime
 30

	)

39 
	#__NR_°ty
 31

	)

40 
	#__NR_gây
 32

	)

41 
	#__NR_ac˚ss
 33

	)

42 
	#__NR_ni˚
 34

	)

43 
	#__NR_·ime
 35

	)

44 
	#__NR_sync
 36

	)

45 
	#__NR_kûl
 37

	)

46 
	#__NR_ª«me
 38

	)

47 
	#__NR_mkdú
 39

	)

48 
	#__NR_rmdú
 40

	)

49 
	#__NR_dup
 41

	)

50 
	#__NR_pùe
 42

	)

51 
	#__NR_times
 43

	)

52 
	#__NR_¥of
 44

	)

53 
	#__NR_brk
 45

	)

54 
	#__NR_£tgid
 46

	)

55 
	#__NR_gëgid
 47

	)

56 
	#__NR_sig«l
 48

	)

57 
	#__NR_gëeuid
 49

	)

58 
	#__NR_gëegid
 50

	)

59 
	#__NR_ac˘
 51

	)

60 
	#__NR_umou¡2
 52

	)

61 
	#__NR_lock
 53

	)

62 
	#__NR_io˘l
 54

	)

63 
	#__NR_f˙é
 55

	)

64 
	#__NR_mpx
 56

	)

65 
	#__NR_£çgid
 57

	)

66 
	#__NR_ulimô
 58

	)

67 
	#__NR_ﬁdﬁdu«me
 59

	)

68 
	#__NR_umask
 60

	)

69 
	#__NR_chroŸ
 61

	)

70 
	#__NR_u°©
 62

	)

71 
	#__NR_dup2
 63

	)

72 
	#__NR_gëµid
 64

	)

73 
	#__NR_gëpgΩ
 65

	)

74 
	#__NR_£tsid
 66

	)

75 
	#__NR_siga˘i⁄
 67

	)

76 
	#__NR_sgëmask
 68

	)

77 
	#__NR_s£tmask
 69

	)

78 
	#__NR_£åeuid
 70

	)

79 
	#__NR_£åegid
 71

	)

80 
	#__NR_sigsu•íd
 72

	)

81 
	#__NR_sig≥ndög
 73

	)

82 
	#__NR_£tho°«me
 74

	)

83 
	#__NR_£ålimô
 75

	)

84 
	#__NR_gëæimô
 76

	)

85 
	#__NR_gërußge
 77

	)

86 
	#__NR_gëtimeofday
 78

	)

87 
	#__NR_£âimeofday
 79

	)

88 
	#__NR_gëgroups
 80

	)

89 
	#__NR_£tgroups
 81

	)

90 
	#__NR_£À˘
 82

	)

91 
	#__NR_symlök
 83

	)

92 
	#__NR_ﬁdl°©
 84

	)

93 
	#__NR_ªadlök
 85

	)

94 
	#__NR_u£lib
 86

	)

95 
	#__NR_sw≠⁄
 87

	)

96 
	#__NR_ªboŸ
 88

	)

97 
	#__NR_ªaddú
 89

	)

98 
	#__NR_mm≠
 90

	)

99 
	#__NR_munm≠
 91

	)

100 
	#__NR_åunˇã
 92

	)

101 
	#__NR_·runˇã
 93

	)

102 
	#__NR_fchmod
 94

	)

103 
	#__NR_fchown
 95

	)

104 
	#__NR_gë¥i‹ôy
 96

	)

105 
	#__NR_£çri‹ôy
 97

	)

106 
	#__NR_¥ofû
 98

	)

107 
	#__NR_°©fs
 99

	)

108 
	#__NR_f°©fs
 100

	)

109 
	#__NR_i›îm
 101

	)

110 
	#__NR_sockëˇŒ
 102

	)

111 
	#__NR_sy¶og
 103

	)

112 
	#__NR_£tôimî
 104

	)

113 
	#__NR_gëôimî
 105

	)

114 
	#__NR_°©
 106

	)

115 
	#__NR_l°©
 107

	)

116 
	#__NR_f°©
 108

	)

117 
	#__NR_ﬁdu«me
 109

	)

118 
	#__NR_i›l
 110

	)

119 
	#__NR_vh™gup
 111

	)

120 
	#__NR_idÀ
 112

	)

121 
	#__NR_vm86ﬁd
 113

	)

122 
	#__NR_waô4
 114

	)

123 
	#__NR_sw≠off
 115

	)

124 
	#__NR_sysöfo
 116

	)

125 
	#__NR_ùc
 117

	)

126 
	#__NR_fsync
 118

	)

127 
	#__NR_sigªtu∫
 119

	)

128 
	#__NR_˛⁄e
 120

	)

129 
	#__NR_£tdomaö«me
 121

	)

130 
	#__NR_u«me
 122

	)

131 
	#__NR_modify_ldt
 123

	)

132 
	#__NR_adjtimex
 124

	)

133 
	#__NR_m¥Ÿe˘
 125

	)

134 
	#__NR_sig¥ocmask
 126

	)

135 
	#__NR_¸óã_moduÀ
 127

	)

136 
	#__NR_öô_moduÀ
 128

	)

137 
	#__NR_dñëe_moduÀ
 129

	)

138 
	#__NR_gë_kî√l_syms
 130

	)

139 
	#__NR_quŸa˘l
 131

	)

140 
	#__NR_gëpgid
 132

	)

141 
	#__NR_fchdú
 133

	)

142 
	#__NR_bdÊush
 134

	)

143 
	#__NR_sysfs
 135

	)

144 
	#__NR_≥rs⁄Æôy
 136

	)

145 
	#__NR_afs_sysˇŒ
 137

	)

146 
	#__NR_£tfsuid
 138

	)

147 
	#__NR_£tfsgid
 139

	)

148 
	#__NR__Œ£ek
 140

	)

149 
	#__NR_gëdíts
 141

	)

150 
	#__NR__√w£À˘
 142

	)

151 
	#__NR_Êock
 143

	)

152 
	#__NR_msync
 144

	)

153 
	#__NR_ªadv
 145

	)

154 
	#__NR_wrôev
 146

	)

155 
	#__NR_gësid
 147

	)

156 
	#__NR_fd©async
 148

	)

157 
	#__NR__sys˘l
 149

	)

158 
	#__NR_mlock
 150

	)

159 
	#__NR_mu∆ock
 151

	)

160 
	#__NR_mlockÆl
 152

	)

161 
	#__NR_mu∆ockÆl
 153

	)

162 
	#__NR_sched_£ç¨am
 154

	)

163 
	#__NR_sched_gë∑øm
 155

	)

164 
	#__NR_sched_£tscheduÀr
 156

	)

165 
	#__NR_sched_gëscheduÀr
 157

	)

166 
	#__NR_sched_yõld
 158

	)

167 
	#__NR_sched_gë_¥i‹ôy_max
 159

	)

168 
	#__NR_sched_gë_¥i‹ôy_mö
 160

	)

169 
	#__NR_sched_º_gë_öãrvÆ
 161

	)

170 
	#__NR_«no¶ìp
 162

	)

171 
	#__NR_mªm≠
 163

	)

172 
	#__NR_£åesuid
 164

	)

173 
	#__NR_gëªsuid
 165

	)

174 
	#__NR_vm86
 166

	)

175 
	#__NR_quîy_moduÀ
 167

	)

176 
	#__NR_pﬁl
 168

	)

177 
	#__NR_nfs£rv˘l
 169

	)

178 
	#__NR_£åesgid
 170

	)

179 
	#__NR_gëªsgid
 171

	)

180 
	#__NR_¥˘l
 172

	)

181 
	#__NR_π_sigªtu∫
 173

	)

182 
	#__NR_π_siga˘i⁄
 174

	)

183 
	#__NR_π_sig¥ocmask
 175

	)

184 
	#__NR_π_sig≥ndög
 176

	)

185 
	#__NR_π_sigtimedwaô
 177

	)

186 
	#__NR_π_sigqueueöfo
 178

	)

187 
	#__NR_π_sigsu•íd
 179

	)

188 
	#__NR_¥ód64
 180

	)

189 
	#__NR_pwrôe64
 181

	)

190 
	#__NR_chown
 182

	)

191 
	#__NR_gëcwd
 183

	)

192 
	#__NR_ˇpgë
 184

	)

193 
	#__NR_ˇp£t
 185

	)

194 
	#__NR_sigÆt°ack
 186

	)

195 
	#__NR_£ndfûe
 187

	)

196 
	#__NR_gëpmsg
 188

	)

197 
	#__NR_puçmsg
 189

	)

198 
	#__NR_vf‹k
 190

	)

199 
	#__NR_ugëæimô
 191

	)

200 
	#__NR_mm≠2
 192

	)

201 
	#__NR_åunˇã64
 193

	)

202 
	#__NR_·runˇã64
 194

	)

203 
	#__NR_°©64
 195

	)

204 
	#__NR_l°©64
 196

	)

205 
	#__NR_f°©64
 197

	)

206 
	#__NR_lchown32
 198

	)

207 
	#__NR_gëuid32
 199

	)

208 
	#__NR_gëgid32
 200

	)

209 
	#__NR_gëeuid32
 201

	)

210 
	#__NR_gëegid32
 202

	)

211 
	#__NR_£åeuid32
 203

	)

212 
	#__NR_£åegid32
 204

	)

213 
	#__NR_gëgroups32
 205

	)

214 
	#__NR_£tgroups32
 206

	)

215 
	#__NR_fchown32
 207

	)

216 
	#__NR_£åesuid32
 208

	)

217 
	#__NR_gëªsuid32
 209

	)

218 
	#__NR_£åesgid32
 210

	)

219 
	#__NR_gëªsgid32
 211

	)

220 
	#__NR_chown32
 212

	)

221 
	#__NR_£tuid32
 213

	)

222 
	#__NR_£tgid32
 214

	)

223 
	#__NR_£tfsuid32
 215

	)

224 
	#__NR_£tfsgid32
 216

	)

225 
	#__NR_pivŸ_roŸ
 217

	)

226 
	#__NR_möc‹e
 218

	)

227 
	#__NR_madvi£
 219

	)

228 
	#__NR_madvi£1
 219

	)

229 
	#__NR_gëdíts64
 220

	)

230 
	#__NR_f˙é64
 221

	)

232 
	#__NR_gëtid
 224

	)

233 
	#__NR_ªadahód
 225

	)

234 
	#__NR_£tx©å
 226

	)

235 
	#__NR_l£tx©å
 227

	)

236 
	#__NR_f£tx©å
 228

	)

237 
	#__NR_gëx©å
 229

	)

238 
	#__NR_lgëx©å
 230

	)

239 
	#__NR_fgëx©å
 231

	)

240 
	#__NR_li°x©å
 232

	)

241 
	#__NR_Œi°x©å
 233

	)

242 
	#__NR_Êi°x©å
 234

	)

243 
	#__NR_ªmovex©å
 235

	)

244 
	#__NR_Ãemovex©å
 236

	)

245 
	#__NR_‰emovex©å
 237

	)

246 
	#__NR_tkûl
 238

	)

247 
	#__NR_£ndfûe64
 239

	)

248 
	#__NR_fuãx
 240

	)

249 
	#__NR_sched_£èfföôy
 241

	)

250 
	#__NR_sched_gëafföôy
 242

	)

251 
	#__NR_£t_thªad_¨ó
 243

	)

252 
	#__NR_gë_thªad_¨ó
 244

	)

253 
	#__NR_io_£tup
 245

	)

254 
	#__NR_io_de°roy
 246

	)

255 
	#__NR_io_gëevíts
 247

	)

256 
	#__NR_io_submô
 248

	)

257 
	#__NR_io_ˇn˚l
 249

	)

258 
	#__NR_Ádvi£64
 250

	)

260 
	#__NR_exô_group
 252

	)

261 
	#__NR_lookup_dcookõ
 253

	)

262 
	#__NR_ïﬁl_¸óã
 254

	)

263 
	#__NR_ïﬁl_˘l
 255

	)

264 
	#__NR_ïﬁl_waô
 256

	)

265 
	#__NR_ªm≠_fûe_∑ges
 257

	)

266 
	#__NR_£t_tid_addªss
 258

	)

267 
	#__NR_timî_¸óã
 259

	)

268 
	#__NR_timî_£âime
 (
__NR_timî_¸óã
+1)

	)

269 
	#__NR_timî_gëtime
 (
__NR_timî_¸óã
+2)

	)

270 
	#__NR_timî_gëovîrun
 (
__NR_timî_¸óã
+3)

	)

271 
	#__NR_timî_dñëe
 (
__NR_timî_¸óã
+4)

	)

272 
	#__NR_˛ock_£âime
 (
__NR_timî_¸óã
+5)

	)

273 
	#__NR_˛ock_gëtime
 (
__NR_timî_¸óã
+6)

	)

274 
	#__NR_˛ock_gëªs
 (
__NR_timî_¸óã
+7)

	)

275 
	#__NR_˛ock_«no¶ìp
 (
__NR_timî_¸óã
+8)

	)

276 
	#__NR_°©fs64
 268

	)

277 
	#__NR_f°©fs64
 269

	)

278 
	#__NR_tgkûl
 270

	)

279 
	#__NR_utimes
 271

	)

280 
	#__NR_Ádvi£64_64
 272

	)

281 
	#__NR_v£rvî
 273

	)

282 
	#__NR_mböd
 274

	)

283 
	#__NR_gë_mempﬁicy
 275

	)

284 
	#__NR_£t_mempﬁicy
 276

	)

285 
	#__NR_mq_›í
 277

	)

286 
	#__NR_mq_u∆ök
 (
__NR_mq_›í
+1)

	)

287 
	#__NR_mq_timed£nd
 (
__NR_mq_›í
+2)

	)

288 
	#__NR_mq_timedª˚ive
 (
__NR_mq_›í
+3)

	)

289 
	#__NR_mq_nŸify
 (
__NR_mq_›í
+4)

	)

290 
	#__NR_mq_gë£èâr
 (
__NR_mq_›í
+5)

	)

291 
	#__NR_kexec_lﬂd
 283

	)

292 
	#__NR_waôid
 284

	)

294 
	#__NR_add_key
 286

	)

295 
	#__NR_ªque°_key
 287

	)

296 
	#__NR_key˘l
 288

	)

297 
	#__NR_i›rio_£t
 289

	)

298 
	#__NR_i›rio_gë
 290

	)

299 
	#__NR_öŸify_öô
 291

	)

300 
	#__NR_öŸify_add_w©ch
 292

	)

301 
	#__NR_öŸify_rm_w©ch
 293

	)

302 
	#__NR_migøã_∑ges
 294

	)

303 
	#__NR_›í©
 295

	)

304 
	#__NR_mkdú©
 296

	)

305 
	#__NR_mknod©
 297

	)

306 
	#__NR_fchow«t
 298

	)

307 
	#__NR_futimeßt
 299

	)

308 
	#__NR_f°©©64
 300

	)

309 
	#__NR_u∆ök©
 301

	)

310 
	#__NR_ª«mót
 302

	)

311 
	#__NR_lök©
 303

	)

312 
	#__NR_symlök©
 304

	)

313 
	#__NR_ªadlök©
 305

	)

314 
	#__NR_fchmod©
 306

	)

315 
	#__NR_Ác˚sßt
 307

	)

316 
	#__NR_p£À˘6
 308

	)

317 
	#__NR_µﬁl
 309

	)

318 
	#__NR_unsh¨e
 310

	)

319 
	#__NR_£t_robu°_li°
 311

	)

320 
	#__NR_gë_robu°_li°
 312

	)

321 
	#__NR_•li˚
 313

	)

322 
	#__NR_sync_fûe_ønge
 314

	)

323 
	#__NR_ãe
 315

	)

324 
	#__NR_vm•li˚
 316

	)

325 
	#__NR_move_∑ges
 317

	)

326 
	#__NR_gë˝u
 318

	)

327 
	#__NR_ïﬁl_pwaô
 319

	)

328 
	#__NR_utimíßt
 320

	)

329 
	#__NR_sig«lfd
 321

	)

330 
	#__NR_timîfd_¸óã
 322

	)

331 
	#__NR_evítfd
 323

	)

332 
	#__NR_ÁŒoˇã
 324

	)

333 
	#__NR_timîfd_£âime
 325

	)

334 
	#__NR_timîfd_gëtime
 326

	)

335 
	#__NR_sig«lfd4
 327

	)

336 
	#__NR_evítfd2
 328

	)

337 
	#__NR_ïﬁl_¸óã1
 329

	)

338 
	#__NR_dup3
 330

	)

339 
	#__NR_pùe2
 331

	)

340 
	#__NR_öŸify_öô1
 332

	)

341 
	#__NR_¥ódv
 333

	)

342 
	#__NR_pwrôev
 334

	)

343 
	#__NR_π_tgsigqueueöfo
 335

	)

344 
	#__NR_≥rf_evít_›í
 336

	)

345 
	#__NR_ªcvmmsg
 337

	)

346 
	#__NR_ÁnŸify_öô
 338

	)

347 
	#__NR_ÁnŸify_m¨k
 339

	)

348 
	#__NR_¥limô64
 340

	)

349 
	#__NR_«me_to_h™dÀ_©
 341

	)

350 
	#__NR_›í_by_h™dÀ_©
 342

	)

351 
	#__NR_˛ock_adjtime
 343

	)

352 
	#__NR_syncfs
 344

	)

353 
	#__NR_£ndmmsg
 345

	)

354 
	#__NR_£äs
 346

	)

355 
	#__NR_¥o˚ss_vm_ªadv
 347

	)

356 
	#__NR_¥o˚ss_vm_wrôev
 348

	)

	@/usr/include/asm/unistd_64.h

1 #i‚de‡
_ASM_X86_UNISTD_64_H


2 
	#_ASM_X86_UNISTD_64_H


	)

4 #i‚de‡
__SYSCALL


5 
	#__SYSCALL
(
a
, 
b
)

	)

15 
	#__NR_ªad
 0

	)

16 
	$__SYSCALL
(
__NR_ªad
, 
sys_ªad
)

17 
	#__NR_wrôe
 1

	)

18 
	$__SYSCALL
(
__NR_wrôe
, 
sys_wrôe
)

19 
	#__NR_›í
 2

	)

20 
	$__SYSCALL
(
__NR_›í
, 
sys_›í
)

21 
	#__NR_˛o£
 3

	)

22 
	$__SYSCALL
(
__NR_˛o£
, 
sys_˛o£
)

23 
	#__NR_°©
 4

	)

24 
	$__SYSCALL
(
__NR_°©
, 
sys_√w°©
)

25 
	#__NR_f°©
 5

	)

26 
	$__SYSCALL
(
__NR_f°©
, 
sys_√wf°©
)

27 
	#__NR_l°©
 6

	)

28 
	$__SYSCALL
(
__NR_l°©
, 
sys_√wl°©
)

29 
	#__NR_pﬁl
 7

	)

30 
	$__SYSCALL
(
__NR_pﬁl
, 
sys_pﬁl
)

32 
	#__NR_l£ek
 8

	)

33 
	$__SYSCALL
(
__NR_l£ek
, 
sys_l£ek
)

34 
	#__NR_mm≠
 9

	)

35 
	$__SYSCALL
(
__NR_mm≠
, 
sys_mm≠
)

36 
	#__NR_m¥Ÿe˘
 10

	)

37 
	$__SYSCALL
(
__NR_m¥Ÿe˘
, 
sys_m¥Ÿe˘
)

38 
	#__NR_munm≠
 11

	)

39 
	$__SYSCALL
(
__NR_munm≠
, 
sys_munm≠
)

40 
	#__NR_brk
 12

	)

41 
	$__SYSCALL
(
__NR_brk
, 
sys_brk
)

42 
	#__NR_π_siga˘i⁄
 13

	)

43 
	$__SYSCALL
(
__NR_π_siga˘i⁄
, 
sys_π_siga˘i⁄
)

44 
	#__NR_π_sig¥ocmask
 14

	)

45 
	$__SYSCALL
(
__NR_π_sig¥ocmask
, 
sys_π_sig¥ocmask
)

46 
	#__NR_π_sigªtu∫
 15

	)

47 
	$__SYSCALL
(
__NR_π_sigªtu∫
, 
°ub_π_sigªtu∫
)

49 
	#__NR_io˘l
 16

	)

50 
	$__SYSCALL
(
__NR_io˘l
, 
sys_io˘l
)

51 
	#__NR_¥ód64
 17

	)

52 
	$__SYSCALL
(
__NR_¥ód64
, 
sys_¥ód64
)

53 
	#__NR_pwrôe64
 18

	)

54 
	$__SYSCALL
(
__NR_pwrôe64
, 
sys_pwrôe64
)

55 
	#__NR_ªadv
 19

	)

56 
	$__SYSCALL
(
__NR_ªadv
, 
sys_ªadv
)

57 
	#__NR_wrôev
 20

	)

58 
	$__SYSCALL
(
__NR_wrôev
, 
sys_wrôev
)

59 
	#__NR_ac˚ss
 21

	)

60 
	$__SYSCALL
(
__NR_ac˚ss
, 
sys_ac˚ss
)

61 
	#__NR_pùe
 22

	)

62 
	$__SYSCALL
(
__NR_pùe
, 
sys_pùe
)

63 
	#__NR_£À˘
 23

	)

64 
	$__SYSCALL
(
__NR_£À˘
, 
sys_£À˘
)

66 
	#__NR_sched_yõld
 24

	)

67 
	$__SYSCALL
(
__NR_sched_yõld
, 
sys_sched_yõld
)

68 
	#__NR_mªm≠
 25

	)

69 
	$__SYSCALL
(
__NR_mªm≠
, 
sys_mªm≠
)

70 
	#__NR_msync
 26

	)

71 
	$__SYSCALL
(
__NR_msync
, 
sys_msync
)

72 
	#__NR_möc‹e
 27

	)

73 
	$__SYSCALL
(
__NR_möc‹e
, 
sys_möc‹e
)

74 
	#__NR_madvi£
 28

	)

75 
	$__SYSCALL
(
__NR_madvi£
, 
sys_madvi£
)

76 
	#__NR_shmgë
 29

	)

77 
	$__SYSCALL
(
__NR_shmgë
, 
sys_shmgë
)

78 
	#__NR_shm©
 30

	)

79 
	$__SYSCALL
(
__NR_shm©
, 
sys_shm©
)

80 
	#__NR_shm˘l
 31

	)

81 
	$__SYSCALL
(
__NR_shm˘l
, 
sys_shm˘l
)

83 
	#__NR_dup
 32

	)

84 
	$__SYSCALL
(
__NR_dup
, 
sys_dup
)

85 
	#__NR_dup2
 33

	)

86 
	$__SYSCALL
(
__NR_dup2
, 
sys_dup2
)

87 
	#__NR_∑u£
 34

	)

88 
	$__SYSCALL
(
__NR_∑u£
, 
sys_∑u£
)

89 
	#__NR_«no¶ìp
 35

	)

90 
	$__SYSCALL
(
__NR_«no¶ìp
, 
sys_«no¶ìp
)

91 
	#__NR_gëôimî
 36

	)

92 
	$__SYSCALL
(
__NR_gëôimî
, 
sys_gëôimî
)

93 
	#__NR_Æ¨m
 37

	)

94 
	$__SYSCALL
(
__NR_Æ¨m
, 
sys_Æ¨m
)

95 
	#__NR_£tôimî
 38

	)

96 
	$__SYSCALL
(
__NR_£tôimî
, 
sys_£tôimî
)

97 
	#__NR_gëpid
 39

	)

98 
	$__SYSCALL
(
__NR_gëpid
, 
sys_gëpid
)

100 
	#__NR_£ndfûe
 40

	)

101 
	$__SYSCALL
(
__NR_£ndfûe
, 
sys_£ndfûe64
)

102 
	#__NR_sockë
 41

	)

103 
	$__SYSCALL
(
__NR_sockë
, 
sys_sockë
)

104 
	#__NR_c⁄√˘
 42

	)

105 
	$__SYSCALL
(
__NR_c⁄√˘
, 
sys_c⁄√˘
)

106 
	#__NR_ac˚±
 43

	)

107 
	$__SYSCALL
(
__NR_ac˚±
, 
sys_ac˚±
)

108 
	#__NR_£ndto
 44

	)

109 
	$__SYSCALL
(
__NR_£ndto
, 
sys_£ndto
)

110 
	#__NR_ªcv‰om
 45

	)

111 
	$__SYSCALL
(
__NR_ªcv‰om
, 
sys_ªcv‰om
)

112 
	#__NR_£ndmsg
 46

	)

113 
	$__SYSCALL
(
__NR_£ndmsg
, 
sys_£ndmsg
)

114 
	#__NR_ªcvmsg
 47

	)

115 
	$__SYSCALL
(
__NR_ªcvmsg
, 
sys_ªcvmsg
)

117 
	#__NR_shutdown
 48

	)

118 
	$__SYSCALL
(
__NR_shutdown
, 
sys_shutdown
)

119 
	#__NR_böd
 49

	)

120 
	$__SYSCALL
(
__NR_böd
, 
sys_böd
)

121 
	#__NR_li°í
 50

	)

122 
	$__SYSCALL
(
__NR_li°í
, 
sys_li°í
)

123 
	#__NR_gësock«me
 51

	)

124 
	$__SYSCALL
(
__NR_gësock«me
, 
sys_gësock«me
)

125 
	#__NR_gë≥î«me
 52

	)

126 
	$__SYSCALL
(
__NR_gë≥î«me
, 
sys_gë≥î«me
)

127 
	#__NR_sockë∑ú
 53

	)

128 
	$__SYSCALL
(
__NR_sockë∑ú
, 
sys_sockë∑ú
)

129 
	#__NR_£tsock›t
 54

	)

130 
	$__SYSCALL
(
__NR_£tsock›t
, 
sys_£tsock›t
)

131 
	#__NR_gësock›t
 55

	)

132 
	$__SYSCALL
(
__NR_gësock›t
, 
sys_gësock›t
)

134 
	#__NR_˛⁄e
 56

	)

135 
	$__SYSCALL
(
__NR_˛⁄e
, 
°ub_˛⁄e
)

136 
	#__NR_f‹k
 57

	)

137 
	$__SYSCALL
(
__NR_f‹k
, 
°ub_f‹k
)

138 
	#__NR_vf‹k
 58

	)

139 
	$__SYSCALL
(
__NR_vf‹k
, 
°ub_vf‹k
)

140 
	#__NR_execve
 59

	)

141 
	$__SYSCALL
(
__NR_execve
, 
°ub_execve
)

142 
	#__NR_exô
 60

	)

143 
	$__SYSCALL
(
__NR_exô
, 
sys_exô
)

144 
	#__NR_waô4
 61

	)

145 
	$__SYSCALL
(
__NR_waô4
, 
sys_waô4
)

146 
	#__NR_kûl
 62

	)

147 
	$__SYSCALL
(
__NR_kûl
, 
sys_kûl
)

148 
	#__NR_u«me
 63

	)

149 
	$__SYSCALL
(
__NR_u«me
, 
sys_√wu«me
)

151 
	#__NR_£mgë
 64

	)

152 
	$__SYSCALL
(
__NR_£mgë
, 
sys_£mgë
)

153 
	#__NR_£m›
 65

	)

154 
	$__SYSCALL
(
__NR_£m›
, 
sys_£m›
)

155 
	#__NR_£m˘l
 66

	)

156 
	$__SYSCALL
(
__NR_£m˘l
, 
sys_£m˘l
)

157 
	#__NR_shmdt
 67

	)

158 
	$__SYSCALL
(
__NR_shmdt
, 
sys_shmdt
)

159 
	#__NR_msggë
 68

	)

160 
	$__SYSCALL
(
__NR_msggë
, 
sys_msggë
)

161 
	#__NR_msg¢d
 69

	)

162 
	$__SYSCALL
(
__NR_msg¢d
, 
sys_msg¢d
)

163 
	#__NR_msgrcv
 70

	)

164 
	$__SYSCALL
(
__NR_msgrcv
, 
sys_msgrcv
)

165 
	#__NR_msg˘l
 71

	)

166 
	$__SYSCALL
(
__NR_msg˘l
, 
sys_msg˘l
)

168 
	#__NR_f˙é
 72

	)

169 
	$__SYSCALL
(
__NR_f˙é
, 
sys_f˙é
)

170 
	#__NR_Êock
 73

	)

171 
	$__SYSCALL
(
__NR_Êock
, 
sys_Êock
)

172 
	#__NR_fsync
 74

	)

173 
	$__SYSCALL
(
__NR_fsync
, 
sys_fsync
)

174 
	#__NR_fd©async
 75

	)

175 
	$__SYSCALL
(
__NR_fd©async
, 
sys_fd©async
)

176 
	#__NR_åunˇã
 76

	)

177 
	$__SYSCALL
(
__NR_åunˇã
, 
sys_åunˇã
)

178 
	#__NR_·runˇã
 77

	)

179 
	$__SYSCALL
(
__NR_·runˇã
, 
sys_·runˇã
)

180 
	#__NR_gëdíts
 78

	)

181 
	$__SYSCALL
(
__NR_gëdíts
, 
sys_gëdíts
)

182 
	#__NR_gëcwd
 79

	)

183 
	$__SYSCALL
(
__NR_gëcwd
, 
sys_gëcwd
)

185 
	#__NR_chdú
 80

	)

186 
	$__SYSCALL
(
__NR_chdú
, 
sys_chdú
)

187 
	#__NR_fchdú
 81

	)

188 
	$__SYSCALL
(
__NR_fchdú
, 
sys_fchdú
)

189 
	#__NR_ª«me
 82

	)

190 
	$__SYSCALL
(
__NR_ª«me
, 
sys_ª«me
)

191 
	#__NR_mkdú
 83

	)

192 
	$__SYSCALL
(
__NR_mkdú
, 
sys_mkdú
)

193 
	#__NR_rmdú
 84

	)

194 
	$__SYSCALL
(
__NR_rmdú
, 
sys_rmdú
)

195 
	#__NR_¸ót
 85

	)

196 
	$__SYSCALL
(
__NR_¸ót
, 
sys_¸ót
)

197 
	#__NR_lök
 86

	)

198 
	$__SYSCALL
(
__NR_lök
, 
sys_lök
)

199 
	#__NR_u∆ök
 87

	)

200 
	$__SYSCALL
(
__NR_u∆ök
, 
sys_u∆ök
)

202 
	#__NR_symlök
 88

	)

203 
	$__SYSCALL
(
__NR_symlök
, 
sys_symlök
)

204 
	#__NR_ªadlök
 89

	)

205 
	$__SYSCALL
(
__NR_ªadlök
, 
sys_ªadlök
)

206 
	#__NR_chmod
 90

	)

207 
	$__SYSCALL
(
__NR_chmod
, 
sys_chmod
)

208 
	#__NR_fchmod
 91

	)

209 
	$__SYSCALL
(
__NR_fchmod
, 
sys_fchmod
)

210 
	#__NR_chown
 92

	)

211 
	$__SYSCALL
(
__NR_chown
, 
sys_chown
)

212 
	#__NR_fchown
 93

	)

213 
	$__SYSCALL
(
__NR_fchown
, 
sys_fchown
)

214 
	#__NR_lchown
 94

	)

215 
	$__SYSCALL
(
__NR_lchown
, 
sys_lchown
)

216 
	#__NR_umask
 95

	)

217 
	$__SYSCALL
(
__NR_umask
, 
sys_umask
)

219 
	#__NR_gëtimeofday
 96

	)

220 
	$__SYSCALL
(
__NR_gëtimeofday
, 
sys_gëtimeofday
)

221 
	#__NR_gëæimô
 97

	)

222 
	$__SYSCALL
(
__NR_gëæimô
, 
sys_gëæimô
)

223 
	#__NR_gërußge
 98

	)

224 
	$__SYSCALL
(
__NR_gërußge
, 
sys_gërußge
)

225 
	#__NR_sysöfo
 99

	)

226 
	$__SYSCALL
(
__NR_sysöfo
, 
sys_sysöfo
)

227 
	#__NR_times
 100

	)

228 
	$__SYSCALL
(
__NR_times
, 
sys_times
)

229 
	#__NR_±ø˚
 101

	)

230 
	$__SYSCALL
(
__NR_±ø˚
, 
sys_±ø˚
)

231 
	#__NR_gëuid
 102

	)

232 
	$__SYSCALL
(
__NR_gëuid
, 
sys_gëuid
)

233 
	#__NR_sy¶og
 103

	)

234 
	$__SYSCALL
(
__NR_sy¶og
, 
sys_sy¶og
)

237 
	#__NR_gëgid
 104

	)

238 
	$__SYSCALL
(
__NR_gëgid
, 
sys_gëgid
)

239 
	#__NR_£tuid
 105

	)

240 
	$__SYSCALL
(
__NR_£tuid
, 
sys_£tuid
)

241 
	#__NR_£tgid
 106

	)

242 
	$__SYSCALL
(
__NR_£tgid
, 
sys_£tgid
)

243 
	#__NR_gëeuid
 107

	)

244 
	$__SYSCALL
(
__NR_gëeuid
, 
sys_gëeuid
)

245 
	#__NR_gëegid
 108

	)

246 
	$__SYSCALL
(
__NR_gëegid
, 
sys_gëegid
)

247 
	#__NR_£çgid
 109

	)

248 
	$__SYSCALL
(
__NR_£çgid
, 
sys_£çgid
)

249 
	#__NR_gëµid
 110

	)

250 
	$__SYSCALL
(
__NR_gëµid
, 
sys_gëµid
)

251 
	#__NR_gëpgΩ
 111

	)

252 
	$__SYSCALL
(
__NR_gëpgΩ
, 
sys_gëpgΩ
)

254 
	#__NR_£tsid
 112

	)

255 
	$__SYSCALL
(
__NR_£tsid
, 
sys_£tsid
)

256 
	#__NR_£åeuid
 113

	)

257 
	$__SYSCALL
(
__NR_£åeuid
, 
sys_£åeuid
)

258 
	#__NR_£åegid
 114

	)

259 
	$__SYSCALL
(
__NR_£åegid
, 
sys_£åegid
)

260 
	#__NR_gëgroups
 115

	)

261 
	$__SYSCALL
(
__NR_gëgroups
, 
sys_gëgroups
)

262 
	#__NR_£tgroups
 116

	)

263 
	$__SYSCALL
(
__NR_£tgroups
, 
sys_£tgroups
)

264 
	#__NR_£åesuid
 117

	)

265 
	$__SYSCALL
(
__NR_£åesuid
, 
sys_£åesuid
)

266 
	#__NR_gëªsuid
 118

	)

267 
	$__SYSCALL
(
__NR_gëªsuid
, 
sys_gëªsuid
)

268 
	#__NR_£åesgid
 119

	)

269 
	$__SYSCALL
(
__NR_£åesgid
, 
sys_£åesgid
)

271 
	#__NR_gëªsgid
 120

	)

272 
	$__SYSCALL
(
__NR_gëªsgid
, 
sys_gëªsgid
)

273 
	#__NR_gëpgid
 121

	)

274 
	$__SYSCALL
(
__NR_gëpgid
, 
sys_gëpgid
)

275 
	#__NR_£tfsuid
 122

	)

276 
	$__SYSCALL
(
__NR_£tfsuid
, 
sys_£tfsuid
)

277 
	#__NR_£tfsgid
 123

	)

278 
	$__SYSCALL
(
__NR_£tfsgid
, 
sys_£tfsgid
)

279 
	#__NR_gësid
 124

	)

280 
	$__SYSCALL
(
__NR_gësid
, 
sys_gësid
)

281 
	#__NR_ˇpgë
 125

	)

282 
	$__SYSCALL
(
__NR_ˇpgë
, 
sys_ˇpgë
)

283 
	#__NR_ˇp£t
 126

	)

284 
	$__SYSCALL
(
__NR_ˇp£t
, 
sys_ˇp£t
)

286 
	#__NR_π_sig≥ndög
 127

	)

287 
	$__SYSCALL
(
__NR_π_sig≥ndög
, 
sys_π_sig≥ndög
)

288 
	#__NR_π_sigtimedwaô
 128

	)

289 
	$__SYSCALL
(
__NR_π_sigtimedwaô
, 
sys_π_sigtimedwaô
)

290 
	#__NR_π_sigqueueöfo
 129

	)

291 
	$__SYSCALL
(
__NR_π_sigqueueöfo
, 
sys_π_sigqueueöfo
)

292 
	#__NR_π_sigsu•íd
 130

	)

293 
	$__SYSCALL
(
__NR_π_sigsu•íd
, 
sys_π_sigsu•íd
)

294 
	#__NR_sigÆt°ack
 131

	)

295 
	$__SYSCALL
(
__NR_sigÆt°ack
, 
°ub_sigÆt°ack
)

296 
	#__NR_utime
 132

	)

297 
	$__SYSCALL
(
__NR_utime
, 
sys_utime
)

298 
	#__NR_mknod
 133

	)

299 
	$__SYSCALL
(
__NR_mknod
, 
sys_mknod
)

302 
	#__NR_u£lib
 134

	)

303 
	$__SYSCALL
(
__NR_u£lib
, 
sys_ni_sysˇŒ
)

304 
	#__NR_≥rs⁄Æôy
 135

	)

305 
	$__SYSCALL
(
__NR_≥rs⁄Æôy
, 
sys_≥rs⁄Æôy
)

307 
	#__NR_u°©
 136

	)

308 
	$__SYSCALL
(
__NR_u°©
, 
sys_u°©
)

309 
	#__NR_°©fs
 137

	)

310 
	$__SYSCALL
(
__NR_°©fs
, 
sys_°©fs
)

311 
	#__NR_f°©fs
 138

	)

312 
	$__SYSCALL
(
__NR_f°©fs
, 
sys_f°©fs
)

313 
	#__NR_sysfs
 139

	)

314 
	$__SYSCALL
(
__NR_sysfs
, 
sys_sysfs
)

316 
	#__NR_gë¥i‹ôy
 140

	)

317 
	$__SYSCALL
(
__NR_gë¥i‹ôy
, 
sys_gë¥i‹ôy
)

318 
	#__NR_£çri‹ôy
 141

	)

319 
	$__SYSCALL
(
__NR_£çri‹ôy
, 
sys_£çri‹ôy
)

320 
	#__NR_sched_£ç¨am
 142

	)

321 
	$__SYSCALL
(
__NR_sched_£ç¨am
, 
sys_sched_£ç¨am
)

322 
	#__NR_sched_gë∑øm
 143

	)

323 
	$__SYSCALL
(
__NR_sched_gë∑øm
, 
sys_sched_gë∑øm
)

324 
	#__NR_sched_£tscheduÀr
 144

	)

325 
	$__SYSCALL
(
__NR_sched_£tscheduÀr
, 
sys_sched_£tscheduÀr
)

326 
	#__NR_sched_gëscheduÀr
 145

	)

327 
	$__SYSCALL
(
__NR_sched_gëscheduÀr
, 
sys_sched_gëscheduÀr
)

328 
	#__NR_sched_gë_¥i‹ôy_max
 146

	)

329 
	$__SYSCALL
(
__NR_sched_gë_¥i‹ôy_max
, 
sys_sched_gë_¥i‹ôy_max
)

330 
	#__NR_sched_gë_¥i‹ôy_mö
 147

	)

331 
	$__SYSCALL
(
__NR_sched_gë_¥i‹ôy_mö
, 
sys_sched_gë_¥i‹ôy_mö
)

332 
	#__NR_sched_º_gë_öãrvÆ
 148

	)

333 
	$__SYSCALL
(
__NR_sched_º_gë_öãrvÆ
, 
sys_sched_º_gë_öãrvÆ
)

335 
	#__NR_mlock
 149

	)

336 
	$__SYSCALL
(
__NR_mlock
, 
sys_mlock
)

337 
	#__NR_mu∆ock
 150

	)

338 
	$__SYSCALL
(
__NR_mu∆ock
, 
sys_mu∆ock
)

339 
	#__NR_mlockÆl
 151

	)

340 
	$__SYSCALL
(
__NR_mlockÆl
, 
sys_mlockÆl
)

341 
	#__NR_mu∆ockÆl
 152

	)

342 
	$__SYSCALL
(
__NR_mu∆ockÆl
, 
sys_mu∆ockÆl
)

344 
	#__NR_vh™gup
 153

	)

345 
	$__SYSCALL
(
__NR_vh™gup
, 
sys_vh™gup
)

347 
	#__NR_modify_ldt
 154

	)

348 
	$__SYSCALL
(
__NR_modify_ldt
, 
sys_modify_ldt
)

350 
	#__NR_pivŸ_roŸ
 155

	)

351 
	$__SYSCALL
(
__NR_pivŸ_roŸ
, 
sys_pivŸ_roŸ
)

353 
	#__NR__sys˘l
 156

	)

354 
	$__SYSCALL
(
__NR__sys˘l
, 
sys_sys˘l
)

356 
	#__NR_¥˘l
 157

	)

357 
	$__SYSCALL
(
__NR_¥˘l
, 
sys_¥˘l
)

358 
	#__NR_¨ch_¥˘l
 158

	)

359 
	$__SYSCALL
(
__NR_¨ch_¥˘l
, 
sys_¨ch_¥˘l
)

361 
	#__NR_adjtimex
 159

	)

362 
	$__SYSCALL
(
__NR_adjtimex
, 
sys_adjtimex
)

364 
	#__NR_£ålimô
 160

	)

365 
	$__SYSCALL
(
__NR_£ålimô
, 
sys_£ålimô
)

367 
	#__NR_chroŸ
 161

	)

368 
	$__SYSCALL
(
__NR_chroŸ
, 
sys_chroŸ
)

370 
	#__NR_sync
 162

	)

371 
	$__SYSCALL
(
__NR_sync
, 
sys_sync
)

373 
	#__NR_ac˘
 163

	)

374 
	$__SYSCALL
(
__NR_ac˘
, 
sys_ac˘
)

376 
	#__NR_£âimeofday
 164

	)

377 
	$__SYSCALL
(
__NR_£âimeofday
, 
sys_£âimeofday
)

379 
	#__NR_mou¡
 165

	)

380 
	$__SYSCALL
(
__NR_mou¡
, 
sys_mou¡
)

381 
	#__NR_umou¡2
 166

	)

382 
	$__SYSCALL
(
__NR_umou¡2
, 
sys_umou¡
)

384 
	#__NR_sw≠⁄
 167

	)

385 
	$__SYSCALL
(
__NR_sw≠⁄
, 
sys_sw≠⁄
)

386 
	#__NR_sw≠off
 168

	)

387 
	$__SYSCALL
(
__NR_sw≠off
, 
sys_sw≠off
)

389 
	#__NR_ªboŸ
 169

	)

390 
	$__SYSCALL
(
__NR_ªboŸ
, 
sys_ªboŸ
)

392 
	#__NR_£tho°«me
 170

	)

393 
	$__SYSCALL
(
__NR_£tho°«me
, 
sys_£tho°«me
)

394 
	#__NR_£tdomaö«me
 171

	)

395 
	$__SYSCALL
(
__NR_£tdomaö«me
, 
sys_£tdomaö«me
)

397 
	#__NR_i›l
 172

	)

398 
	$__SYSCALL
(
__NR_i›l
, 
°ub_i›l
)

399 
	#__NR_i›îm
 173

	)

400 
	$__SYSCALL
(
__NR_i›îm
, 
sys_i›îm
)

402 
	#__NR_¸óã_moduÀ
 174

	)

403 
	$__SYSCALL
(
__NR_¸óã_moduÀ
, 
sys_ni_sysˇŒ
)

404 
	#__NR_öô_moduÀ
 175

	)

405 
	$__SYSCALL
(
__NR_öô_moduÀ
, 
sys_öô_moduÀ
)

406 
	#__NR_dñëe_moduÀ
 176

	)

407 
	$__SYSCALL
(
__NR_dñëe_moduÀ
, 
sys_dñëe_moduÀ
)

408 
	#__NR_gë_kî√l_syms
 177

	)

409 
	$__SYSCALL
(
__NR_gë_kî√l_syms
, 
sys_ni_sysˇŒ
)

410 
	#__NR_quîy_moduÀ
 178

	)

411 
	$__SYSCALL
(
__NR_quîy_moduÀ
, 
sys_ni_sysˇŒ
)

413 
	#__NR_quŸa˘l
 179

	)

414 
	$__SYSCALL
(
__NR_quŸa˘l
, 
sys_quŸa˘l
)

416 
	#__NR_nfs£rv˘l
 180

	)

417 
	$__SYSCALL
(
__NR_nfs£rv˘l
, 
sys_ni_sysˇŒ
)

420 
	#__NR_gëpmsg
 181

	)

421 
	$__SYSCALL
(
__NR_gëpmsg
, 
sys_ni_sysˇŒ
)

422 
	#__NR_puçmsg
 182

	)

423 
	$__SYSCALL
(
__NR_puçmsg
, 
sys_ni_sysˇŒ
)

426 
	#__NR_afs_sysˇŒ
 183

	)

427 
	$__SYSCALL
(
__NR_afs_sysˇŒ
, 
sys_ni_sysˇŒ
)

430 
	#__NR_tuxˇŒ
 184

	)

431 
	$__SYSCALL
(
__NR_tuxˇŒ
, 
sys_ni_sysˇŒ
)

433 
	#__NR_£curôy
 185

	)

434 
	$__SYSCALL
(
__NR_£curôy
, 
sys_ni_sysˇŒ
)

436 
	#__NR_gëtid
 186

	)

437 
	$__SYSCALL
(
__NR_gëtid
, 
sys_gëtid
)

439 
	#__NR_ªadahód
 187

	)

440 
	$__SYSCALL
(
__NR_ªadahód
, 
sys_ªadahód
)

441 
	#__NR_£tx©å
 188

	)

442 
	$__SYSCALL
(
__NR_£tx©å
, 
sys_£tx©å
)

443 
	#__NR_l£tx©å
 189

	)

444 
	$__SYSCALL
(
__NR_l£tx©å
, 
sys_l£tx©å
)

445 
	#__NR_f£tx©å
 190

	)

446 
	$__SYSCALL
(
__NR_f£tx©å
, 
sys_f£tx©å
)

447 
	#__NR_gëx©å
 191

	)

448 
	$__SYSCALL
(
__NR_gëx©å
, 
sys_gëx©å
)

449 
	#__NR_lgëx©å
 192

	)

450 
	$__SYSCALL
(
__NR_lgëx©å
, 
sys_lgëx©å
)

451 
	#__NR_fgëx©å
 193

	)

452 
	$__SYSCALL
(
__NR_fgëx©å
, 
sys_fgëx©å
)

453 
	#__NR_li°x©å
 194

	)

454 
	$__SYSCALL
(
__NR_li°x©å
, 
sys_li°x©å
)

455 
	#__NR_Œi°x©å
 195

	)

456 
	$__SYSCALL
(
__NR_Œi°x©å
, 
sys_Œi°x©å
)

457 
	#__NR_Êi°x©å
 196

	)

458 
	$__SYSCALL
(
__NR_Êi°x©å
, 
sys_Êi°x©å
)

459 
	#__NR_ªmovex©å
 197

	)

460 
	$__SYSCALL
(
__NR_ªmovex©å
, 
sys_ªmovex©å
)

461 
	#__NR_Ãemovex©å
 198

	)

462 
	$__SYSCALL
(
__NR_Ãemovex©å
, 
sys_Ãemovex©å
)

463 
	#__NR_‰emovex©å
 199

	)

464 
	$__SYSCALL
(
__NR_‰emovex©å
, 
sys_‰emovex©å
)

465 
	#__NR_tkûl
 200

	)

466 
	$__SYSCALL
(
__NR_tkûl
, 
sys_tkûl
)

467 
	#__NR_time
 201

	)

468 
	$__SYSCALL
(
__NR_time
, 
sys_time
)

469 
	#__NR_fuãx
 202

	)

470 
	$__SYSCALL
(
__NR_fuãx
, 
sys_fuãx
)

471 
	#__NR_sched_£èfföôy
 203

	)

472 
	$__SYSCALL
(
__NR_sched_£èfföôy
, 
sys_sched_£èfföôy
)

473 
	#__NR_sched_gëafföôy
 204

	)

474 
	$__SYSCALL
(
__NR_sched_gëafföôy
, 
sys_sched_gëafföôy
)

475 
	#__NR_£t_thªad_¨ó
 205

	)

476 
	$__SYSCALL
(
__NR_£t_thªad_¨ó
, 
sys_ni_sysˇŒ
)

477 
	#__NR_io_£tup
 206

	)

478 
	$__SYSCALL
(
__NR_io_£tup
, 
sys_io_£tup
)

479 
	#__NR_io_de°roy
 207

	)

480 
	$__SYSCALL
(
__NR_io_de°roy
, 
sys_io_de°roy
)

481 
	#__NR_io_gëevíts
 208

	)

482 
	$__SYSCALL
(
__NR_io_gëevíts
, 
sys_io_gëevíts
)

483 
	#__NR_io_submô
 209

	)

484 
	$__SYSCALL
(
__NR_io_submô
, 
sys_io_submô
)

485 
	#__NR_io_ˇn˚l
 210

	)

486 
	$__SYSCALL
(
__NR_io_ˇn˚l
, 
sys_io_ˇn˚l
)

487 
	#__NR_gë_thªad_¨ó
 211

	)

488 
	$__SYSCALL
(
__NR_gë_thªad_¨ó
, 
sys_ni_sysˇŒ
)

489 
	#__NR_lookup_dcookõ
 212

	)

490 
	$__SYSCALL
(
__NR_lookup_dcookõ
, 
sys_lookup_dcookõ
)

491 
	#__NR_ïﬁl_¸óã
 213

	)

492 
	$__SYSCALL
(
__NR_ïﬁl_¸óã
, 
sys_ïﬁl_¸óã
)

493 
	#__NR_ïﬁl_˘l_ﬁd
 214

	)

494 
	$__SYSCALL
(
__NR_ïﬁl_˘l_ﬁd
, 
sys_ni_sysˇŒ
)

495 
	#__NR_ïﬁl_waô_ﬁd
 215

	)

496 
	$__SYSCALL
(
__NR_ïﬁl_waô_ﬁd
, 
sys_ni_sysˇŒ
)

497 
	#__NR_ªm≠_fûe_∑ges
 216

	)

498 
	$__SYSCALL
(
__NR_ªm≠_fûe_∑ges
, 
sys_ªm≠_fûe_∑ges
)

499 
	#__NR_gëdíts64
 217

	)

500 
	$__SYSCALL
(
__NR_gëdíts64
, 
sys_gëdíts64
)

501 
	#__NR_£t_tid_addªss
 218

	)

502 
	$__SYSCALL
(
__NR_£t_tid_addªss
, 
sys_£t_tid_addªss
)

503 
	#__NR_ª°¨t_sysˇŒ
 219

	)

504 
	$__SYSCALL
(
__NR_ª°¨t_sysˇŒ
, 
sys_ª°¨t_sysˇŒ
)

505 
	#__NR_£mtimed›
 220

	)

506 
	$__SYSCALL
(
__NR_£mtimed›
, 
sys_£mtimed›
)

507 
	#__NR_Ádvi£64
 221

	)

508 
	$__SYSCALL
(
__NR_Ádvi£64
, 
sys_Ádvi£64
)

509 
	#__NR_timî_¸óã
 222

	)

510 
	$__SYSCALL
(
__NR_timî_¸óã
, 
sys_timî_¸óã
)

511 
	#__NR_timî_£âime
 223

	)

512 
	$__SYSCALL
(
__NR_timî_£âime
, 
sys_timî_£âime
)

513 
	#__NR_timî_gëtime
 224

	)

514 
	$__SYSCALL
(
__NR_timî_gëtime
, 
sys_timî_gëtime
)

515 
	#__NR_timî_gëovîrun
 225

	)

516 
	$__SYSCALL
(
__NR_timî_gëovîrun
, 
sys_timî_gëovîrun
)

517 
	#__NR_timî_dñëe
 226

	)

518 
	$__SYSCALL
(
__NR_timî_dñëe
, 
sys_timî_dñëe
)

519 
	#__NR_˛ock_£âime
 227

	)

520 
	$__SYSCALL
(
__NR_˛ock_£âime
, 
sys_˛ock_£âime
)

521 
	#__NR_˛ock_gëtime
 228

	)

522 
	$__SYSCALL
(
__NR_˛ock_gëtime
, 
sys_˛ock_gëtime
)

523 
	#__NR_˛ock_gëªs
 229

	)

524 
	$__SYSCALL
(
__NR_˛ock_gëªs
, 
sys_˛ock_gëªs
)

525 
	#__NR_˛ock_«no¶ìp
 230

	)

526 
	$__SYSCALL
(
__NR_˛ock_«no¶ìp
, 
sys_˛ock_«no¶ìp
)

527 
	#__NR_exô_group
 231

	)

528 
	$__SYSCALL
(
__NR_exô_group
, 
sys_exô_group
)

529 
	#__NR_ïﬁl_waô
 232

	)

530 
	$__SYSCALL
(
__NR_ïﬁl_waô
, 
sys_ïﬁl_waô
)

531 
	#__NR_ïﬁl_˘l
 233

	)

532 
	$__SYSCALL
(
__NR_ïﬁl_˘l
, 
sys_ïﬁl_˘l
)

533 
	#__NR_tgkûl
 234

	)

534 
	$__SYSCALL
(
__NR_tgkûl
, 
sys_tgkûl
)

535 
	#__NR_utimes
 235

	)

536 
	$__SYSCALL
(
__NR_utimes
, 
sys_utimes
)

537 
	#__NR_v£rvî
 236

	)

538 
	$__SYSCALL
(
__NR_v£rvî
, 
sys_ni_sysˇŒ
)

539 
	#__NR_mböd
 237

	)

540 
	$__SYSCALL
(
__NR_mböd
, 
sys_mböd
)

541 
	#__NR_£t_mempﬁicy
 238

	)

542 
	$__SYSCALL
(
__NR_£t_mempﬁicy
, 
sys_£t_mempﬁicy
)

543 
	#__NR_gë_mempﬁicy
 239

	)

544 
	$__SYSCALL
(
__NR_gë_mempﬁicy
, 
sys_gë_mempﬁicy
)

545 
	#__NR_mq_›í
 240

	)

546 
	$__SYSCALL
(
__NR_mq_›í
, 
sys_mq_›í
)

547 
	#__NR_mq_u∆ök
 241

	)

548 
	$__SYSCALL
(
__NR_mq_u∆ök
, 
sys_mq_u∆ök
)

549 
	#__NR_mq_timed£nd
 242

	)

550 
	$__SYSCALL
(
__NR_mq_timed£nd
, 
sys_mq_timed£nd
)

551 
	#__NR_mq_timedª˚ive
 243

	)

552 
	$__SYSCALL
(
__NR_mq_timedª˚ive
, 
sys_mq_timedª˚ive
)

553 
	#__NR_mq_nŸify
 244

	)

554 
	$__SYSCALL
(
__NR_mq_nŸify
, 
sys_mq_nŸify
)

555 
	#__NR_mq_gë£èâr
 245

	)

556 
	$__SYSCALL
(
__NR_mq_gë£èâr
, 
sys_mq_gë£èâr
)

557 
	#__NR_kexec_lﬂd
 246

	)

558 
	$__SYSCALL
(
__NR_kexec_lﬂd
, 
sys_kexec_lﬂd
)

559 
	#__NR_waôid
 247

	)

560 
	$__SYSCALL
(
__NR_waôid
, 
sys_waôid
)

561 
	#__NR_add_key
 248

	)

562 
	$__SYSCALL
(
__NR_add_key
, 
sys_add_key
)

563 
	#__NR_ªque°_key
 249

	)

564 
	$__SYSCALL
(
__NR_ªque°_key
, 
sys_ªque°_key
)

565 
	#__NR_key˘l
 250

	)

566 
	$__SYSCALL
(
__NR_key˘l
, 
sys_key˘l
)

567 
	#__NR_i›rio_£t
 251

	)

568 
	$__SYSCALL
(
__NR_i›rio_£t
, 
sys_i›rio_£t
)

569 
	#__NR_i›rio_gë
 252

	)

570 
	$__SYSCALL
(
__NR_i›rio_gë
, 
sys_i›rio_gë
)

571 
	#__NR_öŸify_öô
 253

	)

572 
	$__SYSCALL
(
__NR_öŸify_öô
, 
sys_öŸify_öô
)

573 
	#__NR_öŸify_add_w©ch
 254

	)

574 
	$__SYSCALL
(
__NR_öŸify_add_w©ch
, 
sys_öŸify_add_w©ch
)

575 
	#__NR_öŸify_rm_w©ch
 255

	)

576 
	$__SYSCALL
(
__NR_öŸify_rm_w©ch
, 
sys_öŸify_rm_w©ch
)

577 
	#__NR_migøã_∑ges
 256

	)

578 
	$__SYSCALL
(
__NR_migøã_∑ges
, 
sys_migøã_∑ges
)

579 
	#__NR_›í©
 257

	)

580 
	$__SYSCALL
(
__NR_›í©
, 
sys_›í©
)

581 
	#__NR_mkdú©
 258

	)

582 
	$__SYSCALL
(
__NR_mkdú©
, 
sys_mkdú©
)

583 
	#__NR_mknod©
 259

	)

584 
	$__SYSCALL
(
__NR_mknod©
, 
sys_mknod©
)

585 
	#__NR_fchow«t
 260

	)

586 
	$__SYSCALL
(
__NR_fchow«t
, 
sys_fchow«t
)

587 
	#__NR_futimeßt
 261

	)

588 
	$__SYSCALL
(
__NR_futimeßt
, 
sys_futimeßt
)

589 
	#__NR_√wf°©©
 262

	)

590 
	$__SYSCALL
(
__NR_√wf°©©
, 
sys_√wf°©©
)

591 
	#__NR_u∆ök©
 263

	)

592 
	$__SYSCALL
(
__NR_u∆ök©
, 
sys_u∆ök©
)

593 
	#__NR_ª«mót
 264

	)

594 
	$__SYSCALL
(
__NR_ª«mót
, 
sys_ª«mót
)

595 
	#__NR_lök©
 265

	)

596 
	$__SYSCALL
(
__NR_lök©
, 
sys_lök©
)

597 
	#__NR_symlök©
 266

	)

598 
	$__SYSCALL
(
__NR_symlök©
, 
sys_symlök©
)

599 
	#__NR_ªadlök©
 267

	)

600 
	$__SYSCALL
(
__NR_ªadlök©
, 
sys_ªadlök©
)

601 
	#__NR_fchmod©
 268

	)

602 
	$__SYSCALL
(
__NR_fchmod©
, 
sys_fchmod©
)

603 
	#__NR_Ác˚sßt
 269

	)

604 
	$__SYSCALL
(
__NR_Ác˚sßt
, 
sys_Ác˚sßt
)

605 
	#__NR_p£À˘6
 270

	)

606 
	$__SYSCALL
(
__NR_p£À˘6
, 
sys_p£À˘6
)

607 
	#__NR_µﬁl
 271

	)

608 
	$__SYSCALL
(
__NR_µﬁl
, 
sys_µﬁl
)

609 
	#__NR_unsh¨e
 272

	)

610 
	$__SYSCALL
(
__NR_unsh¨e
, 
sys_unsh¨e
)

611 
	#__NR_£t_robu°_li°
 273

	)

612 
	$__SYSCALL
(
__NR_£t_robu°_li°
, 
sys_£t_robu°_li°
)

613 
	#__NR_gë_robu°_li°
 274

	)

614 
	$__SYSCALL
(
__NR_gë_robu°_li°
, 
sys_gë_robu°_li°
)

615 
	#__NR_•li˚
 275

	)

616 
	$__SYSCALL
(
__NR_•li˚
, 
sys_•li˚
)

617 
	#__NR_ãe
 276

	)

618 
	$__SYSCALL
(
__NR_ãe
, 
sys_ãe
)

619 
	#__NR_sync_fûe_ønge
 277

	)

620 
	$__SYSCALL
(
__NR_sync_fûe_ønge
, 
sys_sync_fûe_ønge
)

621 
	#__NR_vm•li˚
 278

	)

622 
	$__SYSCALL
(
__NR_vm•li˚
, 
sys_vm•li˚
)

623 
	#__NR_move_∑ges
 279

	)

624 
	$__SYSCALL
(
__NR_move_∑ges
, 
sys_move_∑ges
)

625 
	#__NR_utimíßt
 280

	)

626 
	$__SYSCALL
(
__NR_utimíßt
, 
sys_utimíßt
)

627 
	#__NR_ïﬁl_pwaô
 281

	)

628 
	$__SYSCALL
(
__NR_ïﬁl_pwaô
, 
sys_ïﬁl_pwaô
)

629 
	#__NR_sig«lfd
 282

	)

630 
	$__SYSCALL
(
__NR_sig«lfd
, 
sys_sig«lfd
)

631 
	#__NR_timîfd_¸óã
 283

	)

632 
	$__SYSCALL
(
__NR_timîfd_¸óã
, 
sys_timîfd_¸óã
)

633 
	#__NR_evítfd
 284

	)

634 
	$__SYSCALL
(
__NR_evítfd
, 
sys_evítfd
)

635 
	#__NR_ÁŒoˇã
 285

	)

636 
	$__SYSCALL
(
__NR_ÁŒoˇã
, 
sys_ÁŒoˇã
)

637 
	#__NR_timîfd_£âime
 286

	)

638 
	$__SYSCALL
(
__NR_timîfd_£âime
, 
sys_timîfd_£âime
)

639 
	#__NR_timîfd_gëtime
 287

	)

640 
	$__SYSCALL
(
__NR_timîfd_gëtime
, 
sys_timîfd_gëtime
)

641 
	#__NR_ac˚±4
 288

	)

642 
	$__SYSCALL
(
__NR_ac˚±4
, 
sys_ac˚±4
)

643 
	#__NR_sig«lfd4
 289

	)

644 
	$__SYSCALL
(
__NR_sig«lfd4
, 
sys_sig«lfd4
)

645 
	#__NR_evítfd2
 290

	)

646 
	$__SYSCALL
(
__NR_evítfd2
, 
sys_evítfd2
)

647 
	#__NR_ïﬁl_¸óã1
 291

	)

648 
	$__SYSCALL
(
__NR_ïﬁl_¸óã1
, 
sys_ïﬁl_¸óã1
)

649 
	#__NR_dup3
 292

	)

650 
	$__SYSCALL
(
__NR_dup3
, 
sys_dup3
)

651 
	#__NR_pùe2
 293

	)

652 
	$__SYSCALL
(
__NR_pùe2
, 
sys_pùe2
)

653 
	#__NR_öŸify_öô1
 294

	)

654 
	$__SYSCALL
(
__NR_öŸify_öô1
, 
sys_öŸify_öô1
)

655 
	#__NR_¥ódv
 295

	)

656 
	$__SYSCALL
(
__NR_¥ódv
, 
sys_¥ódv
)

657 
	#__NR_pwrôev
 296

	)

658 
	$__SYSCALL
(
__NR_pwrôev
, 
sys_pwrôev
)

659 
	#__NR_π_tgsigqueueöfo
 297

	)

660 
	$__SYSCALL
(
__NR_π_tgsigqueueöfo
, 
sys_π_tgsigqueueöfo
)

661 
	#__NR_≥rf_evít_›í
 298

	)

662 
	$__SYSCALL
(
__NR_≥rf_evít_›í
, 
sys_≥rf_evít_›í
)

663 
	#__NR_ªcvmmsg
 299

	)

664 
	$__SYSCALL
(
__NR_ªcvmmsg
, 
sys_ªcvmmsg
)

665 
	#__NR_ÁnŸify_öô
 300

	)

666 
	$__SYSCALL
(
__NR_ÁnŸify_öô
, 
sys_ÁnŸify_öô
)

667 
	#__NR_ÁnŸify_m¨k
 301

	)

668 
	$__SYSCALL
(
__NR_ÁnŸify_m¨k
, 
sys_ÁnŸify_m¨k
)

669 
	#__NR_¥limô64
 302

	)

670 
	$__SYSCALL
(
__NR_¥limô64
, 
sys_¥limô64
)

671 
	#__NR_«me_to_h™dÀ_©
 303

	)

672 
	$__SYSCALL
(
__NR_«me_to_h™dÀ_©
, 
sys_«me_to_h™dÀ_©
)

673 
	#__NR_›í_by_h™dÀ_©
 304

	)

674 
	$__SYSCALL
(
__NR_›í_by_h™dÀ_©
, 
sys_›í_by_h™dÀ_©
)

675 
	#__NR_˛ock_adjtime
 305

	)

676 
	$__SYSCALL
(
__NR_˛ock_adjtime
, 
sys_˛ock_adjtime
)

677 
	#__NR_syncfs
 306

	)

678 
	$__SYSCALL
(
__NR_syncfs
, 
sys_syncfs
)

679 
	#__NR_£ndmmsg
 307

	)

680 
	$__SYSCALL
(
__NR_£ndmmsg
, 
sys_£ndmmsg
)

681 
	#__NR_£äs
 308

	)

682 
	$__SYSCALL
(
__NR_£äs
, 
sys_£äs
)

683 
	#__NR_gë˝u
 309

	)

684 
	$__SYSCALL
(
__NR_gë˝u
, 
sys_gë˝u
)

685 
	#__NR_¥o˚ss_vm_ªadv
 310

	)

686 
	$__SYSCALL
(
__NR_¥o˚ss_vm_ªadv
, 
sys_¥o˚ss_vm_ªadv
)

687 
	#__NR_¥o˚ss_vm_wrôev
 311

	)

688 
	$__SYSCALL
(
__NR_¥o˚ss_vm_wrôev
, 
sys_¥o˚ss_vm_wrôev
)

690 #i‚de‡
__NO_STUBS


691 
	#__ARCH_WANT_OLD_READDIR


	)

692 
	#__ARCH_WANT_OLD_STAT


	)

693 
	#__ARCH_WANT_SYS_ALARM


	)

694 
	#__ARCH_WANT_SYS_GETHOSTNAME


	)

695 
	#__ARCH_WANT_SYS_PAUSE


	)

696 
	#__ARCH_WANT_SYS_SGETMASK


	)

697 
	#__ARCH_WANT_SYS_SIGNAL


	)

698 
	#__ARCH_WANT_SYS_UTIME


	)

699 
	#__ARCH_WANT_SYS_WAITPID


	)

700 
	#__ARCH_WANT_SYS_SOCKETCALL


	)

701 
	#__ARCH_WANT_SYS_FADVISE64


	)

702 
	#__ARCH_WANT_SYS_GETPGRP


	)

703 
	#__ARCH_WANT_SYS_LLSEEK


	)

704 
	#__ARCH_WANT_SYS_NICE


	)

705 
	#__ARCH_WANT_SYS_OLD_GETRLIMIT


	)

706 
	#__ARCH_WANT_SYS_OLD_UNAME


	)

707 
	#__ARCH_WANT_SYS_OLDUMOUNT


	)

708 
	#__ARCH_WANT_SYS_SIGPENDING


	)

709 
	#__ARCH_WANT_SYS_SIGPROCMASK


	)

710 
	#__ARCH_WANT_SYS_RT_SIGACTION


	)

711 
	#__ARCH_WANT_SYS_RT_SIGSUSPEND


	)

712 
	#__ARCH_WANT_SYS_TIME


	)

713 
	#__ARCH_WANT_COMPAT_SYS_TIME


	)

	@/usr/include/bits/timex.h

19 #i‚def 
_BITS_TIMEX_H


20 
	#_BITS_TIMEX_H
 1

	)

24 
	stimex


26 
	mmodes
;

27 
	moff£t
;

28 
	m‰eq
;

29 
	mmaxîr‹
;

30 
	me°îr‹
;

31 
	m°©us
;

32 
	mc⁄°™t
;

33 
	m¥ecisi⁄
;

34 
	mtﬁî™˚
;

35 
timevÆ
 
	mtime
;

36 
	mtick
;

38 
	mµs‰eq
;

39 
	mjôãr
;

40 
	mshi·
;

41 
	m°abû
;

42 
	mjô˙t
;

43 
	mˇl˙t
;

44 
	mîr˙t
;

45 
	m°b˙t
;

47 
	mèi
;

56 
	#ADJ_OFFSET
 0x0001

	)

57 
	#ADJ_FREQUENCY
 0x0002

	)

58 
	#ADJ_MAXERROR
 0x0004

	)

59 
	#ADJ_ESTERROR
 0x0008

	)

60 
	#ADJ_STATUS
 0x0010

	)

61 
	#ADJ_TIMECONST
 0x0020

	)

62 
	#ADJ_TAI
 0x0080

	)

63 
	#ADJ_MICRO
 0x1000

	)

64 
	#ADJ_NANO
 0x2000

	)

65 
	#ADJ_TICK
 0x4000

	)

66 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

67 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

70 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

71 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

72 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

73 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

74 
	#MOD_STATUS
 
ADJ_STATUS


	)

75 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

76 
	#MOD_CLKB
 
ADJ_TICK


	)

77 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

78 
	#MOD_TAI
 
ADJ_TAI


	)

79 
	#MOD_MICRO
 
ADJ_MICRO


	)

80 
	#MOD_NANO
 
ADJ_NANO


	)

84 
	#STA_PLL
 0x0001

	)

85 
	#STA_PPSFREQ
 0x0002

	)

86 
	#STA_PPSTIME
 0x0004

	)

87 
	#STA_FLL
 0x0008

	)

89 
	#STA_INS
 0x0010

	)

90 
	#STA_DEL
 0x0020

	)

91 
	#STA_UNSYNC
 0x0040

	)

92 
	#STA_FREQHOLD
 0x0080

	)

94 
	#STA_PPSSIGNAL
 0x0100

	)

95 
	#STA_PPSJITTER
 0x0200

	)

96 
	#STA_PPSWANDER
 0x0400

	)

97 
	#STA_PPSERROR
 0x0800

	)

99 
	#STA_CLOCKERR
 0x1000

	)

100 
	#STA_NANO
 0x2000

	)

101 
	#STA_MODE
 0x4000

	)

102 
	#STA_CLK
 0x8000

	)

105 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

106 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___kî√l_co¶


	)

11 
	#__°ub___kî√l_söl


	)

12 
	#__°ub___kî√l_è∆


	)

13 
	#__°ub_chÊags


	)

14 
	#__°ub_Áâach


	)

15 
	#__°ub_fchÊags


	)

16 
	#__°ub_fdëach


	)

17 
	#__°ub_gây


	)

18 
	#__°ub_lchmod


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@
1
.
1
/usr/include
277
6135
arch/mips/include/current.h
arch/mips/include/elf.h
arch/mips/include/kern/endian.h
arch/mips/include/kern/regdefs.h
arch/mips/include/kern/setjmp.h
arch/mips/include/kern/signal.h
arch/mips/include/kern/types.h
arch/mips/include/specialreg.h
arch/mips/include/spinlock.h
arch/mips/include/thread.h
arch/mips/include/tlb.h
arch/mips/include/trapframe.h
arch/mips/include/types.h
arch/mips/include/vm.h
arch/mips/locore/trap.c
arch/mips/syscall/syscall.c
arch/mips/thread/cpu.c
arch/mips/thread/switchframe.c
arch/mips/thread/switchframe.h
arch/mips/thread/thread_machdep.c
arch/mips/vm/dumbvm.c
arch/mips/vm/ram.c
arch/sys161/dev/lamebus_machdep.c
arch/sys161/include/bus.h
arch/sys161/include/maxcpus.h
compile/ASST0/autoconf.c
compile/ASST0/autoconf.h
compile/ASST0/opt-A0.h
compile/ASST0/opt-A1.h
compile/ASST0/opt-A2.h
compile/ASST0/opt-A3.h
compile/ASST0/opt-A4.h
compile/ASST0/opt-A5.h
compile/ASST0/opt-dumbvm.h
compile/ASST0/opt-net.h
compile/ASST0/opt-netfs.h
compile/ASST0/opt-noasserts.h
compile/ASST0/opt-sfs.h
compile/ASST0/opt-synchprobs.h
compile/ASST0/vers.c
compile/ASST1/autoconf.c
compile/ASST1/autoconf.h
compile/ASST1/opt-A0.h
compile/ASST1/opt-A1.h
compile/ASST1/opt-A2.h
compile/ASST1/opt-A3.h
compile/ASST1/opt-A4.h
compile/ASST1/opt-A5.h
compile/ASST1/opt-dumbvm.h
compile/ASST1/opt-net.h
compile/ASST1/opt-netfs.h
compile/ASST1/opt-noasserts.h
compile/ASST1/opt-sfs.h
compile/ASST1/opt-synchprobs.h
compile/ASST1/vers.c
compile/ASST2/autoconf.c
compile/ASST2/autoconf.h
compile/ASST2/opt-A0.h
compile/ASST2/opt-A1.h
compile/ASST2/opt-A2.h
compile/ASST2/opt-A3.h
compile/ASST2/opt-A4.h
compile/ASST2/opt-A5.h
compile/ASST2/opt-dumbvm.h
compile/ASST2/opt-net.h
compile/ASST2/opt-netfs.h
compile/ASST2/opt-noasserts.h
compile/ASST2/opt-sfs.h
compile/ASST2/opt-synchprobs.h
compile/ASST2/vers.c
compile/ASST3/autoconf.c
compile/ASST3/autoconf.h
compile/ASST3/opt-A0.h
compile/ASST3/opt-A1.h
compile/ASST3/opt-A2.h
compile/ASST3/opt-A3.h
compile/ASST3/opt-A4.h
compile/ASST3/opt-A5.h
compile/ASST3/opt-dumbvm.h
compile/ASST3/opt-net.h
compile/ASST3/opt-netfs.h
compile/ASST3/opt-noasserts.h
compile/ASST3/opt-sfs.h
compile/ASST3/opt-synchprobs.h
compile/ASST3/vers.c
dev/generic/beep.c
dev/generic/beep.h
dev/generic/console.c
dev/generic/console.h
dev/generic/random.c
dev/generic/random.h
dev/generic/rtclock.c
dev/generic/rtclock.h
dev/lamebus/beep_ltimer.c
dev/lamebus/con_lscreen.c
dev/lamebus/con_lser.c
dev/lamebus/emu.c
dev/lamebus/emu.h
dev/lamebus/emu_att.c
dev/lamebus/lamebus.c
dev/lamebus/lamebus.h
dev/lamebus/lhd.c
dev/lamebus/lhd.h
dev/lamebus/lhd_att.c
dev/lamebus/lnet.c
dev/lamebus/lnet_att.c
dev/lamebus/lrandom.c
dev/lamebus/lrandom.h
dev/lamebus/lrandom_att.c
dev/lamebus/lscreen.c
dev/lamebus/lscreen.h
dev/lamebus/lscreen_att.c
dev/lamebus/lser.c
dev/lamebus/lser.h
dev/lamebus/lser_att.c
dev/lamebus/ltimer.c
dev/lamebus/ltimer.h
dev/lamebus/ltimer_att.c
dev/lamebus/ltrace.c
dev/lamebus/ltrace.h
dev/lamebus/ltrace_att.c
dev/lamebus/random_lrandom.c
dev/lamebus/rtclock_ltimer.c
fs/sfs/sfs_fs.c
fs/sfs/sfs_io.c
fs/sfs/sfs_vnode.c
include/addrspace.h
include/array.h
include/bitmap.h
include/cdefs.h
include/clock.h
include/copyinout.h
include/cpu.h
include/current.h
include/device.h
include/elf.h
include/emufs.h
include/endian.h
include/fs.h
include/kern/endian.h
include/kern/errmsg.h
include/kern/errno.h
include/kern/fcntl.h
include/kern/ioctl.h
include/kern/iovec.h
include/kern/limits.h
include/kern/reboot.h
include/kern/resource.h
include/kern/seek.h
include/kern/sfs.h
include/kern/signal.h
include/kern/socket.h
include/kern/stat.h
include/kern/stattypes.h
include/kern/syscall.h
include/kern/time.h
include/kern/types.h
include/kern/unistd.h
include/kern/wait.h
include/lib.h
include/limits.h
include/mainbus.h
include/proc.h
include/queue.h
include/setjmp.h
include/sfs.h
include/signal.h
include/spinlock.h
include/spl.h
include/stat.h
include/stdarg.h
include/synch.h
include/synchprobs.h
include/syscall.h
include/test.h
include/thread.h
include/threadlist.h
include/threadprivate.h
include/types.h
include/uio.h
include/uw-vmstats.h
include/version.h
include/vfs.h
include/vm.h
include/vnode.h
include/wchan.h
lib/array.c
lib/bitmap.c
lib/bswap.c
lib/kgets.c
lib/kprintf.c
lib/misc.c
lib/queue.c
lib/uio.c
proc/proc.c
startup/main.c
startup/menu.c
synchprobs/catmouse.c
synchprobs/catmouse_synch.c
synchprobs/traffic.c
synchprobs/traffic_synch.c
synchprobs/whalemating.c
syscall/file_syscalls.c
syscall/loadelf.c
syscall/proc_syscalls.c
syscall/runprogram.c
syscall/time_syscalls.c
test/arraytest.c
test/bitmaptest.c
test/fstest.c
test/malloctest.c
test/nettest.c
test/synchtest.c
test/threadtest.c
test/tt3.c
test/uw-tests.c
thread/clock.c
thread/spinlock.c
thread/spl.c
thread/synch.c
thread/thread.c
thread/threadlist.c
vfs/device.c
vfs/devnull.c
vfs/vfscwd.c
vfs/vfslist.c
vfs/vfslookup.c
vfs/vfspath.c
vfs/vnode.c
vm/copyinout.c
vm/kmalloc.c
vm/uw-vmstats.c
/usr/include/elf.h
/usr/include/endian.h
/usr/include/limits.h
/usr/include/setjmp.h
/usr/include/signal.h
/usr/include/syscall.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/posix1_lim.h
/usr/include/bits/posix2_lim.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/setjmp.h
/usr/include/bits/setjmp2.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/siginfo.h
/usr/include/bits/signum.h
/usr/include/bits/sigset.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/types.h
/usr/include/bits/wordsize.h
/usr/include/bits/xopen_lim.h
/usr/include/features.h
/usr/include/stdint.h
/usr/include/sys/syscall.h
/usr/include/sys/ucontext.h
/usr/include/time.h
/usr/include/asm/unistd.h
/usr/include/bits/local_lim.h
/usr/include/bits/predefs.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/syscall.h
/usr/include/bits/time.h
/usr/include/bits/typesizes.h
/usr/include/bits/wchar.h
/usr/include/gnu/stubs.h
/usr/include/sys/cdefs.h
/usr/include/xlocale.h
/usr/include/asm/unistd_32.h
/usr/include/asm/unistd_64.h
/usr/include/bits/timex.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
/usr/include/linux/limits.h
